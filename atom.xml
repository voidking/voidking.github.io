<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习的郝</title>
  
  <subtitle>好好学习，天天向上！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.voidking.com/"/>
  <updated>2020-10-28T16:09:16.293Z</updated>
  <id>https://www.voidking.com/</id>
  
  <author>
    <name>好好学习的郝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用IDEA开发Golang和Python</title>
    <link href="https://www.voidking.com/dev-idea-golang-python/"/>
    <id>https://www.voidking.com/dev-idea-golang-python/</id>
    <published>2020-09-09T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>突然发现，自己安装了三款 JetBrains 的产品：IDEA、GoLand和PyCharm。这三款软件大小差不多，长得差不多，用起来也差不多。唯一的差别，就是自己在使用不同的编程语言写代码时，需要在它们之间来回切换。<br>能不能，只保留其中一款呢？一个IDE，所有编程语言通用，或者至少能够保证Java、Golang、Python通用。<br>这个需求是合理的，而且是很简单的配置就可以实现的，本文就来总结一下IDEA配置开发Golang和Python的方法。</p><a id="more"></a><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>IDEA本身就是适用于Java开发的，具体配置方法可以参考<a href="https://www.voidking.com/dev-idea-config/">《IDEA的常用配置》</a>和<a href="https://www.voidking.com/dev-idea-maven-javaweb/">《使用IDEA新建Maven JavaWeb项目》</a>。</p><p>此外，IDEA还支持Android开发，可以参考<a href="https://www.voidking.com/dev-android-as/">《Android开发——Android Studio》</a>进行配置。</p><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><p>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索Go，找到Go插件并安装。<br>This plugin extends IntelliJ platform with Go-specific coding assistance and tool integrations, and has everything you could find in GoLand.<br>3、重启IDEA。菜单栏，IntelliJ IDEA，Preferences…。<br>4、Languages &amp; Frameworks，Go。<br>5、配置好GOROOT和GOPATH。</p><p>上面的IDEA配置，和Goland几乎相同，然后就可以像Goland一样开发Go语言程序了。</p><p>Go项目Debug的配置方法，参考<a href="https://www.voidking.com/dev-beego-start-2/">《beego入门篇——下》</a>中的调试一节。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>配置方法参考<a href="https://www.jetbrains.com/help/idea/configuring-python-sdk.html" target="_blank" rel="noopener">Configure a Python SDK</a>。</p><p>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索Python，找到Python插件并安装。<br>The Python plug-in provides smart editing for Python scripts. The feature set of the plugin corresponds to PyCharm IDE Professional Edition.<br>3、重启IDEA。菜单栏，File，Project Structure…。<br>4、Platform Settings，加号，Add Python SDK…。<br>5、Project Settings，Project SDK，选择新添加的Python SDK。</p><p>上面的IDEA配置，和PyCharm有所不同。PyCharm中的Python SDK配置，位置在Preferences，Project: project_name。</p><p>Python项目Debug的配置方法，参考<a href="https://www.voidking.com/dev-pycharm-debug/">《PyCharm调试》</a>。不同的是，如果Debug Configurations窗口点击加号，第一眼看不到Python，那么Python在Other层级下。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上，IDEA就成了一个全能IDE，可以开发Java、Golang和Python。如果需要支持其他语言，同样的方法，查找并安装插件即可。<br>Goland和PyCharm可以卸载了，nice。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;突然发现，自己安装了三款 JetBrains 的产品：IDEA、GoLand和PyCharm。这三款软件大小差不多，长得差不多，用起来也差不多。唯一的差别，就是自己在使用不同的编程语言写代码时，需要在它们之间来回切换。&lt;br&gt;能不能，只保留其中一款呢？一个IDE，所有编程语言通用，或者至少能够保证Java、Golang、Python通用。&lt;br&gt;这个需求是合理的，而且是很简单的配置就可以实现的，本文就来总结一下IDEA配置开发Golang和Python的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="idea" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/idea/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
      <category term="java" scheme="https://www.voidking.com/tags/java/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>git commit message进阶</title>
    <link href="https://www.voidking.com/dev-git-commit-message/"/>
    <id>https://www.voidking.com/dev-git-commit-message/</id>
    <published>2020-07-30T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="还可以更好"><a href="#还可以更好" class="headerlink" title="还可以更好"></a>还可以更好</h1><p>使用git很多年，也提交了很多代码，自以为使用习惯良好。因为每次提交代码，我都会在git commit message中说明清楚修改的内容。但是，偶然间读到一些关于commit message的文章，才发现还有很多进步的空间。</p><p>本文就来学习一下编写更高质量的提交信息，主要参考 <a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南</a>、<a href="https://juejin.im/post/6844903606815064077" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a> 和 <a href="https://www.conventionalcommits.org/" target="_blank" rel="noopener">Conventional Commits</a>。</p><a id="more"></a><h1 id="约定式提交"><a href="#约定式提交" class="headerlink" title="约定式提交"></a>约定式提交</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>约定式提交规范是一种基于提交消息的轻量级约定。它提供了一组用于创建清晰的提交历史的简单规则；这使得编写基于规范的自动化工具变得更容易。 这个约定与 <a href="http://semver.org/" target="_blank" rel="noopener">SemVer</a> 相吻合， 在提交信息中描述新特性、bug 修复和破坏性变更。</p><p>约定式提交优点：</p><ul><li>自动化生成 CHANGELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度。</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>提交说明的结构如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;<span class="selector-attr">[可选的作用域]</span>: &lt;描述&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[可选的正文]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[可选的脚注]</span></span><br></pre></td></tr></table></figure><p>提交方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "</span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> &lt;类型&gt;[可选的作用域]: &lt;描述&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> [可选的正文]</span></span><br><span class="line"><span class="meta">dquote&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> [可选的脚注]</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> <span class="string">"</span></span></span><br></pre></td></tr></table></figure><p>提交说明包含了下面的结构化元素，以向类库使用者表明其意图：</p><table><thead><tr><th>类型</th><th align="left">描述</th></tr></thead><tbody><tr><td>fix</td><td align="left">在代码库中修复了一个 bug（这和语义化版本中的 PATCH 相对应）。</td></tr><tr><td>feat</td><td align="left">在代码库中新增了一个功能（这和语义化版本中的 MINOR 相对应）。</td></tr><tr><td>docs</td><td align="left">文档相关的改动。</td></tr><tr><td>refactor</td><td align="left">重构</td></tr><tr><td>improvement</td><td align="left">性能提升</td></tr><tr><td>test</td><td align="left">测试用例修改</td></tr><tr><td>style</td><td align="left">代码格式修改, 注意不是 css 修改</td></tr><tr><td>chore</td><td align="left">其他修改, 比如构建流程, 依赖管理。</td></tr><tr><td>Close</td><td align="left">在可选的正文或脚注的起始位置，关闭issue</td></tr><tr><td>BREAKING CHANGE</td><td align="left">在可选的正文或脚注的起始位置，表示引入了破坏性 API 变更（这和语义化版本中的 MAJOR 相对应）。 破坏性变更可以是任意类型提交的一部分。</td></tr></tbody></table><p>以上类型都是可选的，其他类型也被允许，根据需要定义项目的提交规范就好。并且在语义化版本中没有隐式的影响（除非他们包含 BREAKING CHANGE）。<br>可以为提交类型添加一个围在圆括号内的作用域，以为其提供额外的上下文信息。例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">feat</span><span class="params">(parser)</span></span>: adds ability to parse arrays.</span><br></pre></td></tr></table></figure><p>可以在类型/作用域前缀之后，<code>:</code> 之前，附加 <code>!</code> 字符，以进一步提醒注意破坏性变更。当有 <code>!</code> 前缀时，正文或脚注内必须包含 BREAKING CHANGE: description</p><p>约定式提交和 SemVer 的关联：fix 类型提交应当对应到 PATCH 版本。feat 类型提交应该对应到 MINOR 版本。带有 BREAKING CHANGE 的提交不管类型如何，都应该对应到 MAJOR 版本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/yargs/yargs" target="_blank" rel="noopener">yargs</a>：广受欢迎的命令行参数解析器。</li><li><a href="https://github.com/istanbuljs/istanbuljs" target="_blank" rel="noopener">istanbuljs</a>：一套为 JavaScript 测试生成测试覆盖率的开源工具和类库。</li><li><a href="https://github.com/dmfay/massive-js" target="_blank" rel="noopener">massive.js</a>：一个用于 Node 和 PostgreSQL 的数据访问类库。</li><li><a href="https://github.com/electron/electron" target="_blank" rel="noopener">electron</a>：用 JavaScript、HTML 和 CSS 构建跨平台应用。</li><li><a href="https://github.com/LeDDGroup/scroll-utility" target="_blank" rel="noopener">scroll-utility</a>：一个居中元素和平滑动画的滚屏工具包实例。</li><li><a href="https://github.com/BlazeUI/blaze" target="_blank" rel="noopener">Blaze UI</a>：无框架开源 UI 套件。</li><li><a href="https://github.com/monicahq/monica" target="_blank" rel="noopener">Monica</a>：一个开源的人际关系管理系统。</li><li><a href="https://mhy.js.org/" target="_blank" rel="noopener">mhy</a>：一个零配置、开箱即用的、多用途工具箱与开发环境。</li><li><a href="https://github.com/lamartire/sharec" target="_blank" rel="noopener">sharec</a>：一个用于模板和配置文件版本化的极简工具。</li></ul><h1 id="提交帮助工具"><a href="#提交帮助工具" class="headerlink" title="提交帮助工具"></a>提交帮助工具</h1><h2 id="git-commit提示"><a href="#git-commit提示" class="headerlink" title="git commit提示"></a>git commit提示</h2><p>1、修改 <code>~/.gitconfig</code> ，添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[commit]</span></span><br><span class="line"><span class="attr">template</span> = ~/.gitmessage</span><br></pre></td></tr></table></figure><p>2、新建 <code>~/.gitmessage</code> ，内容为</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># head: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span><br><span class="line"><span class="meta"># - type: feat, fix, docs, style, refactor, test, chore</span></span><br><span class="line"><span class="meta"># - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)</span></span><br><span class="line"><span class="meta"># - subject: start with verb (such as 'change'), 50-character line</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># body: 72-character wrapped. This should answer:</span></span><br><span class="line"><span class="meta"># * Why was this change necessary?</span></span><br><span class="line"><span class="meta"># * How does it address the problem?</span></span><br><span class="line"><span class="meta"># * Are there any side effects?</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># footer: </span></span><br><span class="line"><span class="meta"># - Include a link to the ticket, if any.</span></span><br><span class="line"><span class="meta"># - BREAKING CHANGE</span></span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure><p>3、使用提示<br><code>git commit</code></p><h2 id="commitizen"><a href="#commitizen" class="headerlink" title="commitizen"></a>commitizen</h2><p>参考 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;还可以更好&quot;&gt;&lt;a href=&quot;#还可以更好&quot; class=&quot;headerlink&quot; title=&quot;还可以更好&quot;&gt;&lt;/a&gt;还可以更好&lt;/h1&gt;&lt;p&gt;使用git很多年，也提交了很多代码，自以为使用习惯良好。因为每次提交代码，我都会在git commit message中说明清楚修改的内容。但是，偶然间读到一些关于commit message的文章，才发现还有很多进步的空间。&lt;/p&gt;
&lt;p&gt;本文就来学习一下编写更高质量的提交信息，主要参考 &lt;a href=&quot;https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Commit message 和 Change log 编写指南&lt;/a&gt;、&lt;a href=&quot;https://juejin.im/post/6844903606815064077&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;优雅的提交你的 Git Commit Message&lt;/a&gt; 和 &lt;a href=&quot;https://www.conventionalcommits.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Conventional Commits&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/git/"/>
    
    
      <category term="git" scheme="https://www.voidking.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>K8S中的网络策略</title>
    <link href="https://www.voidking.com/dev-k8s-network-policy/"/>
    <id>https://www.voidking.com/dev-k8s-network-policy/</id>
    <published>2020-07-29T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="怎样限制Pod中的网络流量？"><a href="#怎样限制Pod中的网络流量？" class="headerlink" title="怎样限制Pod中的网络流量？"></a>怎样限制Pod中的网络流量？</h1><p>已知pod名为 webapp ，label为 <code>name=webapp</code> 。现在想要模拟无法访问数据库，限制它的流量，禁止它访问 10.0.0.0/24 网段的所有3306端口，该怎么实现？</p><p>方法一：使用NetworkPolicy限流<br>方法二：开启pod特权模式，在pod内部使用iptables限流<br>方法三：登录pod所在宿主机，在pod所在ns中使用iptables限流</p><a id="more"></a><h1 id="NetworkPolicy"><a href="#NetworkPolicy" class="headerlink" title="NetworkPolicy"></a>NetworkPolicy</h1><p>网络策略（NetworkPolicy）是一种关于 Pod 间及与其他网络端点间所允许的通信规则的规范。<br>NetworkPolicy 资源使用 标签 选择 Pod，并定义选定 Pod 所允许的通信规则。</p><p>网络策略通过网络插件来实现。要使用网络策略，用户必须使用支持 NetworkPolicy 的网络解决方案。创建一个资源对象，而没有控制器来使它生效的话，是没有任何作用的。</p><p>默认情况下，Pod 是非隔离的，它们接受任何来源的流量。<br>Pod 可以通过相关的网络策略进行隔离。一旦命名空间中有网络策略选择了特定的 Pod，该 Pod 会拒绝网络策略所不允许的连接。 (命名空间下其他未被网络策略所选择的 Pod 会继续接收所有的流量)<br>网络策略不会冲突，它们是附加的。如果任何一个或多个策略选择了一个 Pod, 则该 Pod 受限于这些策略的 ingress/egress 规则的并集。因此评估的顺序并不会影响策略的结果。</p><p>更多内容参考<a href="https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/" target="_blank" rel="noopener">网络策略</a>和<a href="https://community.qingcloud.com/assets/uploads/files/1567145042807-networkpolicy%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.pdf" target="_blank" rel="noopener">NetworkPolicy最佳实践</a>。</p><p>基础规则：</p><ul><li>如果 Pod 没有被 NetworkPolicy 匹配到，那么它的流量是被允许的 </li><li>如果 Pod 被 NetworkPolicy 匹配到，但是没有出口/入口规则被匹配到，那么它的出口/入口流量是被禁止的</li><li>只能指定规则来允许流量通行，而不能直接禁止流量通行</li><li>NetworkPolicy 中的 Rule 之间的匹配逻辑是 OR</li><li>NetworkPolicy 默认的作用域是 Pod 所在的 Namespace</li></ul><p>1、创建np.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-network-policy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">policyTypes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Egress</span></span><br><span class="line">  <span class="attr">ingress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ipBlock:</span></span><br><span class="line">        <span class="attr">cidr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">        <span class="attr">except:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure><p>这种实现方式，其实有一个问题，就是限流时不止限制了3306端口，还限制了 10.0.0.0/24 网段的所有端口。<br>能不能只限制 10.0.0.0/24 网段的 3306 端口呢？理论上可以实现，然而我不会。。。</p><p>2、执行限流</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f <span class="built_in">np</span>.yaml</span><br></pre></td></tr></table></figure><p>3、解除限流</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">delete</span> -f <span class="built_in">np</span>.yaml</span><br></pre></td></tr></table></figure><h1 id="pod特权模式限流"><a href="#pod特权模式限流" class="headerlink" title="pod特权模式限流"></a>pod特权模式限流</h1><p>1、在pod定义中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">securityContext:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#runAsUser: 0</span></span><br></pre></td></tr></table></figure><p>2、在pod内部执行限流</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A <span class="keyword">OUTPUT</span> -p tcp --dport <span class="number">3306</span> -j <span class="built_in">DROP</span></span><br></pre></td></tr></table></figure><p>3、解除限流</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t<span class="built_in"> nat </span>-nL --line-number</span><br><span class="line">iptables -D OUTPUT 1</span><br></pre></td></tr></table></figure><h1 id="宿主机限流"><a href="#宿主机限流" class="headerlink" title="宿主机限流"></a>宿主机限流</h1><p>1、登录宿主机</p><p>2、查找容器pid</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">ps</span> | <span class="keyword">grep</span> webapp</span><br><span class="line">docker inspect <span class="symbol">&lt;container_id&gt;</span> | <span class="keyword">grep</span> pid -i</span><br></pre></td></tr></table></figure><p>3、执行限流</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter -<span class="built_in">t</span> &lt;pid&gt; -<span class="built_in">n</span> iptables -A OUTPUT -p tcp --dport <span class="number">3306</span> -j DROP</span><br></pre></td></tr></table></figure><p>4、解除限流</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nsenter -t &lt;pid&gt; -n iptables -t<span class="built_in"> nat </span>-nL --line-number</span><br><span class="line">nsenter -t 8993 -n iptables -D OUTPUT 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;怎样限制Pod中的网络流量？&quot;&gt;&lt;a href=&quot;#怎样限制Pod中的网络流量？&quot; class=&quot;headerlink&quot; title=&quot;怎样限制Pod中的网络流量？&quot;&gt;&lt;/a&gt;怎样限制Pod中的网络流量？&lt;/h1&gt;&lt;p&gt;已知pod名为 webapp ，label为 &lt;code&gt;name=webapp&lt;/code&gt; 。现在想要模拟无法访问数据库，限制它的流量，禁止它访问 10.0.0.0/24 网段的所有3306端口，该怎么实现？&lt;/p&gt;
&lt;p&gt;方法一：使用NetworkPolicy限流&lt;br&gt;方法二：开启pod特权模式，在pod内部使用iptables限流&lt;br&gt;方法三：登录pod所在宿主机，在pod所在ns中使用iptables限流&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="网络" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="网络" scheme="https://www.voidking.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>jq命令的安装使用</title>
    <link href="https://www.voidking.com/dev-jq-command/"/>
    <id>https://www.voidking.com/dev-jq-command/</id>
    <published>2020-07-21T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jq命令简介"><a href="#jq命令简介" class="headerlink" title="jq命令简介"></a>jq命令简介</h1><p>jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。</p><p>更多内容，参考 <a href="https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html" target="_blank" rel="noopener">命令行 JSON 处理工具 jq 的使用介绍</a>。</p><a id="more"></a><h1 id="安装jq"><a href="#安装jq" class="headerlink" title="安装jq"></a>安装jq</h1><p>1、macos</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span><span class="keyword">jq</span></span><br></pre></td></tr></table></figure><p>2、linux</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/stedolan/</span>jq<span class="regexp">/releases/</span>download<span class="regexp">/jq-1.6/</span>jq-linux64</span><br><span class="line">chmod a+x jq-linux64 &amp;&amp; mv jq-linux64 <span class="regexp">/usr/</span>bin<span class="regexp">/jq</span></span><br></pre></td></tr></table></figure><p>3、centos</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span></span><br><span class="line">yum <span class="keyword">install</span> jq</span><br></pre></td></tr></table></figure><p>4、ubuntu</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apt</span> <span class="string">update</span></span><br><span class="line"><span class="attr">apt</span> <span class="string">install -y jq</span></span><br></pre></td></tr></table></figure><h1 id="jq表达式"><a href="#jq表达式" class="headerlink" title="jq表达式"></a>jq表达式</h1><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq .</span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq <span class="string">.name</span></span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq -r <span class="string">.name</span></span><br></pre></td></tr></table></figure><p>用户在使用jq时，需要使用jq支持的语法来构建表达式(filters)并将其传给jq。jq根据语法规则解析表达式，并应用在输入的JSON数据上从而得到需要的结果。</p><p>上面例子中的 <code>.</code> 和 <code>.name</code> 就是表达式。<br><code>.</code> 符号表示对表达式输入的整个JSON对象的引用，<code>.name</code>和<code>.name?</code>表示获取JSON对象的属性。当输入不是JSON对象或数组时，带着问号的方式不会抛出异常。</p><p>选项的含义查看jq帮助即可，比如-r表示输出raw格式内容。</p><h2 id="串行操作"><a href="#串行操作" class="headerlink" title="串行操作"></a>串行操作</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq <span class="string">.name.firstname</span></span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq '<span class="string">.name</span> | <span class="string">.firstname</span>'</span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq '<span class="string">.name</span> | <span class="string">.firstname</span>,<span class="string">.lastname</span>'</span><br></pre></td></tr></table></figure><p>jq表达式支持串行化操作。一个复杂的表达式可以由多个简单的表达式组成，以管道符号 <code>|</code> 分割，串行化执行。管道前面表达式的输出，是管道后面表达式的输入。</p><p>逗号 <code>,</code> 表示对同一个输入应用多个表达式。</p><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq .</span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[0:2]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[0,1]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[].name'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[] | .name'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[] | .["</span>name<span class="string">"]'</span></span><br></pre></td></tr></table></figure><p>jq 提供三种基础表达式来操作数组：<br>迭代器操作<code>.[]</code>，该表达式的输入可以是数组或者JSON对象，输出的是基于数组元素或者JSON对象属性值的迭代器（iterator）。<br>访问特定元素的操作<code>.[index]</code>或<code>.[&quot;attributename&quot;]</code>。用来访问数组元素或者JSON对象的属性值，输出是单个值。<br>数组切片操作<code>.[startindex:endindex]&#39;</code>，其行为类似于 python 语言中数组切片操作。</p><p>一个表达式产生的结果是迭代器时，迭代器的每一个值会分别作为的输入，传给后面的表达式。</p><h1 id="jq运算"><a href="#jq运算" class="headerlink" title="jq运算"></a>jq运算</h1><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.num*3'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.num/3'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str+"</span><span class="number">3</span><span class="string">"'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str*3'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str/"</span><span class="number">4</span><span class="string">"'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.+[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.-[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;]'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.+&#123;"</span>name<span class="string">":&#123;"</span>nickname<span class="string">":"</span>Hankin<span class="string">"&#125;&#125;'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.*&#123;"</span>name<span class="string">":&#123;"</span>nickname<span class="string">":"</span>Hankin<span class="string">"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.name.nickname//"</span>Hankin<span class="string">"'</span></span><br><span class="line"></span><br><span class="line">jq -n <span class="string">'([1,2]|.[])+([4,6]|.[])'</span></span><br></pre></td></tr></table></figure><p>jq 内部支持的数据类型有：数字，字符串，数组和对象(object)。</p><p>数字运算：jq支持加减乘除(/)和求余(%)运算。<br>字符串运算：jq 提供字符串的连接、复制、分割运算。<br>数组运算：并集、差集运算。<br>对象运算：合并。<br>比较运算：jq 内部支持的比较运算，规则与js基本相同。<br>逻辑运算: and/or/not。在 jq 逻辑运算中，除了 false 和 null 外，其余的任何值都等同于 true。<br>默认值运算符：双斜杠。<br>迭代器运算：每一个元素拿出来分别运算。</p><h1 id="jq函数"><a href="#jq函数" class="headerlink" title="jq函数"></a>jq函数</h1><p>jq 支持函数。在使用 jq 函数时，我们应该注意区分两个概念：输入和参数。输入可能是整个表达式的输入数据也可能是表达式别的部分的输出。而参数和函数一起构成新的filter来处理输入。<br>和其他编程语言不同的是，在调用函数时，多个参数之间以分号分隔。jq通过内置函数提供了数据处理时常用的操作，例如：映射，过滤、路径操作等。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo '[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]'| jq -r 'map(.+<span class="number">1</span>)'</span><br></pre></td></tr></table></figure><p>在数据处理过程中，我们经常需要将数据从一种形式转换成另外一种形式，或者改变数据的值。<br>jq提供了两个内置映射函数来实现这种转换：map 和 map_values。其中，map处理的对象是数组，而map_values则处理对象属性的值。map 函数的参数为 filter 表达式。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo '[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]'| jq -r 'map(select(.&gt;<span class="number">2</span>))'</span><br><span class="line">echo '[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]'| jq -r '.[]|select(.&gt;<span class="number">2</span>)'</span><br></pre></td></tr></table></figure><p>jq中有两种类型的选择过滤操作。<br>第一种是基于数据类型的过滤，如表达式<code>.[]|arrays</code>的结果只包含数组。可以用来过滤的类型过滤器有：arrays, objects, iterables, booleans, numbers, normals, finites, strings, nulls, values, scalars。<br>第二种是select函数。select接受一个条件表达式作为参数。其输入可以是迭代器，或者和map函数配合使用来处理数组。当输入中的某个元素使select参数中的条件表达式结果为真时，则在结果中保留该元素，否则不保留该元素。</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>jq中的path是指从根到某个叶子属性的访问路径。<br>在jq中有两种表示路径的方式：数组表示法和属性表示法。<br>属性表示法类似于我们在filter中访问某个属性值的方式，如<code>.a.b</code>。<br>数组表示法是将路径中的每一部分表示为数组的一个元素。<br>jq提供了一个内置函数path用来实现路径从属性表示法到数组表示法的转换。</p><p>jq还提供了函数用来读取路径的值（getpath）, 设置路径的值（setpath）和删除路径（del）。<br>不过这三个函数对路径的处理并不一致。其中getpath和setpath只接受数组表示法的路径，而del函数只能正确处理属性表示法的路径。</p><p>jq还提供了一个函数paths用来枚举可能存在的路径。在没有参数的情况下，paths函数将输出JSON数据中所有可能的路径。paths函数可以接受一个过滤器，来只输出满足条件的路径。</p><p>jq中提供了一系列的函数用来判断某个元素或者属性是否存在于输入数据中。其中函数has和in用来判断JSON对象或数组是否包含特定的属性或索引。函数contains和inside用来判断参数是否完全包含在输入数据中。对于不同的数据类型，判断是否完全包含的规则不同。对于字符串，如果A是B的子字符串，则认为A完全包含于B。对于对象类型，如果对象A的所有属性在对象B中都能找到且值相同，则认为A完全包含于B。</p><h2 id="数组函数"><a href="#数组函数" class="headerlink" title="数组函数"></a>数组函数</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jq -nr '[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>]|<span class="type">flatten</span>'</span><br><span class="line">jq -nr '[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]|<span class="type">reverse</span>'</span><br><span class="line">jq -nr '[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]|<span class="type">sort</span>'</span><br><span class="line">jq -nr '[&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"a"</span>:<span class="number">2</span>&#125;]|<span class="type">sort_by</span>(.a)'</span><br><span class="line">jq -nr '<span class="string">"abcb"</span>|<span class="type">indices</span>(<span class="string">"b"</span>)'</span><br><span class="line">jq -nr '[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]|<span class="type">indices</span>(<span class="number">3</span>)'</span><br></pre></td></tr></table></figure><p>jq 提供内置函数用于完成数组的扁平化（flatten），反序（reverse），排序（sort、sort_by），比较（min、min_by、max、max_by）和查找（indices、index、rindex）。其中indices函数的输入数据可以是数组，也可以是字符串。和 index函数不同的是，其结果是一个包含所有参数在输入数据中位置的数组。</p><h1 id="jq高级特性"><a href="#jq高级特性" class="headerlink" title="jq高级特性"></a>jq高级特性</h1><p>变量、Reduce、自定义函数和模块等。未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jq命令简介&quot;&gt;&lt;a href=&quot;#jq命令简介&quot; class=&quot;headerlink&quot; title=&quot;jq命令简介&quot;&gt;&lt;/a&gt;jq命令简介&lt;/h1&gt;&lt;p&gt;jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。&lt;/p&gt;
&lt;p&gt;更多内容，参考 &lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;命令行 JSON 处理工具 jq 的使用介绍&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="linux" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/linux/"/>
    
    
      <category term="linux" scheme="https://www.voidking.com/tags/linux/"/>
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Docker Swarm</title>
    <link href="https://www.voidking.com/dev-docker-swarm/"/>
    <id>https://www.voidking.com/dev-docker-swarm/</id>
    <published>2020-07-10T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Swarm简介"><a href="#Docker-Swarm简介" class="headerlink" title="Docker Swarm简介"></a>Docker Swarm简介</h1><p>Docker Swarm是一个Docker集群调度管理工具。相比于Kubernetes，Swarm内置于Docker，更加轻量，更加简单方便；相应的，就没有Kubernetes那么多强大的特性。</p><p>本文搭建使用Swarm，主要参考<a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener">Swarm mode overview</a> 和 <a href="https://zhuanlan.zhihu.com/p/105420094" target="_blank" rel="noopener">docker swarm（一） 入门 – 搭建一个简单的swarm集群</a>。</p><p>已有两个安装好Docker的机器（swarm-manager和swarm-worker），IP分别为 192.168.56.104 和 192.168.56.105 ，两台主机的hosts都添加：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168.56.104</span> swarm-manager</span><br><span class="line"><span class="number">192.168.56.105</span> swarm-worker</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Swarm集群搭建"><a href="#Swarm集群搭建" class="headerlink" title="Swarm集群搭建"></a>Swarm集群搭建</h1><h2 id="manager-node"><a href="#manager-node" class="headerlink" title="manager node"></a>manager node</h2><p><strong>在swarm-manager节点：</strong></p><p>1、创建swarm manager</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span></span><br></pre></td></tr></table></figure><p>这一步会生成join命令，复制记录一下。</p><p>2、验证安装</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">inf</span>o</span><br><span class="line">docker <span class="keyword">node</span> <span class="title">ls</span></span><br></pre></td></tr></table></figure><p>3、关闭防火墙，方便其他主机加入成为worker</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld</span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></table></figure><h2 id="worker-node"><a href="#worker-node" class="headerlink" title="worker node"></a>worker node</h2><p><strong>在swarm-worker节点：</strong><br>1、关闭防火墙，方便manager调用</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld</span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>2、加入swarm成为worker</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN<span class="number">-1</span><span class="number">-21</span>v9lvwrzapfzdzhq4js6xbtyasak4hdcdhz9p13fch23zdbn9-bneduvi9fi4ba05eywhqbe94z <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span>:<span class="number">2377</span></span><br></pre></td></tr></table></figure><p>PS：脱离swarm<br><code>docker swarm leave</code></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><code>docker node ls</code>，查看节点状态。<br><img src="http://cdn.voidking.com/@/imgs/docker-swarm/nodels.jpg?imageView2/0/w/800" alt=""></p><h1 id="使用Swarm"><a href="#使用Swarm" class="headerlink" title="使用Swarm"></a>使用Swarm</h1><p>1、部署一个服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>create \</span><br><span class="line"><span class="attribute">--name</span>=vk-nginx \</span><br><span class="line">--publish <span class="attribute">published</span>=80,target=80 \</span><br><span class="line">--replicas 1  \</span><br><span class="line">voidking/nginx:v1.0</span><br></pre></td></tr></table></figure><p>2、查看服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>ls</span><br><span class="line">docker inspect vk-nginx</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/servicels.jpg?imageView2/0/w/800" alt=""></p><p>3、访问服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span></span><br><span class="line">curl <span class="number">192.168</span><span class="number">.56</span><span class="number">.105</span></span><br></pre></td></tr></table></figure><p>如果此时有一个ip是curl不通的，那么说明有问题，因为所有节点都应该添加端口映射关系。</p><p>4、服务扩容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>scale <span class="attribute">vk-nginx</span>=4</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/scale.jpg?imageView2/0/w/600" alt=""></p><p>5、查看服务在节点的分布</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>ps vk-nginx</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/serviceps.jpg?imageView2/0/w/800" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-Swarm简介&quot;&gt;&lt;a href=&quot;#Docker-Swarm简介&quot; class=&quot;headerlink&quot; title=&quot;Docker Swarm简介&quot;&gt;&lt;/a&gt;Docker Swarm简介&lt;/h1&gt;&lt;p&gt;Docker Swarm是一个Docker集群调度管理工具。相比于Kubernetes，Swarm内置于Docker，更加轻量，更加简单方便；相应的，就没有Kubernetes那么多强大的特性。&lt;/p&gt;
&lt;p&gt;本文搭建使用Swarm，主要参考&lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swarm mode overview&lt;/a&gt; 和 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/105420094&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker swarm（一） 入门 – 搭建一个简单的swarm集群&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;已有两个安装好Docker的机器（swarm-manager和swarm-worker），IP分别为 192.168.56.104 和 192.168.56.105 ，两台主机的hosts都添加：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;192.168.56.104&lt;/span&gt; swarm-manager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;192.168.56.105&lt;/span&gt; swarm-worker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="swarm" scheme="https://www.voidking.com/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>youtube、youku、爱奇艺等视频平台下载方法</title>
    <link href="https://www.voidking.com/hobby-video-download/"/>
    <id>https://www.voidking.com/hobby-video-download/</id>
    <published>2020-07-04T11:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频下载的痛点"><a href="#视频下载的痛点" class="headerlink" title="视频下载的痛点"></a>视频下载的痛点</h1><p>很多时候，我们在youtube、youku、爱奇艺、腾讯视频、bilibili等视频平台看到了喜欢的视频，想要下载到本地，但是无法下载，要么必须要客户端才能下载。<br>好不容易下载到本地，对于不同平台下载的视频，还必须使用不同的客户端进行播放。<br>如果想要作为教学视频放到PPT中，还必须进行转码，不同平台还得寻找不同的转码方法。</p><p>太难了，好在一些前辈帮我们解决了这些问题，并且开发出了很多好用的工具。本文中，重点推荐两款个人在用的视频下载工具：<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a>和<a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a>。</p><a id="more"></a><h1 id="youtube-dl"><a href="#youtube-dl" class="headerlink" title="youtube-dl"></a>youtube-dl</h1><p>1、访问<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a>，下载需要的版本，这里以macos版本为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl</span><br><span class="line">sudo chmod a+rx /usr/local/bin/youtube-dl</span><br><span class="line"><span class="meta">#</span><span class="bash"> or </span></span><br><span class="line">brew install youtube-dl</span><br></pre></td></tr></table></figure><p>2、查看视频支持的下载格式，下载视频</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -F http://v.youku.com/v_show/id_XODQzMTQ4NDQ=.html</span><br><span class="line">youtube-dl -f mp4 http://v.youku.com/v_show/id_XODQzMTQ4NDQ=.html</span><br></pre></td></tr></table></figure><h1 id="you-get"><a href="#you-get" class="headerlink" title="you-get"></a>you-get</h1><p>1、访问<a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a>，下载需要的版本，这里以macos版本为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install you-get</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">brew install you-get</span><br></pre></td></tr></table></figure><p>2、查看视频支持的下载格式，下载视频</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">you-get -i http:<span class="regexp">//</span>v.youku.com<span class="regexp">/v_show/i</span>d_XODQzMTQ4NDQ=.html</span><br><span class="line">you-get http:<span class="regexp">//</span>v.youku.com<span class="regexp">/v_show/i</span>d_XODQzMTQ4NDQ=.html</span><br><span class="line"><span class="comment">#you-get --itag=18 'https://www.youtube.com/watch?v=jNQXAC9IVRw'</span></span><br></pre></td></tr></table></figure><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>这两个软件功能上没有太大差别，下载速度也没有太大差别。<br>youtube-dl更加轻量，安装也要比you-get快的多（you-get依赖一堆软件）。<br>对于同一个视频，这两个软件支持的下载格式有所不同，比如上面的例子中，youtube-dl支持mp4格式，you-get支持flv格式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视频下载的痛点&quot;&gt;&lt;a href=&quot;#视频下载的痛点&quot; class=&quot;headerlink&quot; title=&quot;视频下载的痛点&quot;&gt;&lt;/a&gt;视频下载的痛点&lt;/h1&gt;&lt;p&gt;很多时候，我们在youtube、youku、爱奇艺、腾讯视频、bilibili等视频平台看到了喜欢的视频，想要下载到本地，但是无法下载，要么必须要客户端才能下载。&lt;br&gt;好不容易下载到本地，对于不同平台下载的视频，还必须使用不同的客户端进行播放。&lt;br&gt;如果想要作为教学视频放到PPT中，还必须进行转码，不同平台还得寻找不同的转码方法。&lt;/p&gt;
&lt;p&gt;太难了，好在一些前辈帮我们解决了这些问题，并且开发出了很多好用的工具。本文中，重点推荐两款个人在用的视频下载工具：&lt;a href=&quot;https://github.com/ytdl-org/youtube-dl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;youtube-dl&lt;/a&gt;和&lt;a href=&quot;https://github.com/soimort/you-get&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;you-get&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="下载" scheme="https://www.voidking.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Helm入门篇</title>
    <link href="https://www.voidking.com/dev-helm-start/"/>
    <id>https://www.voidking.com/dev-helm-start/</id>
    <published>2020-06-30T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Helm简介"><a href="#Helm简介" class="headerlink" title="Helm简介"></a>Helm简介</h1><blockquote><p><a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a> is the best way to find, share, and use software built for Kubernetes.</p></blockquote><p>helm是k8s的包管理工具，就像yum之于centos，apt之于ubuntu。不同的是，yum管理的是软件包，helm管理的是配置好的k8s资源包。这种配置好的k8s资源包，按照chart的包格式进行包装。以下是wordpress的chart包结构：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wordpress/</span><br><span class="line">  Chart.yaml          <span class="comment"># A YAML file containing information about the chart</span></span><br><span class="line">  LICENSE             <span class="comment"># OPTIONAL: A plain text file containing the license for the chart</span></span><br><span class="line">  README.md           <span class="comment"># OPTIONAL: A human-readable README file</span></span><br><span class="line">  requirements.yaml   <span class="comment"># OPTIONAL: A YAML file listing dependencies for the chart</span></span><br><span class="line">  values.yaml         <span class="comment"># The default configuration values for this chart</span></span><br><span class="line">  charts/             <span class="comment"># A directory containing any charts upon which this chart depends.</span></span><br><span class="line">  templates/          <span class="comment"># A directory of templates that, when combined with values,</span></span><br><span class="line">                      <span class="comment"># will generate valid Kubernetes manifest files.</span></span><br><span class="line">  templates/NOTES.txt <span class="comment"># OPTIONAL: A plain text file containing short usage notes</span></span><br></pre></td></tr></table></figure><p>Helm2包括两个组件：客户端（Helm Client）和服务端（Tiller）。Helm发送指令给Tiller(gRPC协议)，Tiller主要用于管理各种应用发布的版本，并且与k8s进行交互。<br>不过，在 Helm3 中 Tiller 被移除掉了，Helm直接与k8s进行交互，版本相关的数据存储在k8s中。</p><p>更多内容，参考<a href="https://github.com/helm/helm" target="_blank" rel="noopener">helm/helm</a>、<a href="https://mp.weixin.qq.com/s/uWdPB4LvmMmvUX2ioKwbww?spm=a2c6h.12873639.0.0.67905225zuo8Vs" target="_blank" rel="noopener">Helm 从入门到实践 | 从 0 开始制作一个 Helm Charts</a>、<a href="https://whmzsu.github.io/helm-doc-zh-cn/chart/charts-zh_cn.html" target="_blank" rel="noopener">Helm用户与开发者指南</a>。</p><a id="more"></a><h1 id="体验Helm"><a href="#体验Helm" class="headerlink" title="体验Helm"></a>体验Helm</h1><p>越来越喜欢用<a href="https://www.katacoda.com/" target="_blank" rel="noopener">katacoda</a>来学习新技能，Helm也可以在上面通过实践学习。</p><ul><li><a href="https://www.katacoda.com/javajon/courses/kubernetes-pipelines/helm" target="_blank" rel="noopener">Helm Package Manager - BY JAVAJON</a></li><li><a href="https://www.katacoda.com/courses/kubernetes/helm-package-manager" target="_blank" rel="noopener">Helm Package Manager - BY KATACODA</a></li></ul><h1 id="安装Helm"><a href="#安装Helm" class="headerlink" title="安装Helm"></a>安装Helm</h1><p>参考 <a href="https://helm.sh/docs/intro/install/" target="_blank" rel="noopener">Installing Helm</a>，安装helm。</p><h2 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>helm</span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>1、查找需要的<a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener">release版本</a></p><p>2、下载并安装</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">wget</span> https://<span class="meta">get</span>.helm.sh/helm-<span class="built_in">v3</span>.<span class="number">2</span>.<span class="number">4</span>-linux-amd64.tar.gz</span><br><span class="line"><span class="symbol">tar</span> -xzvf helm-<span class="built_in">v2</span>.<span class="number">16</span>.<span class="number">9</span>-linux-amd64.tar.gz</span><br><span class="line"><span class="symbol">mv</span> linux-amd64/helm /usr/local/<span class="keyword">bin/helm</span></span><br><span class="line"><span class="keyword">helm </span>version</span><br></pre></td></tr></table></figure><h1 id="使用Helm"><a href="#使用Helm" class="headerlink" title="使用Helm"></a>使用Helm</h1><p>使用条件：安装配置k8s集群；配置kubectl，可以访问k8s；安装helm。</p><p>查看帮助：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">helm</span> <span class="string">-h</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">get -h</span></span><br></pre></td></tr></table></figure><p>1、初始化Chart仓库</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># helm repo <span class="built_in">add</span> stable http<span class="variable">s:</span>//kubernetes-charts.storage.googleapis.<span class="keyword">com</span>/</span><br><span class="line"># helm repo <span class="built_in">remove</span> stable</span><br><span class="line">helm repo <span class="built_in">add</span> stable http<span class="variable">s:</span>//kubernetes.oss-<span class="keyword">cn</span>-hangzhou.aliyuncs.<span class="keyword">com</span>/charts</span><br><span class="line">helm repo <span class="keyword">list</span></span><br></pre></td></tr></table></figure><p>2、查看可以安装的charts<br><code>helm search repo stable</code></p><p>3、在k8s集群安装mysql</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm repo <span class="keyword">update</span></span><br><span class="line">helm <span class="keyword">show</span> chart <span class="keyword">stable</span>/mysql</span><br><span class="line">helm <span class="keyword">show</span> <span class="keyword">all</span> <span class="keyword">stable</span>/mysql</span><br><span class="line">helm install <span class="keyword">stable</span>/mysql <span class="comment">--generate-name</span></span><br></pre></td></tr></table></figure><p>4、卸载mysql</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">helm</span> <span class="string">ls</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">uninstall smiling-penguin</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">status smiling-penguin</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Helm简介&quot;&gt;&lt;a href=&quot;#Helm简介&quot; class=&quot;headerlink&quot; title=&quot;Helm简介&quot;&gt;&lt;/a&gt;Helm简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm&lt;/a&gt; is the best way to find, share, and use software built for Kubernetes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;helm是k8s的包管理工具，就像yum之于centos，apt之于ubuntu。不同的是，yum管理的是软件包，helm管理的是配置好的k8s资源包。这种配置好的k8s资源包，按照chart的包格式进行包装。以下是wordpress的chart包结构：&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wordpress/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Chart.yaml          &lt;span class=&quot;comment&quot;&gt;# A YAML file containing information about the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LICENSE             &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A plain text file containing the license for the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  README.md           &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A human-readable README file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  requirements.yaml   &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A YAML file listing dependencies for the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  values.yaml         &lt;span class=&quot;comment&quot;&gt;# The default configuration values for this chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  charts/             &lt;span class=&quot;comment&quot;&gt;# A directory containing any charts upon which this chart depends.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  templates/          &lt;span class=&quot;comment&quot;&gt;# A directory of templates that, when combined with values,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;comment&quot;&gt;# will generate valid Kubernetes manifest files.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  templates/NOTES.txt &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A plain text file containing short usage notes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Helm2包括两个组件：客户端（Helm Client）和服务端（Tiller）。Helm发送指令给Tiller(gRPC协议)，Tiller主要用于管理各种应用发布的版本，并且与k8s进行交互。&lt;br&gt;不过，在 Helm3 中 Tiller 被移除掉了，Helm直接与k8s进行交互，版本相关的数据存储在k8s中。&lt;/p&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://github.com/helm/helm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;helm/helm&lt;/a&gt;、&lt;a href=&quot;https://mp.weixin.qq.com/s/uWdPB4LvmMmvUX2ioKwbww?spm=a2c6h.12873639.0.0.67905225zuo8Vs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm 从入门到实践 | 从 0 开始制作一个 Helm Charts&lt;/a&gt;、&lt;a href=&quot;https://whmzsu.github.io/helm-doc-zh-cn/chart/charts-zh_cn.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm用户与开发者指南&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="helm" scheme="https://www.voidking.com/tags/helm/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus Operator + Blackbox exporter</title>
    <link href="https://www.voidking.com/dev-prometheus-operator-blackbox-exporter/"/>
    <id>https://www.voidking.com/dev-prometheus-operator-blackbox-exporter/</id>
    <published>2020-06-29T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-k8s-operator/">《Kubernetes Operator》</a>一文中学习了Operator的基础，<a href="https://www.voidking.com/dev-prometheus-blackbox-exporter">《Prometheus Blackbox exporter》</a>一文中学习了blackbox exporter的安装配置。</p><p>而Prometheus Operator，顾名思义，是负责K8S中自动化管理Prometheus的Custom Controller。更多内容，参考<a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="noopener">coreos/prometheus-operator</a></p><p>本文中，我们研究的问题是：怎样利用Prometheus Operator，在Kubernetes集群中安装部署Prometheus，并且添加Blackbox exporter组件？</p><a id="more"></a><h1 id="安装Prom-Operator"><a href="#安装Prom-Operator" class="headerlink" title="安装Prom Operator"></a>安装Prom Operator</h1><p>参考<a href="https://www.qikqiak.com/post/first-use-prometheus-operator/" target="_blank" rel="noopener">Prometheus Operator 初体验</a>和<a href="https://github.com/coreos/kube-prometheus" target="_blank" rel="noopener">coreos/kube-prometheus</a>，安装Prometheus Operator。</p><p>1、kubelet配置添加参数<br><code>vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code><br>添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--authentication-token-webhook</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">--authorization-mode</span>=Webhook</span><br></pre></td></tr></table></figure><p>2、获取源码，并切换版本（与k8s版本的对应关系可以在github仓库找到）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coreos/kube-prometheus.git</span><br><span class="line">cd kube-prometheus</span><br><span class="line">kubectl version</span><br><span class="line">git branch -a</span><br><span class="line">git checkout origin/release-0.4</span><br></pre></td></tr></table></figure><p>3、安装Prom Operator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Create the namespace and CRDs, and <span class="keyword">then</span> <span class="built_in">wait</span> <span class="keyword">for</span> them to be availble before creating the remaining resources</span></span><br><span class="line">kubectl create -f manifests/setup</span><br><span class="line">until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo ""; done</span><br><span class="line">kubectl create -f manifests/</span><br></pre></td></tr></table></figure><p>4、查看安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get crd | grep coreos</span><br><span class="line">kubectl get pod -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br></pre></td></tr></table></figure><p>以上，Prometheus Operator安装完成，Prometheus也安装完成。</p><p>PS：卸载Prom Operator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete --ignore-not-found=true -f manifests/ -f manifests/setup</span><br></pre></td></tr></table></figure><h1 id="安装Blackbox-exporter"><a href="#安装Blackbox-exporter" class="headerlink" title="安装Blackbox exporter"></a>安装Blackbox exporter</h1><p>1、创建yaml文件 blackbox-exporter.yaml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">data:</span></span><br><span class="line">  config.yml: |</span><br><span class="line"><span class="symbol">    modules:</span></span><br><span class="line"><span class="symbol">      http_2xx:</span></span><br><span class="line"><span class="symbol">        prober:</span> http</span><br><span class="line"><span class="symbol">        http:</span></span><br><span class="line"><span class="symbol">          method:</span> GET</span><br><span class="line"><span class="symbol">          preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">      http_post_2xx:</span></span><br><span class="line"><span class="symbol">        prober:</span> http</span><br><span class="line"><span class="symbol">        http:</span></span><br><span class="line"><span class="symbol">          method:</span> POST</span><br><span class="line"><span class="symbol">          preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">      tcp:</span></span><br><span class="line"><span class="symbol">        prober:</span> tcp</span><br><span class="line"><span class="symbol">      ping:</span></span><br><span class="line"><span class="symbol">        prober:</span> icmp</span><br><span class="line"><span class="symbol">        timeout:</span> <span class="number">3</span>s</span><br><span class="line"><span class="symbol">        icmp:</span></span><br><span class="line"><span class="symbol">          preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">      dns_k8s:</span></span><br><span class="line"><span class="symbol">        prober:</span> dns</span><br><span class="line"><span class="symbol">        timeout:</span> <span class="number">5</span>s</span><br><span class="line"><span class="symbol">        dns:</span></span><br><span class="line"><span class="symbol">          transport_protocol:</span> <span class="string">"tcp"</span></span><br><span class="line"><span class="symbol">          preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">          query_name:</span> <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line"><span class="symbol">          query_type:</span> <span class="string">"A"</span></span><br><span class="line"><span class="symbol">kind:</span> ConfigMap</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  namespace:</span> monitoring</span><br><span class="line">---</span><br><span class="line"><span class="symbol">apiVersion:</span> apps/v1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  creationTimestamp:</span> null</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">    cluster:</span> ali-huabei2-dev</span><br><span class="line"><span class="symbol">  name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  namespace:</span> monitoring</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    matchLabels:</span></span><br><span class="line"><span class="symbol">      name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  strategy:</span> &#123;&#125;</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line"><span class="symbol">      creationTimestamp:</span> null</span><br><span class="line"><span class="symbol">      labels:</span></span><br><span class="line"><span class="symbol">        name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">        cluster:</span> ali-huabei2-dev</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">      - image: prom/blackbox-exporter:v0<span class="number">.16</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">        name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">        ports:</span></span><br><span class="line">        - containerPort: <span class="number">9115</span></span><br><span class="line"><span class="symbol">        volumeMounts:</span></span><br><span class="line">        - name: config</span><br><span class="line"><span class="symbol">          mountPath:</span> <span class="meta-keyword">/etc/</span>blackbox_exporter</span><br><span class="line"><span class="symbol">        args:</span></span><br><span class="line">        - --config.file=<span class="meta-keyword">/etc/</span>blackbox_exporter/config.yml</span><br><span class="line">        - --log.level=info</span><br><span class="line"><span class="symbol">      volumes:</span></span><br><span class="line">      - name: config</span><br><span class="line"><span class="symbol">        configMap:</span></span><br><span class="line"><span class="symbol">          name:</span> blackbox-exporter</span><br><span class="line">---</span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Service</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line">  <span class="meta">#annotations:</span></span><br><span class="line">  <span class="meta">#  service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet</span></span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">    cluster:</span> ali-huabei2-dev</span><br><span class="line"><span class="symbol">  name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  namespace:</span> monitoring</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line">  <span class="meta">#externalTrafficPolicy: Local</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  ports:</span></span><br><span class="line">  - name: http-metrics</span><br><span class="line"><span class="symbol">    port:</span> <span class="number">9115</span></span><br><span class="line"><span class="symbol">    targetPort:</span> <span class="number">9115</span></span><br><span class="line"><span class="symbol">  type:</span> LoadBalancer</span><br></pre></td></tr></table></figure><p>2、应用yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f blackbox-exporter.yaml</span><br><span class="line">kubectl get svc -n monitoring</span><br><span class="line">kubectl get deploy -n monitoring</span><br></pre></td></tr></table></figure><h1 id="配置使用Blackbox-exporter（错误方法）"><a href="#配置使用Blackbox-exporter（错误方法）" class="headerlink" title="配置使用Blackbox exporter（错误方法）"></a>配置使用Blackbox exporter（错误方法）</h1><p>在Prometheus中配置使用Blackbox exporter是很简单的，scrape_configs里配置相应字段即可。但是，k8s中的Prometheus配置，会有一些不同。</p><p>1、获取prometheus.yml配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secrets -n monitoring prometheus-k8s -oyaml | grep prometheus.yaml.gz | awk '&#123;print $2&#125;' | base64 --decode | gzip -d &gt; prometheus.yml</span><br></pre></td></tr></table></figure><p>2、查看prometheus.yml配置，下面截取一段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">prometheus:</span> <span class="string">monitoring/k8s</span></span><br><span class="line">    <span class="attr">prometheus_replica:</span> <span class="string">$(POD_NAME)</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/etc/prometheus/rules/prometheus-k8s-rulefiles-0/*.yaml</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">monitoring/node-exporter/0</span></span><br><span class="line">  <span class="attr">honor_labels:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">namespaces:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">tls_config:</span></span><br><span class="line">    <span class="attr">insecure_skip_verify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_k8s_app</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_port_name</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">https</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_address_target_kind</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_address_target_name</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">Node;(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">node</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_address_target_kind</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_address_target_name</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">Pod;(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">pod</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_namespace</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">namespace</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">service</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_pod_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">pod</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">job</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_k8s_app</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">job</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">endpoint</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">https</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_pod_node_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_cluster</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">cluster</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br></pre></td></tr></table></figure><p>其中，job_name配置target名称，kubernetes_sd_configs配置k8s的服务发现，relabel_configs配置标签最终的显示。source_labels是样本的原标签，target_label是显示的标签；regex使用正则匹配value，replacement代表最终显示的value。<code>$1</code>代表regex正则匹配到的第一个字符串。</p><p>3、添加blackbox exporter的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">monitoring/blackbox-exporter/0</span></span><br><span class="line">  <span class="attr">honor_labels:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">namespaces:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">tls_config:</span></span><br><span class="line">    <span class="attr">insecure_skip_verify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_name</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">job</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_cluster</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">cluster</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br></pre></td></tr></table></figure><p>4、应用新的配置</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 1. compress prometheus.yaml</span></span><br><span class="line">cat prometheus.yaml | gzip -f | base64 | tr -d <span class="string">"\n"</span></span><br><span class="line"><span class="meta"># 2. copy string</span></span><br><span class="line"><span class="meta"># 3. edit secret</span></span><br><span class="line">kubectl edit secrets -n monitoring prometheus-k8s</span><br><span class="line"><span class="meta"># 4. replace prometheus.yaml.gz</span></span><br><span class="line"><span class="meta"># 5. get the latest config</span></span><br><span class="line">kubectl <span class="keyword">get</span> secrets -n monitoring prometheus-k8s -oyaml | grep prometheus.yaml.gz | awk <span class="string">'&#123;print $2&#125;'</span> | base64 --decode | gzip -d | grep blackbox</span><br></pre></td></tr></table></figure><p>然而，配置中并没有blackbox，配置没有发生改变！证明了prometheus的配置是自动生成的，手动修改无效。</p><h1 id="配置使用Blackbox-exporter（正确方法）"><a href="#配置使用Blackbox-exporter（正确方法）" class="headerlink" title="配置使用Blackbox exporter（正确方法）"></a>配置使用Blackbox exporter（正确方法）</h1><p>Prometheus Operator中配置Target，是利用ServiceMonitor进行动态发现的方式。</p><p>1、创建servicemonitor的yaml文件，blackbox-exporter-sm.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">p</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">namespaceSelector:</span></span><br><span class="line">    <span class="attr">matchNames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">interval:</span> <span class="string">15s</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">http-metrics</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/probe</span></span><br><span class="line">    <span class="attr">relabelings:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_cluster</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">cluster</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__param_module</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">module</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">target</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">module:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http_2xx</span></span><br><span class="line">      <span class="attr">target:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://prometheus.io</span>    <span class="comment"># Target to probe with http.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://prometheus.io</span>   <span class="comment"># Target to probe with https.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://example.com:8080</span> <span class="comment"># Target to probe with http on port 8080.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">interval:</span> <span class="string">15s</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">http-metrics</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/probe</span></span><br><span class="line">    <span class="attr">relabelings:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_cluster</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">cluster</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__param_module</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">module</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">target</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">module:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dns_k8s</span></span><br><span class="line">      <span class="attr">target:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">172.31</span><span class="number">.16</span><span class="number">.10</span> <span class="comment"># dns ip address</span></span><br></pre></td></tr></table></figure><p>2、应用到k8s集群<br><code>kubectl apply -f blackbox-exporter-sm.yaml</code></p><p>3、等待一分钟后，进行验证<br>访问prometheus的graph页面，可以查看blackbox-exporter指标。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;job=~<span class="string">"blackbox-exporter"</span>,__name__!~<span class="string">"^go.*"</span>&#125;</span><br></pre></td></tr></table></figure><p>查看结果表明，params的配置中，http_2xx 探测只有第一个target生效了，另外两个target根本没有探测记录。本实验证明了，target里只能填写一个域名，多了无效。<br>要想配置多个站点的探测，最简单的办法就是配置多个endpoint。至于N个站点配置M种探测方式，如果你知道怎么配置，欢迎留言告知，感谢~</p><h1 id="配置告警"><a href="#配置告警" class="headerlink" title="配置告警"></a>配置告警</h1><p><a href="https://www.voidking.com/dev-docker-prometheus/">《使用Docker安装配置Prometheus》</a>一文中，我们知道配置告警需要在prometheus配置文件中指定alertmanager实例和报警的rules文件。<br>而通过operator部署的prometheus，怎样配置告警呢？这里需要定义PrometheusRule资源，并且具备标签 prometheus=k8s 和 role=alert-rules。<br>这里以配置dns服务告警为例，dns服务出问题，不能正常解析 kubernetes.default.svc.cluster.local 。</p><p>1、查看alertmanager配置</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secrets -n monitoring alertmanager-main -oyaml | <span class="type">grep</span> <span class="string">"alertmanager.yaml"</span> | <span class="type">awk</span> '&#123;print $<span class="number">2</span>&#125;' | <span class="type">base64</span> -d</span><br></pre></td></tr></table></figure><p>2、创建prometheus-rule-dns.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PrometheusRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">prometheus:</span> <span class="string">k8s</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">alert-rules</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dns-alert-rules</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DNS</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">DNSServerError</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">summary:</span> <span class="literal">No</span> <span class="string">summary</span></span><br><span class="line">        <span class="attr">description:</span> <span class="literal">No</span> <span class="string">description</span></span><br><span class="line">        <span class="attr">webhookToken:</span> <span class="string">xxxxxxxxx</span></span><br><span class="line">      <span class="attr">expr:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">probe_success&#123;module="dns_k8s"&#125;</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">        <span class="attr">alertTag:</span> <span class="string">k8s</span></span><br></pre></td></tr></table></figure><p>3、应用rule<br><code>kubectl apply -f prometheus-rule-dns.yaml</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-k8s-operator/&quot;&gt;《Kubernetes Operator》&lt;/a&gt;一文中学习了Operator的基础，&lt;a href=&quot;https://www.voidking.com/dev-prometheus-blackbox-exporter&quot;&gt;《Prometheus Blackbox exporter》&lt;/a&gt;一文中学习了blackbox exporter的安装配置。&lt;/p&gt;
&lt;p&gt;而Prometheus Operator，顾名思义，是负责K8S中自动化管理Prometheus的Custom Controller。更多内容，参考&lt;a href=&quot;https://github.com/coreos/prometheus-operator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;coreos/prometheus-operator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文中，我们研究的问题是：怎样利用Prometheus Operator，在Kubernetes集群中安装部署Prometheus，并且添加Blackbox exporter组件？&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus Blackbox exporter</title>
    <link href="https://www.voidking.com/dev-prometheus-blackbox-exporter/"/>
    <id>https://www.voidking.com/dev-prometheus-blackbox-exporter/</id>
    <published>2020-06-28T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="白盒监控和黑盒监控"><a href="#白盒监控和黑盒监控" class="headerlink" title="白盒监控和黑盒监控"></a>白盒监控和黑盒监控</h1><p>我们监控主机的资源用量、容器的运行状态、数据库中间件的运行数据。这些都是支持业务和服务的基础设施，通过白盒能够了解其内部的实际运行状态，通过对监控指标的观察能够预判可能出现的问题，从而对潜在的不确定因素进行优化。而从完整的监控逻辑的角度，除了大量的应用白盒监控以外，还应该添加适当的黑盒监控。黑盒监控即以用户的身份测试服务的外部可见性，常见的黑盒监控包括HTTP探针、TCP探针等用于检测站点或者服务的可访问性，以及访问效率等。</p><p>黑盒监控相较于白盒监控最大的不同在于黑盒监控是以故障为导向当故障发生时，黑盒监控能快速发现故障，而白盒监控则侧重于主动发现或者预测潜在的问题。一个完善的监控目标是要能够从白盒的角度发现潜在问题，能够在黑盒的角度快速发现已经发生的问题。</p><p>Prometheus Blackbox exporter允许通过HTTP，HTTPS，DNS，TCP和ICMP对端点进行黑盒探测。</p><p>更多内容，参考<a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/exporter/commonly-eporter-usage/install_blackbox_exporter" target="_blank" rel="noopener">网络探测：Blackbox Exporter</a> 和 <a href="https://github.com/prometheus/blackbox_exporter" target="_blank" rel="noopener">prometheus/blackbox_exporter</a>。</p><p>本文中，我们会安装blackbox exporter，并且使用http探针对一些接口进行探活。</p><a id="more"></a><h1 id="安装使用blackbox-exporter"><a href="#安装使用blackbox-exporter" class="headerlink" title="安装使用blackbox exporter"></a>安装使用blackbox exporter</h1><p>blackbox exporter的常规安装使用方法有三种：直接使用二进制文件、使用docker image、编译安装。<br>这里我们选择使用docker image的方式来进行安装，默认已经安装了docker。</p><p>1、创建配置文件blackbox.yml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">modules:</span></span><br><span class="line"><span class="symbol">  http_2xx:</span></span><br><span class="line"><span class="symbol">    prober:</span> http</span><br><span class="line"><span class="symbol">    http:</span></span><br><span class="line"><span class="symbol">      method:</span> GET</span><br><span class="line"><span class="symbol">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">  http_post_2xx:</span></span><br><span class="line"><span class="symbol">    prober:</span> http</span><br><span class="line"><span class="symbol">    http:</span></span><br><span class="line"><span class="symbol">      method:</span> POST</span><br><span class="line"><span class="symbol">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">  tcp:</span></span><br><span class="line"><span class="symbol">    prober:</span> tcp</span><br><span class="line"><span class="symbol">  ping:</span></span><br><span class="line"><span class="symbol">    prober:</span> icmp</span><br><span class="line"><span class="symbol">    timeout:</span> <span class="number">3</span>s</span><br><span class="line"><span class="symbol">    icmp:</span></span><br><span class="line"><span class="symbol">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">  dns_baidu:</span></span><br><span class="line"><span class="symbol">    prober:</span> dns</span><br><span class="line"><span class="symbol">    timeout:</span> <span class="number">5</span>s</span><br><span class="line"><span class="symbol">    dns:</span></span><br><span class="line"><span class="symbol">      query_name:</span> <span class="string">"baidu.com"</span></span><br><span class="line"><span class="symbol">      query_type:</span> <span class="string">"A"</span></span><br><span class="line"><span class="symbol">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br></pre></td></tr></table></figure><p>探测时默认使用ipv6，探测不支持ipv6的站点都会显示失败，因此在配置时改成了ipv4，更多内容参考<a href="https://prometheus.io/docs/guides/multi-target-exporter/" target="_blank" rel="noopener">UNDERSTANDING AND USING THE MULTI-TARGET EXPORTER PATTERN</a>。</p><p>2、启动blackbox exporter</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name blackbox-exporter -d \</span><br><span class="line">-p 9115:9115  \</span><br><span class="line">-v `pwd`:<span class="built_in">/config </span>\</span><br><span class="line">prom/blackbox-exporter:v0.16.0 --config.<span class="attribute">file</span>=/config/blackbox.yml</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=http_2xx&amp;target=baidu.com"</span><br><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=http_post_2xx&amp;target=baidu.com"</span><br><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=tcp&amp;target=baidu.com:<span class="number">80</span>"</span><br><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=ping&amp;target=baidu.com"</span><br><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=dns_baidu&amp;target=<span class="number">180.76.76.76</span>"</span><br></pre></td></tr></table></figure><p>从返回的样本中，可以获取站点的DNS解析耗时、站点响应时间、HTTP响应状态码等等和站点访问质量相关的监控指标，从而帮助管理员主动的发现故障和问题。</p><h1 id="与prometheus集成"><a href="#与prometheus集成" class="headerlink" title="与prometheus集成"></a>与prometheus集成</h1><p>紧接着<a href="https://www.voidking.com/dev-docker-prometheus/">《使用Docker安装配置Prometheus》</a>，当前prometheus.yml配置内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment">#默认采集监控数据时间间隔</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">monitor:</span> <span class="string">'my-monitor'</span></span><br><span class="line"><span class="attr">scrape_configs:</span>  <span class="comment">#监控对象设置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span> <span class="comment">#任务名称</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span> <span class="comment">#每隔5s获取一次监控数据</span></span><br><span class="line">    <span class="attr">static_configs:</span> <span class="comment">#监控对象地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['127.0.0.1:9090']</span>  <span class="comment"># 将自己加入到监控对象中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9100']</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">'client-node-exporter'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9091']</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">'pushgateway'</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/etc/prometheus/rules.yml</span>   <span class="comment">#告警规则文件路径</span></span><br><span class="line"><span class="attr">alerting:</span>   <span class="comment">#告警管理器设置</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9093']</span> <span class="comment">#告警信息会发送给alertmanager进一步处理</span></span><br></pre></td></tr></table></figure><h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>修改prometheus.yml，添加blackbox exporter相关字段。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">baidu_http2xx_probe</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">module:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http_2xx</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">baidu.com</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/probe</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9115</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus_http2xx_probe</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">module:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http_2xx</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">prometheus.io</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/probe</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9115</span></span><br></pre></td></tr></table></figure><p>这里分别配置了名为baidu_http2x_probe和prometheus_http2xx_probe的采集任务，并且通过params指定使用的探针（module）以及探测目标（target）。</p><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><p>以上配置会有一个问题，假如我们有N个目标站点且都需要M种探测方式，那么Prometheus中将包含N * M 个采集任务，从配置管理的角度来说显然是不可接受的。这里我们利用Prometheus的Relabeling方式对这些配置进行简化，配置方式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scrape_configs</span>:  #监控对象设置</span><br><span class="line">  - <span class="attribute">job_name</span>: prometheus #任务名称</span><br><span class="line">    <span class="attribute">scrape_interval</span>: <span class="number">5s</span> #每隔<span class="number">5s</span>获取一次监控数据</span><br><span class="line">    <span class="attribute">static_configs</span>: #监控对象地址</span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'127.0.0.1:9090'</span>]  # 将自己加入到监控对象中</span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'192.168.56.102:9100'</span>]</span><br><span class="line">        <span class="attribute">labels</span>:</span><br><span class="line">          <span class="attribute">group</span>: <span class="string">'client-node-exporter'</span></span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'192.168.56.102:9091'</span>]</span><br><span class="line">        <span class="attribute">labels</span>:</span><br><span class="line">          <span class="attribute">group</span>: <span class="string">'pushgateway'</span></span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'192.168.56.102:9115'</span>]</span><br><span class="line">  - <span class="attribute">job_name</span>: <span class="string">'blackbox'</span></span><br><span class="line">    <span class="attribute">metrics_path</span>: /probe</span><br><span class="line">    <span class="attribute">params</span>:</span><br><span class="line">      <span class="attribute">module</span>: [http_2xx]</span><br><span class="line">    <span class="attribute">static_configs</span>:</span><br><span class="line">      - <span class="attribute">targets</span>:</span><br><span class="line">        - <span class="attribute">http</span>:<span class="comment">//prometheus.io    # Target to probe with http.</span></span><br><span class="line">        - <span class="attribute">https</span>:<span class="comment">//prometheus.io   # Target to probe with https.</span></span><br><span class="line">        - <span class="attribute">http</span>:<span class="comment">//example.com:8080 # Target to probe with http on port 8080.</span></span><br><span class="line">    <span class="attribute">relabel_configs</span>:</span><br><span class="line">      - <span class="attribute">source_labels</span>: [__address__]</span><br><span class="line">        <span class="attribute">target_label</span>: __param_target</span><br><span class="line">      - <span class="attribute">source_labels</span>: [__param_target]</span><br><span class="line">        <span class="attribute">target_label</span>: instance</span><br><span class="line">      - <span class="attribute">target_label</span>: __address__</span><br><span class="line">        <span class="attribute">replacement</span>: <span class="number">192.168</span>.<span class="number">56.102</span>:<span class="number">9115</span> # The blackbox exporter's real <span class="attribute">hostname</span>:port.</span><br></pre></td></tr></table></figure><p>这里针对每一个探针服务（如http_2xx）定义一个采集任务，并且直接将任务的采集目标定义为我们需要探测的站点。在采集样本数据之前通过relabel_configs对采集任务进行动态设置。</p><p>上面的配置，实际上相当于：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">curl</span> <span class="string">"http://192.168.56.102:9115/probe?module=http_2xx&amp;target=http://prometheus.io"</span></span><br><span class="line">curl <span class="string">"http://192.168.56.102:9115/probe?module=http_2xx&amp;target=https://prometheus.io"</span></span><br><span class="line">curl <span class="string">"http://192.168.56.102:9115/probe?module=http_2xx&amp;target=http://example.com:8080"</span></span><br></pre></td></tr></table></figure><p>这个配置实际上是很奇怪的，因为第一个job中 static_configs.targets 代表的是用来exporter对外暴露的接口，第二个job中 static_configs.targets 却代表blackbox要探测的站点。而且第二个job的 relabel_configs.replacement 居然用来指定blackbox的url，我也是服气了，说好的用来替换标签值的呢？</p><p>重启prometheus，然后进行验证：<br>（1）访问<a href="http://192.168.56.102:9115/" target="_blank" rel="noopener">blackbox-exporter页面</a>，可以看到探测记录的日志。<br>（2）访问<a href="http://192.168.56.102:9090/targets" target="_blank" rel="noopener">prometheus的target页面</a>，即可看到blackbox-exporter。<br>（3）访问<a href="http://192.168.56.102:9090/graph" target="_blank" rel="noopener">prometheus的graph页面</a>，可以查看blackbox-exporter指标。<br> <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;job=~<span class="string">"blackbox"</span>,__name__!~<span class="string">"^go.*"</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;白盒监控和黑盒监控&quot;&gt;&lt;a href=&quot;#白盒监控和黑盒监控&quot; class=&quot;headerlink&quot; title=&quot;白盒监控和黑盒监控&quot;&gt;&lt;/a&gt;白盒监控和黑盒监控&lt;/h1&gt;&lt;p&gt;我们监控主机的资源用量、容器的运行状态、数据库中间件的运行数据。这些都是支持业务和服务的基础设施，通过白盒能够了解其内部的实际运行状态，通过对监控指标的观察能够预判可能出现的问题，从而对潜在的不确定因素进行优化。而从完整的监控逻辑的角度，除了大量的应用白盒监控以外，还应该添加适当的黑盒监控。黑盒监控即以用户的身份测试服务的外部可见性，常见的黑盒监控包括HTTP探针、TCP探针等用于检测站点或者服务的可访问性，以及访问效率等。&lt;/p&gt;
&lt;p&gt;黑盒监控相较于白盒监控最大的不同在于黑盒监控是以故障为导向当故障发生时，黑盒监控能快速发现故障，而白盒监控则侧重于主动发现或者预测潜在的问题。一个完善的监控目标是要能够从白盒的角度发现潜在问题，能够在黑盒的角度快速发现已经发生的问题。&lt;/p&gt;
&lt;p&gt;Prometheus Blackbox exporter允许通过HTTP，HTTPS，DNS，TCP和ICMP对端点进行黑盒探测。&lt;/p&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/exporter/commonly-eporter-usage/install_blackbox_exporter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网络探测：Blackbox Exporter&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/prometheus/blackbox_exporter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;prometheus/blackbox_exporter&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文中，我们会安装blackbox exporter，并且使用http探针对一些接口进行探活。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Operator</title>
    <link href="https://www.voidking.com/dev-k8s-operator/"/>
    <id>https://www.voidking.com/dev-k8s-operator/</id>
    <published>2020-06-27T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-Operator是啥？"><a href="#Kubernetes-Operator是啥？" class="headerlink" title="Kubernetes Operator是啥？"></a>Kubernetes Operator是啥？</h1><blockquote><p><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener">Operators</a> are software extensions to Kubernetes that make use of <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/" target="_blank" rel="noopener">custom resources</a> to manage applications and their components. Operators follow Kubernetes principles, notably the <a href="https://kubernetes.io/docs/concepts/#kubernetes-control-plane" target="_blank" rel="noopener">control loop</a>.</p></blockquote><p>Operator 是 Kubernetes 的扩展软件，通过自定义资源，管理应用及其组件。 Operator 遵循 Kubernetes 的理念，特别是在控制回路方面。</p><p>Kubernetes自定义资源包括Custom resources 和 Custom controllers。</p><p>Operator 模式旨在捕获（正在管理一个或一组服务的）运维人员的关键目标。负责特定应用和service的运维人员，在系统应该如何运行、如何部署以及出现问题时如何处理等方面有深入的了解。<br>在 Kubernetes 上运行工作负载的人们都喜欢通过自动化来处理重复的任务。Operator 模式会封装我们编写的（Kubernetes 本身提供功能以外的）任务自动化代码。</p><p>Operator可以自动化的事情包括：</p><ul><li>按需部署应用</li><li>获取/还原应用状态的备份</li><li>处理应用代码的升级以及相关改动。例如，数据库 schema 或额外的配置设置</li><li>发布一个 service，要求不支持 Kubernetes API 的应用也能发现它</li><li>模拟整个或部分集群中的故障以测试其稳定性</li><li>在没有内部成员选举程序的情况下，为分布式应用选择首领角色</li></ul><p>简单来说，Kubernetes实际是期望状态管理器，如果Kubernetes本身提供的功能无法达到期望状态，特别是对于有状态应用，那么就需要手动处理，而Operator可以使这种处理自动化。</p><p>更多内容，参考<a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener">Operator 模式</a>。</p><p>本文中，将会学习编写一个Operator，并应用到k8s集群。</p><a id="more"></a><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>Operator的yaml文件和go文件，可以纯手写，没毛病。但是使用工具能够提高我们的编写效率。编写Operator的工具有：</p><ul><li><a href="https://kudo.dev/" target="_blank" rel="noopener">KUDO</a>，Kubernetes 通用声明式 Operator)</li><li><a href="https://book.kubebuilder.io/" target="_blank" rel="noopener">kubebuilder</a></li><li><a href="https://metacontroller.app/" target="_blank" rel="noopener">Metacontroller</a>，可与 Webhook 结合使用，以实现自己的功能。</li><li><a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener">Operator Framework</a></li></ul><p>查找和分享Operator：<a href="https://operatorhub.io/" target="_blank" rel="noopener">OperatorHub</a></p><h1 id="Operator-Framework"><a href="#Operator-Framework" class="headerlink" title="Operator Framework"></a>Operator Framework</h1><p><a href="https://coreos.com/blog/introducing-operator-framework" target="_blank" rel="noopener">Operator Framework</a>是一个开源工具包，用来管理被称为operators的k8s应用程序，高效、自动化、可扩展。它的两个核心部分是Operator SDK 和 Operator Lifecycle Manager 。</p><p>Operator SDK：允许开发人员根据专业知识来构建Operator，而无需了解Kubernetes API的复杂性。<br>Operator Lifecycle Manager：帮助用户安装、更新和总体管理跨集群运行的所有Operators（及其相关服务）的生命周期。</p><p>在开发机上安装Operator SDK，在集群中安装Operator Operator Lifecycle Manager。</p><p>对于这两个组件，可以在katacoda上试玩，熟悉它们的安装和使用，<a href="https://www.katacoda.com/openshift/courses/operatorframework/" target="_blank" rel="noopener">Building Operators on OpenShift</a>。</p><h1 id="第一个Operator"><a href="#第一个Operator" class="headerlink" title="第一个Operator"></a>第一个Operator</h1><p>参考<a href="https://www.qikqiak.com/post/k8s-operator-101/" target="_blank" rel="noopener">Kubernetes Operator 快速入门教程</a>，使用Operator Framework开发一个Operator应用，代码仓库<a href="https://github.com/cnych/opdemo" target="_blank" rel="noopener">cnych/opdemo</a>。</p><h1 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h1><p><a href="https://coreos.com/blog/introducing-operators.html" target="_blank" rel="noopener">Introducing Operators: Putting Operational Knowledge into Software</a><br><a href="https://cloud.google.com/blog/products/containers-kubernetes/best-practices-for-building-kubernetes-operators-and-stateful-apps" target="_blank" rel="noopener">Best practices for building Kubernetes Operators and stateful apps</a><br><a href="http://dockone.io/article/8769" target="_blank" rel="noopener">揭秘Kubernetes Operator（一）</a><br><a href="https://bestsamina.github.io/posts/2019-02-04-first-operator-sdk-helm/" target="_blank" rel="noopener">第一次玩 operator-sdk 就上手</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kubernetes-Operator是啥？&quot;&gt;&lt;a href=&quot;#Kubernetes-Operator是啥？&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes Operator是啥？&quot;&gt;&lt;/a&gt;Kubernetes Operator是啥？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Operators&lt;/a&gt; are software extensions to Kubernetes that make use of &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;custom resources&lt;/a&gt; to manage applications and their components. Operators follow Kubernetes principles, notably the &lt;a href=&quot;https://kubernetes.io/docs/concepts/#kubernetes-control-plane&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;control loop&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Operator 是 Kubernetes 的扩展软件，通过自定义资源，管理应用及其组件。 Operator 遵循 Kubernetes 的理念，特别是在控制回路方面。&lt;/p&gt;
&lt;p&gt;Kubernetes自定义资源包括Custom resources 和 Custom controllers。&lt;/p&gt;
&lt;p&gt;Operator 模式旨在捕获（正在管理一个或一组服务的）运维人员的关键目标。负责特定应用和service的运维人员，在系统应该如何运行、如何部署以及出现问题时如何处理等方面有深入的了解。&lt;br&gt;在 Kubernetes 上运行工作负载的人们都喜欢通过自动化来处理重复的任务。Operator 模式会封装我们编写的（Kubernetes 本身提供功能以外的）任务自动化代码。&lt;/p&gt;
&lt;p&gt;Operator可以自动化的事情包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按需部署应用&lt;/li&gt;
&lt;li&gt;获取/还原应用状态的备份&lt;/li&gt;
&lt;li&gt;处理应用代码的升级以及相关改动。例如，数据库 schema 或额外的配置设置&lt;/li&gt;
&lt;li&gt;发布一个 service，要求不支持 Kubernetes API 的应用也能发现它&lt;/li&gt;
&lt;li&gt;模拟整个或部分集群中的故障以测试其稳定性&lt;/li&gt;
&lt;li&gt;在没有内部成员选举程序的情况下，为分布式应用选择首领角色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说，Kubernetes实际是期望状态管理器，如果Kubernetes本身提供的功能无法达到期望状态，特别是对于有状态应用，那么就需要手动处理，而Operator可以使这种处理自动化。&lt;/p&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Operator 模式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文中，将会学习编写一个Operator，并应用到k8s集群。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="源码" scheme="https://www.voidking.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>kube-controller-manager指标收集</title>
    <link href="https://www.voidking.com/dev-kube-controller-manager-metrics/"/>
    <id>https://www.voidking.com/dev-kube-controller-manager-metrics/</id>
    <published>2020-06-22T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家都知道需要监控k8s指标，但是具体需要监控k8s的哪些组件的哪些指标？<br>本文，就来学习梳理kube-controller-mananger组件的监控指标。</p><a id="more"></a><h1 id="有哪些指标？"><a href="#有哪些指标？" class="headerlink" title="有哪些指标？"></a>有哪些指标？</h1><p>要收集指标，首先要知道有哪些指标可以收集。<br>方法一：使用curl命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">k</span> <span class="built_in">get</span> pods -n kube-<span class="built_in">system</span> -<span class="keyword">o</span> wide | <span class="keyword">grep</span> kube-controller-manager</span><br><span class="line"><span class="keyword">k</span> <span class="built_in">get</span> svc -n kube-<span class="built_in">system</span> -<span class="keyword">o</span> wide | <span class="keyword">grep</span> kube-controller-manager</span><br><span class="line"></span><br><span class="line">ssh <span class="symbol">&lt;clusterhost&gt;</span></span><br><span class="line">curl localhos<span class="variable">t:</span><span class="symbol">&lt;nodeport&gt;</span>/metrics</span><br></pre></td></tr></table></figure><p>方法二：在prometheus使用promql</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count(&#123;job=<span class="string">"kube-controller-manager"</span>&#125;) by (<span class="name">__name__</span>)</span><br><span class="line">count(&#123;job=<span class="string">"kube-controller-manager"</span>,__name__!~<span class="string">"^go_.*"</span>&#125;) by (<span class="name">__name__</span>)</span><br></pre></td></tr></table></figure><h1 id="指标含义？"><a href="#指标含义？" class="headerlink" title="指标含义？"></a>指标含义？</h1><p>找到了指标，接下来需要知道指标的含义。<br>访问 <a href="https://docs.signalfx.com/en/latest/integrations/agent/monitors/kube-controller-manager.html" target="_blank" rel="noopener">Splunk doc - kube-controller-manager</a>，使用指标名称搜索即可。</p><p>比如搜索：<br>rest_client_request_duration_seconds_bucket<br>得到结果：<br>rest_client_request_duration_seconds_bucket (cumulative)<br>Request latency in seconds. Broken down by verb and URL. (bucket)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家都知道需要监控k8s指标，但是具体需要监控k8s的哪些组件的哪些指标？&lt;br&gt;本文，就来学习梳理kube-controller-mananger组件的监控指标。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus查询语言：PromQL</title>
    <link href="https://www.voidking.com/dev-prometheus-query-language-promql/"/>
    <id>https://www.voidking.com/dev-prometheus-query-language-promql/</id>
    <published>2020-06-21T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PromQL简介"><a href="#PromQL简介" class="headerlink" title="PromQL简介"></a>PromQL简介</h1><blockquote><p>Prometheus提供了一种称为PromQL（Prometheus查询语言）的功能查询语言，使用户可以实时选择和汇总时间序列数据。表达式的结果既可以显示为图形，也可以在Prometheus的表达式浏览器中显示为表格数据，也可以由外部系统通过HTTP API使用。</p></blockquote><p>更多内容参考<a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank" rel="noopener">QUERYING PROMETHEUS</a> 和 <a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql" target="_blank" rel="noopener">探索PromQL</a>。</p><a id="more"></a><h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># HELP node_cpu Seconds the cpus spent in each mode.</span></span><br><span class="line"><span class="meta"># TYPE node_cpu counter</span></span><br><span class="line">node_cpu&#123;cpu=<span class="string">"cpu0"</span>,mode=<span class="string">"idle"</span>&#125; <span class="number">362812.7890625</span></span><br><span class="line"><span class="meta"># HELP node_load1 1m load average.</span></span><br><span class="line"><span class="meta"># TYPE node_load1 gauge</span></span><br><span class="line">node_load1 <span class="number">3.0703125</span></span><br></pre></td></tr></table></figure><p>其中非#开头的每一行表示当前Node Exporter采集到的一个监控指标（监控样本）：node_cpu和node_load1表明了当前指标的名称（大括号中的标签则反映了该指标的一些特征和维度），浮点数是该指标的具体值。指标格式为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">metric_name</span> <span class="selector-attr">[ &#123;label_name=<span class="string">"label_value"</span>&#125; ]</span> <span class="selector-tag">value</span> <span class="selector-attr">[ timestamp ]</span></span><br></pre></td></tr></table></figure><p>其中metric_name和label_name必须遵循PromQL的格式规范要求。value是一个float格式的数据，timestamp的类型为int64（从1970-01-01 00:00:00以来的毫秒数），timestamp为可选默认为当前时间。具有相同metric_name的样本必须按照一个组的形式排列，并且每一行必须是唯一的指标名称和标签键值对组合。</p><p>Prometheus会将所有采集到的指标数据以时间序列（time-series）的方式保存在内存数据库中，并且定时保存到硬盘上。时间序列是按照时间戳和指标的序列顺序存放的，我们称之为向量(vector)。</p><p>可以将time-series理解为一个数字矩阵，X轴是时间戳，Y轴是指标。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>在Prometheus的表达语言中，一个表达式或子表达式可以分以下四种类型之一：</p><ul><li>瞬时向量：一组时间序列，这组时间序列具有相同的时间戳</li><li>范围向量：一段时间范围的时间序列</li><li>标量：一个简单的数字浮点值</li><li>String：一个简单的字符串值；目前未使用</li></ul><p>根据用例（例如在绘制图形或显示表达式的输出时），由于用户指定的表达式的结果，其中只有某些类型是合法的。例如，返回瞬时向量的表达式是唯一可以直接绘制图形的类型。</p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>字符串可以用单引号，双引号或反引号指定为常量。<br>PromQL遵循与Go相同的转义规则。在单引号或双引号中，反斜杠开始一个转义序列。可以使用八进制或十六进制提供特定字符。<br>反引号内不会处理任何转义。与Go不同，Prometheus不会在反引号内丢弃换行符。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"this is a string"</span><br><span class="line">'these are unescaped: <span class="symbol">\n</span> <span class="symbol">\\</span> <span class="symbol">\t</span>'</span><br><span class="line">`these are not unescaped: <span class="symbol">\n</span> ' " <span class="symbol">\t</span>`</span><br></pre></td></tr></table></figure><h2 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h2><p>浮点常量可以写做数字形式：<code>[-](digits)[.(digits)]</code> ，例如 -2.43</p><h1 id="时间序列选择器"><a href="#时间序列选择器" class="headerlink" title="时间序列选择器"></a>时间序列选择器</h1><h2 id="瞬时向量选择器"><a href="#瞬时向量选择器" class="headerlink" title="瞬时向量选择器"></a>瞬时向量选择器</h2><p>瞬时向量选择器允许在给定的时间戳（瞬时）下选择一组时间序列和每个样本的单个样本值：以最简单的形式，仅指定度量名称。这将导致一个瞬时向量，其中包含具有该度量名称的所有时间序列的元素。<br>通过在花括号 <code>{}</code> 中附加逗号分隔的标签匹配器列表，可以进一步过滤这些时间序列。<br>也可以否定标签值，或将标签值与正则表达式匹配。存在以下标签匹配运算符：</p><ul><li>=：选择与字符串完全相等的标签。</li><li>!=：选择不等于字符串的标签。</li><li>=〜：选择与字符串进行正则表达式匹配的标签。</li><li>!〜：选择与字符串正则表达式不匹配的标签。</li></ul><p>匹配空标签值的标签匹配器还会选择所有根本没有设置特定标签的时间序列。正则表达式匹配完全锚定。同一标签名称可能有多个匹配器。<br>向量选择器必须指定一个名称或至少一个与空字符串不匹配的标签匹配器。<br>通过与内部 <code>__name__</code> 标签进行匹配，标签匹配器也可以应用于度量标准名称。Prometheus中的所有正则表达式都使用<a href="https://github.com/google/re2/wiki/Syntax" target="_blank" rel="noopener">RE2语法</a>。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;job=~<span class="string">".*"</span>&#125; <span class="comment"># Bad!</span></span><br><span class="line">&#123;job=~<span class="string">".+"</span>&#125;              <span class="comment"># Good!</span></span><br><span class="line">&#123;job=~<span class="string">".*"</span>,method=<span class="string">"get"</span>&#125; <span class="comment"># Good!</span></span><br><span class="line">&#123;__name__=~<span class="string">"job:.*"</span>&#125; <span class="comment"># selects all metrics that have a name starting with job:</span></span><br><span class="line"><span class="keyword">on</span>&#123;&#125; <span class="comment"># Bad!</span></span><br><span class="line">&#123;__name__=<span class="string">"on"</span>&#125; <span class="comment"># Good!</span></span><br></pre></td></tr></table></figure><h2 id="范围向量选择器"><a href="#范围向量选择器" class="headerlink" title="范围向量选择器"></a>范围向量选择器</h2><p>范围向量的工作方式与瞬时向量相同，不同的是范围向量从瞬时向量中选择了一定范围的样本。语法上，将范围持续时间附加在向量选择器末尾的方括号 <code>[]</code> 中，以指定提取时间值的范围。<br>持续时间以数字指定，后面紧跟以下单位之一：s - seconds，m - minutes，h - hours，d - days，w - weeks，y - years</p><h2 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h2><p>偏移量允许更改查询中各个瞬时向量和范围向量的时间偏移。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http_requests_total offset <span class="number">5</span>m</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(http_requests_total&#123;method=<span class="string">"GET"</span>&#125; offset <span class="number">5</span>m)</span></span> <span class="comment">// GOOD.</span></span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(http_requests_total&#123;method=<span class="string">"GET"</span>&#125;)</span></span> offset <span class="number">5</span>m <span class="comment">// INVALID.</span></span><br><span class="line"><span class="function"><span class="title">rate</span><span class="params">(http_requests_total[<span class="number">5</span>m] offset <span class="number">1</span>w)</span></span></span><br></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询对给定的范围进行即时查询。子查询的结果是范围向量。<br>语法：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;instant_query&gt; '[' &lt;range&gt; ':' <span class="meta">[&lt;resolution&gt;]</span> ']' [ offset &lt;duration&gt; ]</span><br></pre></td></tr></table></figure><p>resolution是可选的。默认值为全局评估间隔。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Prometheus支持许多二进制和聚合运算符，更多内容参考<a href="https://prometheus.io/docs/prometheus/latest/querying/operators/" target="_blank" rel="noopener">表达式语言运算符</a>。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Prometheus支持多种对数据进行操作的函数，更多内容参考<a href="https://prometheus.io/docs/prometheus/latest/querying/functions/" target="_blank" rel="noopener">表达式语言函数</a>。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>PromQL支持以＃开头的行注释。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>详细内容参见<a href="https://prometheus.io/docs/prometheus/latest/querying/examples/" target="_blank" rel="noopener">QUERY EXAMPLE</a></p><h2 id="简单时间序列查询"><a href="#简单时间序列查询" class="headerlink" title="简单时间序列查询"></a>简单时间序列查询</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http_requests_total</span><br><span class="line">&#123;<span class="attribute">__name__</span>=<span class="string">"http_requests_total"</span>&#125;</span><br><span class="line">http_requests_total&#123;<span class="attribute">job</span>=<span class="string">"apiserver"</span>, <span class="attribute">handler</span>=<span class="string">"/api/comments"</span>&#125;</span><br><span class="line">http_requests_total&#123;<span class="attribute">job</span>=<span class="string">"apiserver"</span>, <span class="attribute">handler</span>=<span class="string">"/api/comments"</span>&#125;[5m]</span><br><span class="line">http_requests_total&#123;<span class="attribute">job</span>=~".*server"&#125;</span><br><span class="line">http_requests_total&#123;status!~<span class="string">"4.."</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rate(http_requests_total[<span class="number">5</span>m])[<span class="number">30</span>m:<span class="number">1</span>m]</span><br><span class="line">max_over_time(deriv(rate(distance_covered_total[<span class="number">5</span>s])[<span class="number">30</span>s:<span class="number">5</span>s])[<span class="number">10</span>m:])</span><br></pre></td></tr></table></figure><h2 id="函数运算等"><a href="#函数运算等" class="headerlink" title="函数运算等"></a>函数运算等</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rate(<span class="name">http_requests_total</span>[<span class="number">5</span>m])</span><br><span class="line"></span><br><span class="line">sum by (<span class="name">job</span>) (</span><br><span class="line">  rate(<span class="name">http_requests_total</span>[<span class="number">5</span>m])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name">instance_memory_limit_bytes</span> - instance_memory_usage_bytes) / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">sum by (<span class="name">app</span>, proc) (</span><br><span class="line">  instance_memory_limit_bytes - instance_memory_usage_bytes</span><br><span class="line">) / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">topk(<span class="number">3</span>, sum by (<span class="name">app</span>, proc) (<span class="name">rate</span>(<span class="name">instance_cpu_time_ns</span>[<span class="number">5</span>m])))</span><br><span class="line"></span><br><span class="line">count by (<span class="name">app</span>) (<span class="name">instance_cpu_time_ns</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PromQL简介&quot;&gt;&lt;a href=&quot;#PromQL简介&quot; class=&quot;headerlink&quot; title=&quot;PromQL简介&quot;&gt;&lt;/a&gt;PromQL简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Prometheus提供了一种称为PromQL（Prometheus查询语言）的功能查询语言，使用户可以实时选择和汇总时间序列数据。表达式的结果既可以显示为图形，也可以在Prometheus的表达式浏览器中显示为表格数据，也可以由外部系统通过HTTP API使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QUERYING PROMETHEUS&lt;/a&gt; 和 &lt;a href=&quot;https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;探索PromQL&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置Grafana</title>
    <link href="https://www.voidking.com/dev-docker-grafana/"/>
    <id>https://www.voidking.com/dev-docker-grafana/</id>
    <published>2020-06-17T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Grafana简介"><a href="#Grafana简介" class="headerlink" title="Grafana简介"></a>Grafana简介</h1><blockquote><p><a href="https://grafana.com/" target="_blank" rel="noopener">Grafana</a> allows you to query, visualize, alert on and understand your metrics no matter where they are stored.</p></blockquote><p>本文中，我们会使用Docker来安装配置grafana，并且显示prometheus中的数据。<br>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.102。</p><a id="more"></a><h1 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/grafana/grafana" target="_blank" rel="noopener">grafana版本</a>。</p><p>2、下载grafana镜像（以grafana6.7.4为例）<br><code>docker pull grafana/grafana:6.7.4</code></p><p>3、启动grafana服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=vk-grafana -d \</span><br><span class="line">-p <span class="number">3000</span>:<span class="number">3000</span> \</span><br><span class="line">grafana/grafana:<span class="number">6.7</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p>以上命令：</p><ul><li>命名容器为vk-grafana，后台运行</li><li>映射宿主机3000端口到容器3000端口</li></ul><p>grafana的配置文件为 /etc/grafana/grafana.ini ，可以进入容器进行修改，或者挂出到宿主机。</p><p>更高级的启动命令参考<a href="https://grafana.com/docs/grafana/latest/installation/docker/" target="_blank" rel="noopener">How to use the container</a>。</p><p>4、验证安装<br><code>docker ps</code><br>mysql启动正常的话就可以看到vk-grafana容器。<br>如果启动失败，可以使用<code>docker logs vk-grafana</code>查看失败原因并进行解决。</p><h1 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="params">--add-port=3000/tcp</span> <span class="params">--permanent</span></span><br><span class="line">systemctl <span class="keyword">reload</span> firewalld</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h1 id="测试服务"><a href="#测试服务" class="headerlink" title="测试服务"></a>测试服务</h1><p>1、本机测试<br><code>curl localhost:3000</code></p><p>2、浏览器测试<br>访问 <a href="http://192.168.56.102:3000" target="_blank" rel="noopener">http://192.168.56.102:3000</a><br>用户名密码默认都是admin，第一次登录会提示修改。</p><h1 id="配置Prometheus数据"><a href="#配置Prometheus数据" class="headerlink" title="配置Prometheus数据"></a>配置Prometheus数据</h1><p>假设我们已经安装配置好了prometheus，参考<a href="https://www.voidking.com/dev-docker-prometheus/">《使用Docker安装配置Prometheus》</a>。</p><p>1、添加数据资源<br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/welcome.jpg?imageView2/0/w/800" alt=""><br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/adddata.jpg?imageView2/0/w/800" alt=""></p><p>2、配置Prometheus数据<br>Name填入 Prometheus ，URL填入 <code>http://192.168.56.102:9090</code>，其他不用变。Save&amp;Test。<br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/prometheus.jpg?imageView2/0/w/800" alt=""><br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/savetest.jpg?imageView2/0/w/800" alt=""></p><p>3、选择dashboard<br>点击Dashboards，点击三个Import，引入三个dashboard。<br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/dashboard.jpg?imageView2/0/w/800" alt=""></p><p>4、引入其他dashboard<br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/import.jpg?imageView2/0/w/800" alt=""><br>比如可以填入URL <a href="https://grafana.com/grafana/dashboards/405" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/405</a> ，点击Load，就可以下载Node Exporter的dashboard。<br>选择Folder，选择Prometheus数据源，Import。<br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/nodeexporter.jpg?imageView2/0/w/800" alt=""><br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/nodeexporter2.jpg?imageView2/0/w/800" alt=""></p><p>5、查看dashboard<br>左上角HOME，出现下拉框，即可选择dashboard。<br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/select.jpg?imageView2/0/w/800" alt=""><br><img src="http://cdn.voidking.com/@/imgs/docker-grafana/promstats.jpg?imageView2/0/w/800" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Grafana简介&quot;&gt;&lt;a href=&quot;#Grafana简介&quot; class=&quot;headerlink&quot; title=&quot;Grafana简介&quot;&gt;&lt;/a&gt;Grafana简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://grafana.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Grafana&lt;/a&gt; allows you to query, visualize, alert on and understand your metrics no matter where they are stored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文中，我们会使用Docker来安装配置grafana，并且显示prometheus中的数据。&lt;br&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.102。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="centos" scheme="https://www.voidking.com/tags/centos/"/>
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="grafana" scheme="https://www.voidking.com/tags/grafana/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置Prometheus</title>
    <link href="https://www.voidking.com/dev-docker-prometheus/"/>
    <id>https://www.voidking.com/dev-docker-prometheus/</id>
    <published>2020-06-16T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h1><blockquote><p>Prometheus是在SoundCloud的基础上构建的开源系统监视和警报工具。自从2012年以来，许多公司和组织都采用了Prometheus，该项目拥有非常活跃的开发人员和用户社区。现在，它是一个独立的开源项目，并且独立于任何公司进行维护。为了强调这一点并阐明项目的治理结构，Prometheus在2016年加入了Cloud Native Computing Foundation，这是继Kubernetes之后的第二个托管项目。</p></blockquote><p>Prometheus的主要特性包括：</p><ul><li>一个包含时间序列的多维数据模型，由指标名称和键值对进行标记</li><li>PromQL，一种灵活的查询语言</li><li>不依赖分布式存储；单服务器节点是自治的</li><li>时间序列收集是通过HTTP拉取模型实现的</li><li>支持通过中间网关推送时间序列</li><li>通过服务发现或静态配置发现目标</li><li>支持多种图形和仪表板</li></ul><p>Prometheus生态系统包含多个组件，其中许多是可选的：</p><ul><li>prometheus server，负责收取并存储时间序列数据</li><li>client libraries，用于检测应用程序代码</li><li>push gateway，支持短期工作</li><li>exporters，适用于特定服务的指标收集器，如HAProxy，StatsD，Graphite</li><li>alertmanager，处理报警</li><li>各种支持工具</li></ul><p>更多内容参考<a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">Prometheus文档</a>。<br>本文中，我们会使用Docker来安装配置Prometheus，主要参考<a href="https://www.cnblogs.com/informatics/p/12215255.html" target="_blank" rel="noopener">Prometheus监控系统之入门篇</a>。<br>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.102。</p><a id="more"></a><h1 id="prometheus-server"><a href="#prometheus-server" class="headerlink" title="prometheus server"></a>prometheus server</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/prom/prometheus" target="_blank" rel="noopener">prometheus server</a>。</p><p>2、下载prometheus server镜像（以v2.18.0为例）<br><code>docker pull prom/prometheus:v2.18.0</code></p><p>3、创建配置文件<br>创建prometheus.yml，内容为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment">#默认采集监控数据时间间隔</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">monitor:</span> <span class="string">'my-monitor'</span></span><br><span class="line"><span class="attr">scrape_configs:</span>  <span class="comment">#监控对象设置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span> <span class="comment">#任务名称</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span> <span class="comment">#每隔5s获取一次监控数据</span></span><br><span class="line">    <span class="attr">static_configs:</span> <span class="comment">#监控对象地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['127.0.0.1:9090']</span>  <span class="comment"># 将自己加入到监控对象中</span></span><br></pre></td></tr></table></figure><p>创建rules.yml，内容为空。</p><p>4、启动prometheus server</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="params">--name=prometheus</span> -d \</span><br><span class="line">-p 9090<span class="function">:9090</span> \</span><br><span class="line">-v $<span class="params">(pwd)</span><span class="string">/prometheus.yml</span>:<span class="string">/etc/prometheus/prometheus.yml</span> \</span><br><span class="line">-v $<span class="params">(pwd)</span><span class="string">/rules.yml</span>:<span class="string">/etc/prometheus/rules.yml</span> \</span><br><span class="line">prom/prometheus<span class="function">:v2.18.0</span> <span class="params">--config</span>.file=<span class="string">/etc/prometheus/prometheus.yml</span> <span class="params">--web</span>.enable-lifecycle</span><br></pre></td></tr></table></figure><p>5、测试服务<br>浏览器访问 <a href="http://192.168.56.102:9090/" target="_blank" rel="noopener">http://192.168.56.102:9090/</a><br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/graph.jpg?imageView2/0/w/800" alt=""></p><p>6、查看targets<br>浏览器访问 <a href="http://192.168.56.102:9090/targets/" target="_blank" rel="noopener">http://192.168.56.102:9090/targets/</a><br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/targets.jpg?imageView2/0/w/800" alt=""></p><p>7、查看指标<br>浏览器访问 <a href="http://192.168.56.102:9090/metrics/" target="_blank" rel="noopener">http://192.168.56.102:9090/metrics/</a><br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/metrics.jpg?imageView2/0/w/800" alt=""></p><h1 id="node-exporter"><a href="#node-exporter" class="headerlink" title="node exporter"></a>node exporter</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/prom/node-exporter" target="_blank" rel="noopener">node exporter</a>。</p><p>2、下载node-exporter镜像（以v1.0.0为例）<br><code>docker pull prom/node-exporter:v1.0.0</code></p><p>3、启动node exporter</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="attr">name=</span><span class="keyword">node</span><span class="title">-exporter</span> -d \</span><br><span class="line">-p <span class="number">9100</span>:<span class="number">9100</span> \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run --<span class="attr">name=</span><span class="keyword">node</span><span class="title">-exporter</span> -d \</span><br><span class="line">  -p <span class="number">9100</span>:<span class="number">9100</span> \</span><br><span class="line">  --<span class="attr">net=</span><span class="string">"host"</span> \</span><br><span class="line">  --<span class="attr">pid=</span><span class="string">"host"</span> \</span><br><span class="line">  -v <span class="string">"/:/host:ro,rslave"</span> \</span><br><span class="line">  prom/<span class="keyword">node</span>-exporter:<span class="title">v1</span>.<span class="number">0.0</span> \</span><br><span class="line">  --path.<span class="attr">rootfs=</span>/host</span><br></pre></td></tr></table></figure><h1 id="promserver收集exporter数据"><a href="#promserver收集exporter数据" class="headerlink" title="promserver收集exporter数据"></a>promserver收集exporter数据</h1><p>1、修改prometheus.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment">#默认采集监控数据时间间隔</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">monitor:</span> <span class="string">'my-monitor'</span></span><br><span class="line"><span class="attr">scrape_configs:</span>  <span class="comment">#监控对象设置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span> <span class="comment">#任务名称</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span> <span class="comment">#每隔5s获取一次监控数据</span></span><br><span class="line">    <span class="attr">static_configs:</span> <span class="comment">#监控对象地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['127.0.0.1:9090']</span>  <span class="comment"># 将自己加入到监控对象中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9100']</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">'client-node-exporter'</span></span><br></pre></td></tr></table></figure><p>2、重新加载配置文件<br><code>curl -X POST http://localhost:9090/-/reload</code><br>然而我重新加载配置文件并不生效，最后重启了prometheus server。</p><p>3、查看targets<br>浏览器访问 <a href="http://192.168.56.102:9090/targets/" target="_blank" rel="noopener">http://192.168.56.102:9090/targets/</a><br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/targets2.png?imageView2/0/w/800" alt=""></p><h1 id="push-gateway"><a href="#push-gateway" class="headerlink" title="push gateway"></a>push gateway</h1><p>Prometheus采集数据是用的pull方式，prometheus配置文件设置的5秒就是采集数据的频率。但是有些数据并不适合采用这样的方式，对这样的数据可以使用Push Gateway服务。PushGateway比较适合临时作业和批处理作业，由于这些作业是short-lived的，如果采用pull的模式，可能在prometheus采集之前，作业已经执行结束。pushgateway相当于一个暂存器，这些临时作业将metrics数据缓存到pushgateway中，然后等待Prometheus来pull数据。</p><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/prom/pushgateway" target="_blank" rel="noopener">pushgateway</a>。</p><p>2、下载pushgateway镜像（以v1.1.0为例）<br><code>docker pull prom/pushgateway:v1.1.0</code></p><p>3、启动push gateway</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=pushgateway -d \</span><br><span class="line">-p <span class="number">9091</span>:<span class="number">9091</span> \</span><br><span class="line">prom/pushgateway:v1<span class="number">.1</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>4、测试服务<br>浏览器访问 <a href="http://192.168.56.102:9091/#" target="_blank" rel="noopener">http://192.168.56.102:9091/#</a><br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/pushgateway.png?imageView2/0/w/800" alt=""></p><p>5、推送数据给push gateway</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"exam_metric 100"</span> | curl --data-binary @- <span class="symbol">http:</span>/<span class="regexp">/127.0.0.1:9091/metrics</span><span class="regexp">/job/exam</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | curl --data-binary @- <span class="symbol">http:</span>/<span class="regexp">/127.0.0.1:9091/metrics</span><span class="regexp">/job/exam</span><span class="regexp">/instance/test</span></span><br><span class="line">chinese <span class="number">120</span></span><br><span class="line">math <span class="number">150</span></span><br><span class="line">english <span class="number">140</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/pushgateway2.png?imageView2/0/w/800" alt=""></p><h1 id="promserver收集pushgateway数据"><a href="#promserver收集pushgateway数据" class="headerlink" title="promserver收集pushgateway数据"></a>promserver收集pushgateway数据</h1><p>1、修改prometheus.yml文件</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">global</span>:</span><br><span class="line">  <span class="attribute">scrape_interval</span>: <span class="number">15s</span> #默认采集监控数据时间间隔</span><br><span class="line">  <span class="attribute">external_labels</span>:</span><br><span class="line">    <span class="attribute">monitor</span>: <span class="string">'my-monitor'</span></span><br><span class="line"><span class="attribute">scrape_configs</span>:  #监控对象设置</span><br><span class="line">  - <span class="attribute">job_name</span>: prometheus #任务名称</span><br><span class="line">    <span class="attribute">scrape_interval</span>: <span class="number">5s</span> #每隔<span class="number">5s</span>获取一次监控数据</span><br><span class="line">    <span class="attribute">static_configs</span>: #监控对象地址</span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'127.0.0.1:9090'</span>]  # 将自己加入到监控对象中</span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'192.168.56.102:9100'</span>]</span><br><span class="line">        <span class="attribute">labels</span>:</span><br><span class="line">          <span class="attribute">group</span>: <span class="string">'client-node-exporter'</span></span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'192.168.56.102:9091'</span>]</span><br><span class="line">        <span class="attribute">labels</span>:</span><br><span class="line">          <span class="attribute">group</span>: <span class="string">'pushgateway'</span></span><br></pre></td></tr></table></figure><p>2、重新加载配置或者重启promserver</p><p>3、在promserver查看数据<br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/chinese.png?imageView2/0/w/800" alt=""></p><h1 id="alertmanager"><a href="#alertmanager" class="headerlink" title="alertmanager"></a>alertmanager</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/prom/alertmanager" target="_blank" rel="noopener">alertmanager</a>。</p><p>2、下载alertmanager镜像（以v0.15.0为例）<br><code>docker pull prom/alertmanager:v0.15.0</code></p><p>高版本比如v0.20.0打开页面后会报错，Uncaught TypeError: Cannot read property ‘elmFs’ of undefined</p><p>3、创建配置文件alertmanager.yml</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">global</span>:</span><br><span class="line">  <span class="attribute">resolve_timeout</span>: <span class="number">5</span>m</span><br><span class="line"><span class="attribute">route</span>:</span><br><span class="line">  <span class="attribute">group_by</span>: [<span class="string">'exam'</span>]  #与prometheus配置文件rules.yml中配置规则名对应</span><br><span class="line">  <span class="attribute">group_wait</span>: <span class="number">10s</span> #报警等待时间</span><br><span class="line">  <span class="attribute">group_interval</span>: <span class="number">10s</span> #报警间隔时间</span><br><span class="line">  <span class="attribute">repeat_interval</span>: <span class="number">1</span>m #重复报警间隔时间</span><br><span class="line">  <span class="attribute">receiver</span>: <span class="string">'web.hook'</span> #告警处理方式，我们这里通过web.hook方式，也可以配置成邮件等方式</span><br><span class="line"><span class="attribute">receivers</span>:</span><br><span class="line">  - <span class="attribute">name</span>: <span class="string">'web.hook'</span></span><br><span class="line">    <span class="attribute">webhook_configs</span>:</span><br><span class="line">      - <span class="attribute">url</span>: <span class="string">'http://192.168.56.102:8080/exam/test'</span> #告警webhook地址，告警信息会post到该地址，需要编写服务接收该告警数据</span><br><span class="line"><span class="attribute">inhibit_rules</span>:</span><br><span class="line">  - <span class="attribute">source_match</span>:</span><br><span class="line">      <span class="attribute">severity</span>: <span class="string">'critical'</span></span><br><span class="line">    <span class="attribute">target_match</span>:</span><br><span class="line">      <span class="attribute">severity</span>: <span class="string">'warning'</span> #目标告警状态</span><br><span class="line">    <span class="attribute">equal</span>: [<span class="string">'alertname'</span>, <span class="string">'dev'</span>, <span class="string">'instance'</span>]</span><br></pre></td></tr></table></figure><p>4、启动push gateway</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> <span class="attribute">--name</span>=alertmanager -d \</span><br><span class="line">-p 9093:9093 \</span><br><span class="line">-v $(pwd)/alertmanager.yml:/etc/alertmanager/alertmanager.yml \</span><br><span class="line">prom/alertmanager:v0.15.0 --config.<span class="attribute">file</span>=/etc/alertmanager/alertmanager.yml --storage.<span class="attribute">path</span>=/alertmanager</span><br></pre></td></tr></table></figure><p>5、测试服务<br>浏览器访问 <a href="http://192.168.56.102:9093/" target="_blank" rel="noopener">http://192.168.56.102:9093/</a><br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/alertmanager.png?imageView2/0/w/800" alt=""></p><h1 id="告警配置"><a href="#告警配置" class="headerlink" title="告警配置"></a>告警配置</h1><p>1、编辑rules.yml，设置报警规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">exam</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">exam告警测试</span></span><br><span class="line">        <span class="attr">expr:</span> <span class="string">chinese</span> <span class="string">&gt;</span> <span class="number">100</span> <span class="comment">#语文成绩大于100告警，注：我们在pushgateway推送数据的时候，设置的是120，因此会触发告警</span></span><br><span class="line">        <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">status:</span> <span class="string">warning</span></span><br><span class="line">        <span class="attr">annotations:</span></span><br><span class="line">          <span class="attr">summary:</span> <span class="string">"<span class="template-variable">&#123;&#123;$labels.instance&#125;&#125;</span>:语文成绩优秀! nb了!!!"</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">"<span class="template-variable">&#123;&#123;$labels.instance&#125;&#125;</span>: 语文成绩优秀! nbnbnb!!!"</span></span><br></pre></td></tr></table></figure><p>2、编辑prometheus.yml配置文件，添加alertmanager配置和rules.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment">#默认采集监控数据时间间隔</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">monitor:</span> <span class="string">'my-monitor'</span></span><br><span class="line"><span class="attr">scrape_configs:</span>  <span class="comment">#监控对象设置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span> <span class="comment">#任务名称</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span> <span class="comment">#每隔5s获取一次监控数据</span></span><br><span class="line">    <span class="attr">static_configs:</span> <span class="comment">#监控对象地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['127.0.0.1:9090']</span>  <span class="comment"># 将自己加入到监控对象中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9100']</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">'client-node-exporter'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9091']</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">'pushgateway'</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/etc/prometheus/rules.yml</span>   <span class="comment">#告警规则文件路径</span></span><br><span class="line"><span class="attr">alerting:</span>   <span class="comment">#告警管理器设置</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9093']</span> <span class="comment">#告警信息会发送给alertmanager进一步处理</span></span><br></pre></td></tr></table></figure><p>3、重新加载配置或者重启promserver</p><p>4、在<a href="http://192.168.56.102:9090/alerts/" target="_blank" rel="noopener">prometheus alerts页面</a>查看告警<br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/alert.jpg?imageView2/0/w/800" alt=""></p><p>或者在<a href="http://192.168.56.102:9093/#/alerts" target="_blank" rel="noopener">alertmanager alerts页面</a>查看告警<br><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/alert.png?imageView2/0/w/800" alt=""></p><h1 id="告警通知处理"><a href="#告警通知处理" class="headerlink" title="告警通知处理"></a>告警通知处理</h1><p>alertmanager.yml文件中配置的告警方式是webhook，告警发送到 <a href="http://192.168.56.102:8080/exam/test" target="_blank" rel="noopener">http://192.168.56.102:8080/exam/test</a> ，因此，我们需要一个服务来接收处理这个告警。</p><p>1、安装golang环境，参考<a href="https://www.voidking.com/dev-centos7-beego-env/">《CentOS7部署beego项目》</a>golang安装一节</p><p>2、创建main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">"/exam/test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">res, _ := ioutil.ReadAll(c.Request.Body)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(res)) <span class="comment">//这里我们只简单打印告警信息</span></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"alert message"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行代码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/gin-gonic/gin</span><br><span class="line"><span class="keyword">go</span> run main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-prometheus/webhook.png?imageView2/0/w/800" alt=""><br>如上图，服务接收到了告警信息。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>更多prometheus配置，参考<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="noopener">CONFIGURATION</a> 和 <a href="https://www.bookstack.cn/read/prometheus_practice/configuration-README.md" target="_blank" rel="noopener">Prometheus 配置</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上，配置完成了promserver、exporter、pushgateway、alertmanager，跑通了数据的收集和显示，测试了告警信息的收集。本文就到这里，需要用到prometheus的其他内容时，再继续学习，比如<a href="https://thanos.io/" target="_blank" rel="noopener">thanos</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prometheus简介&quot;&gt;&lt;a href=&quot;#Prometheus简介&quot; class=&quot;headerlink&quot; title=&quot;Prometheus简介&quot;&gt;&lt;/a&gt;Prometheus简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Prometheus是在SoundCloud的基础上构建的开源系统监视和警报工具。自从2012年以来，许多公司和组织都采用了Prometheus，该项目拥有非常活跃的开发人员和用户社区。现在，它是一个独立的开源项目，并且独立于任何公司进行维护。为了强调这一点并阐明项目的治理结构，Prometheus在2016年加入了Cloud Native Computing Foundation，这是继Kubernetes之后的第二个托管项目。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Prometheus的主要特性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个包含时间序列的多维数据模型，由指标名称和键值对进行标记&lt;/li&gt;
&lt;li&gt;PromQL，一种灵活的查询语言&lt;/li&gt;
&lt;li&gt;不依赖分布式存储；单服务器节点是自治的&lt;/li&gt;
&lt;li&gt;时间序列收集是通过HTTP拉取模型实现的&lt;/li&gt;
&lt;li&gt;支持通过中间网关推送时间序列&lt;/li&gt;
&lt;li&gt;通过服务发现或静态配置发现目标&lt;/li&gt;
&lt;li&gt;支持多种图形和仪表板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prometheus生态系统包含多个组件，其中许多是可选的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prometheus server，负责收取并存储时间序列数据&lt;/li&gt;
&lt;li&gt;client libraries，用于检测应用程序代码&lt;/li&gt;
&lt;li&gt;push gateway，支持短期工作&lt;/li&gt;
&lt;li&gt;exporters，适用于特定服务的指标收集器，如HAProxy，StatsD，Graphite&lt;/li&gt;
&lt;li&gt;alertmanager，处理报警&lt;/li&gt;
&lt;li&gt;各种支持工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://prometheus.io/docs/introduction/overview/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Prometheus文档&lt;/a&gt;。&lt;br&gt;本文中，我们会使用Docker来安装配置Prometheus，主要参考&lt;a href=&quot;https://www.cnblogs.com/informatics/p/12215255.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Prometheus监控系统之入门篇&lt;/a&gt;。&lt;br&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.102。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="centos" scheme="https://www.voidking.com/tags/centos/"/>
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>httpload使用说明</title>
    <link href="https://www.voidking.com/dev-httpload/"/>
    <id>https://www.voidking.com/dev-httpload/</id>
    <published>2020-06-05T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="httpload简介"><a href="#httpload简介" class="headerlink" title="httpload简介"></a>httpload简介</h1><p>http_load可以并行启动多个http请求，以便测试Web服务器的吞吐量。<br>但是，与大多数测试客户端不同的是，它是单线程运行的，因此不会使客户端计算机产生大量负载。<br>此外，http_load还可以配置支持https请求。<br>更多内容参考<a href="http://www.acme.com/software/http_load/" target="_blank" rel="noopener">http_load - multiprocessing http test client</a>。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1、安装openssl，以便支持https</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> openssl</span><br><span class="line">yum <span class="keyword">install</span> openssl-devel</span><br></pre></td></tr></table></figure><p>2、下载httpload并解压</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># wget http:<span class="comment">//acme.com/software/http_load/http_load-12mar2006.tar.gz</span></span><br><span class="line">wget http:<span class="comment">//www.acme.com/software/http_load/http_load-09Mar2016.tar.gz</span></span><br><span class="line">tar -xzvf http_load<span class="number">-09</span>Mar2016.tar.gz</span><br><span class="line">cd http_load<span class="number">-09</span>Mar2016/</span><br></pre></td></tr></table></figure><p>3、编辑Makefile，取消SSL相关注释</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SSL_TREE =     <span class="regexp">/usr/local</span><span class="regexp">/ssl</span></span><br><span class="line"><span class="regexp">SSL_DEFS =     -DUSE_SSL</span></span><br><span class="line"><span class="regexp">SSL_INC =      -I$(SSL_TREE)/include</span></span><br><span class="line">SSL_LIBS =     -L$(SSL_TREE)/<span class="class"><span class="keyword">lib</span> -<span class="title">lssl</span> -<span class="title">lcrypto</span></span></span><br></pre></td></tr></table></figure><p>4、编译不安装<br><code>make</code><br>执行命令后，当前目录下生成可执行文件 http_load</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1、查看帮助<br><code>./http_load --help</code></p><p>2、创建文件 url.list</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//www.baidu.com</span></span><br></pre></td></tr></table></figure><p>3、启动测试</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./http_load -s <span class="number">10</span> -p <span class="number">1</span> -r <span class="number">10</span> url.<span class="type">list</span></span><br><span class="line">./http_load -s <span class="number">180</span> -p <span class="number">1</span> -r <span class="number">10</span> -timeout <span class="number">1</span> url.<span class="type">list</span></span><br><span class="line">./http_load -seconds <span class="number">180</span> -parallel <span class="number">1</span> -rate <span class="number">10</span> -timeout <span class="number">1</span> url.<span class="type">list</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;httpload简介&quot;&gt;&lt;a href=&quot;#httpload简介&quot; class=&quot;headerlink&quot; title=&quot;httpload简介&quot;&gt;&lt;/a&gt;httpload简介&lt;/h1&gt;&lt;p&gt;http_load可以并行启动多个http请求，以便测试Web服务器的吞吐量。&lt;br&gt;但是，与大多数测试客户端不同的是，它是单线程运行的，因此不会使客户端计算机产生大量负载。&lt;br&gt;此外，http_load还可以配置支持https请求。&lt;br&gt;更多内容参考&lt;a href=&quot;http://www.acme.com/software/http_load/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http_load - multiprocessing http test client&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="测试" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://www.voidking.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile中的CMD和ENTRYPOINT</title>
    <link href="https://www.voidking.com/dev-dockerfile-cmd-entrypoint/"/>
    <id>https://www.voidking.com/dev-dockerfile-cmd-entrypoint/</id>
    <published>2020-04-28T10:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Dockerfile中的CMD和ENTRYPOINT有什么区别？<br>docker run时默认执行什么命令，怎样覆盖默认命令？<br>pod定义中的args和command字段有什么作用？<br>本文，我们来回答一下这些问题。主要参考<a href="https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/" target="_blank" rel="noopener">Docker RUN vs CMD vs ENTRYPOINT</a>和<a href="https://www.udemy.com/user/mumshad-mannambeth/" target="_blank" rel="noopener">Mumshad Mannambeth的课程</a>。</p><a id="more"></a><h1 id="指令执行方式"><a href="#指令执行方式" class="headerlink" title="指令执行方式"></a>指令执行方式</h1><p>RUN和ENTRYPOINT指令都可以有两种执行方式：shell方式和exec方式。</p><h2 id="shell方式"><a href="#shell方式" class="headerlink" title="shell方式"></a>shell方式</h2><p>shell方式格式：<br><code>&lt;instruction&gt; &lt;command&gt;</code></p><p>例子：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install python3</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Hello world"</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Hello world"</span></span></span><br></pre></td></tr></table></figure><p>当指令以shell方式执行时，它会在后台调用 <code>/bin/sh -c &lt;command&gt;</code>，并且会进行常规的shell处理。例如，Dockerfile中的以下定义：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> name voidking</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Hello, <span class="variable">$name</span>"</span></span></span><br></pre></td></tr></table></figure><p>docker run 会输出 <code>Hello, voidking</code> ，变量会被替换。</p><h2 id="exec方式"><a href="#exec方式" class="headerlink" title="exec方式"></a>exec方式</h2><p>exec方式格式：<br><code>&lt;instruction&gt; [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;, ...]</code><br>例子：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"apt-get"</span>, <span class="string">"install"</span>, <span class="string">"python3"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/echo"</span>, <span class="string">"Hello world"</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/echo"</span>, <span class="string">"Hello world"</span>]</span></span><br></pre></td></tr></table></figure><p>当指令以exec方式执行时，它将直接调用可执行文件，并且不会进行shell处理。例如，Dockerfile中的以下定义：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> name voidking</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/echo"</span>, <span class="string">"Hello, <span class="variable">$name</span>"</span>]</span></span><br></pre></td></tr></table></figure><p>docker run 会输出 <code>Hello, $name</code> ，变量不会被替换。</p><p>如果需要运行bash而不是sh，需要使用exec方式。在这种情况下，将进行常规的shell处理。例如，Dockerfile中的以下定义：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> name voidking</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"echo Hello, <span class="variable">$name</span>"</span>]</span></span><br></pre></td></tr></table></figure><p>docker run 会输出 <code>Hello, voidking</code> ，变量会被替换。</p><h1 id="CMD和ENTRYPOINT"><a href="#CMD和ENTRYPOINT" class="headerlink" title="CMD和ENTRYPOINT"></a>CMD和ENTRYPOINT</h1><h2 id="CMD定义"><a href="#CMD定义" class="headerlink" title="CMD定义"></a>CMD定义</h2><p>访问<a href="https://hub.docker.com/_/ubuntu?tab=description" target="_blank" rel="noopener">dockerhub ubuntu</a>，Supported tags and respective Dockerfile links，随便选择一个系统版本，这里选择 16.04 。点击链接，可以看到Dockerfile的定义。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># overlook all the definition</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></span><br></pre></td></tr></table></figure><p>可以看到，Dockerfile中定义了CMD为 <code>/bin/bash</code> ，也就是定义了默认命令为 <code>/bin/bash</code>。</p><p><code>docker run ubuntu:16.04</code> 会执行默认命令 <code>/bin/bash</code> 。</p><h2 id="执行特定命令"><a href="#执行特定命令" class="headerlink" title="执行特定命令"></a>执行特定命令</h2><p>我们想要执行命令，那么需要在docker run时指定命令，覆盖默认命令。<br><code>docker run ubuntu:16.04 sleep 3600</code>，会执行 <code>sleep 3600</code> 。</p><p>如果想要使这个特定命令永久生效，那么需要使用Dockerfile定义一个新的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"sleep"</span>,<span class="string">"3600"</span>]</span></span><br></pre></td></tr></table></figure><p><code>docker build -t ubuntu-sleeper .</code>，生成新的镜像。</p><p><code>docker run ubuntu-sleeper</code>，执行默认命令 <code>sleep 3600</code> 。</p><h2 id="特定参数"><a href="#特定参数" class="headerlink" title="特定参数"></a>特定参数</h2><p>如果我们想要修改sleep的时间，该怎么做？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:<span class="number">16.04</span> sleep <span class="number">3600</span></span><br><span class="line">docker run ubuntu:<span class="number">16.04</span> sleep <span class="number">1200</span></span><br></pre></td></tr></table></figure><p>sleep命令没有变，变化的只有参数，sleep是否可以省略？可以的，定义一个新的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"sleep"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"3600"</span>]</span></span><br></pre></td></tr></table></figure><p><code>docker build -t ubuntu-sleeper .</code>，生成新的镜像。</p><p><code>docker run ubuntu-sleeper</code>，执行默认命令 <code>sleep 3600</code> 。</p><p><code>docker run ubuntu-sleeper 1200</code>，执行命令 <code>sleep 1200</code> 。</p><p>那么，ENTRYPOINT里的命令是否可以被替换的呢？也是可以的。<br><code>docker run --entrypoint sleep2.0 ubuntu-sleeper 1200</code>，执行命令 <code>sleep2.0 1200</code> 。</p><p>综上，docker run会默认执行 <code>ENTRYPOINT + CMD</code>。<br>通常情况下，我们会在Dockerfile中定义ENTRYPOINT作为固定命令，定义CMD作为默认参数。</p><h1 id="args和command"><a href="#args和command" class="headerlink" title="args和command"></a>args和command</h1><p>在k8s中定义pod时，有args和command两个字段。这两个字段，分别覆盖CMD和ENTRYPOINT。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: v1</span><br><span class="line"><span class="attribute">kind</span>: Pod</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">creationTimestamp</span>: null</span><br><span class="line">  <span class="attribute">labels</span>:</span><br><span class="line">    <span class="attribute">run</span>: ubuntu</span><br><span class="line">  <span class="attribute">name</span>: ubuntu</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line">  <span class="attribute">containers</span>:</span><br><span class="line">  - <span class="attribute">image</span>: <span class="attribute">ubuntu</span>:<span class="number">16.04</span></span><br><span class="line">    <span class="attribute">name</span>: ubuntu</span><br><span class="line">    <span class="attribute">resources</span>: &#123;&#125;</span><br><span class="line">    <span class="attribute">command</span>: [<span class="string">"sleep"</span>]</span><br><span class="line">    <span class="attribute">args</span>: [<span class="string">"1200"</span>]</span><br><span class="line">  <span class="attribute">dnsPolicy</span>: ClusterFirst</span><br><span class="line">  <span class="attribute">restartPolicy</span>: Always</span><br><span class="line"><span class="attribute">status</span>: &#123;&#125;</span><br></pre></td></tr></table></figure><p>该pod启动后的执行命令为 <code>sleep 1200</code> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Dockerfile中的CMD和ENTRYPOINT有什么区别？&lt;br&gt;docker run时默认执行什么命令，怎样覆盖默认命令？&lt;br&gt;pod定义中的args和command字段有什么作用？&lt;br&gt;本文，我们来回答一下这些问题。主要参考&lt;a href=&quot;https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker RUN vs CMD vs ENTRYPOINT&lt;/a&gt;和&lt;a href=&quot;https://www.udemy.com/user/mumshad-mannambeth/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mumshad Mannambeth的课程&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>怎样做出可口的食物？</title>
    <link href="https://www.voidking.com/essay-how-to-cook-good-food/"/>
    <id>https://www.voidking.com/essay-how-to-cook-good-food/</id>
    <published>2020-04-19T19:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记不得新冠疫情开始的具体时间，只知道今年的春节（2020年1月25日），没有出去拜年，春节期间也没有出去聚餐。然后，疫情日益严重，继湖北武汉之后，各市也开始封城。<br>复工日期一推再推，2月15日经历了两次信息登记，三次体温检测，顺利返回北京。先去社区办理观察证，小区内隔离两周，拿到出入证，还要录入人脸识别，以便进出小区。<br>3月9日年后第一次上班，需要查询近期行程，测量体温，才能进入达美中心。复工后三周休两周，直到最近，才每周上班。但是，仍然不敢在外面吃饭，因为多人用餐是最容易传播新冠的途径。</p><p>因此，厨道大兴！而小编不才也加入了自己做饭的行列，毕竟自己做才最放心。做的多了，自然不能只满足于能吃，而要追求好吃。</p><a id="more"></a><h1 id="秘诀"><a href="#秘诀" class="headerlink" title="秘诀"></a>秘诀</h1><p>用最少的调料，最简单的烹饪方法，最大程度发挥出食物本来的味道。</p><p>1、糖，是万能的，别怕，不管是任何菜式，出锅前放一丢丢，总会遇到你想要的味道。糖，不是为了让菜变得甜腻，而是作为味引，激发出足以挑拨你味蕾的口感。</p><p>2、豆瓣酱在肉类处理上，是不会犯错的存在，最简单的，放油，放豆瓣酱和肉沫，加一点点料酒去腥，就可以得到满满一碗辣肉面的肉酱，放在冰箱里吧，什么时候饿了，下碗面条浇一点这个肉酱上去，端在面前，是一碗面条吗？不，是一碗准备时间只需要5分钟的幸福。</p><p>3、蚝油在好多素菜的处理上，完全可以替代盐，而且有着盐没有的那股“鲜”味，最直接的就是花菜，尤其是干锅花菜。洗干净沥干，然后下油，放一点点花椒或者辣椒，吧花菜放进去，一滴水也不要加，感觉差不多了，放耗油+生抽，别放盐，出锅，有追求的就再放些五花肉片进去，尝尝，是不是觉得外面的干锅简直是垃圾？</p><p>4、初学者，不要想着一气呵成，很多东西是可以在烹饪过程中不断调整的，容错性巨高，特别是烹饪时间较长的菜式，例如蒸菜。大个比方：梅干菜扣肉，前面不罗嗦，就说上蒸锅开蒸之后，每隔半小时用筷子舔一下，觉得咸了赶紧吧里面的汁水逼出来一点，觉得淡了就加一勺老抽进去，觉得不够甜就放一小粒冰糖在边边，容错性巨高。</p><p>5、洋葱没有什么味道，它的全部价值在于增香。举个例子：最最最最简单的，炒鸡蛋，加一两片洋葱进去，感觉是两个菜。</p><p>6、刀工没有那么重要，现在的厨房懒人工具太多了，不要把时间浪费在练习刀工上，至少我是这么认为的，还容易受伤。</p><p>7、外面的菜口感总觉得和家里不一样，是因为外面的火，远远比家里的要旺，这个是煤气灶的硬伤，解决不了的，但也并不是没有一点办法，我个人的解决方案是，尤其在所谓的“爆炒”菜式中，会将火开至最大，然后将锅倾斜至很夸张的角度，目的是让火舌舔到锅里的油，这样就会有锅里起火的效果，温度非常之高，然后上盖子压灭，出锅。这招是我自己捣鼓出来的，有的时候实在是少油，火舌舔不到，我就在锅边边刷一点油。</p><p>8、汤类中的“鲜”，我指的是的寻常汤类，不外乎来自这四种东西——笋、肉、味精、白胡椒粉（评论提醒，还有一种，但我不经常做，就是菇类）。这也是我经常做的几道，极其方便。比如，上海菜中有一道“腌笃鲜”，冬笋、精肉、咸肉，一比一比一入锅，一大锅，熬着吧，啥也不用放，真的其他啥也不用放（姜片和料酒去腥还是必需的），1个小时后出锅，撒点葱花，冬天里简直是。。。王菲有首歌叫什么来着？天上人间是吧，诶。</p><p>再比如，我这边有个卖臭豆腐的，炸完后浸入一种汤里，巨好喝，问他怎么弄的，他摆摆手说是秘方，不外传。回家自己细细一品，转身进厨房，不说一模一样，但可以乱真——牛肉汤，味精、五香粉，酸豆角，白胡椒粉，香菜。就这么简单，还秘方不外传，啊我呸。</p><p>9、用猪油，比其他任何的大豆油或色拉油炒出来的菜，都要香，我用过一次就上瘾，唯一的缺点就是凝固点太高了（很多人评论纠正我是低？我也搞不明白了，如果普通油凝固需要零下1度，而猪油凝固零上5度，到底是谁高谁低呢？），很容易就变成膏体，冬天是需要用勺子挖的。</p><p>10、最后给个心得，其实厨艺这东西没有什么玄妙的，无非是经验而已，我一个人搁那捣鼓五六十年，出来绝对也是一等一的大师，总有个阴差阳错能让我悟到一些原本没人点拨到的TIPS，那为什么不去寻求身边的高手呢？比方，我吃番茄炒蛋，永远是淡而无味，加再多调味品都没办法拯救的哪种，结果我一朋友对我说，你说说你怎么弄的呢？说完，所有的步骤和路数都是OK的，唯一一点，出错了，炒番茄的时候没有用勺子用力压番茄，这样番茄里的酱汁就不会被压出来，也就没有办法裹在蛋上形成独特的口感了。我一听，大惊，对啊，就是这个道理。</p><p>再比方，那个薯条，我随便怎么都弄不出那种麦当劳的风味，口感一模一样，就是没有那种风味，最后问题出在，土豆切条之后需要用牛奶浸泡一晚上，没有牛奶用奶粉也可以，这样会有若有若无的奶香味道，味蕾再发达的人，别人不说，这种味道你要能领悟原材料估计得靠缘分。</p><p>你看，是不是一个很小的点拨？小到你压根不会去注意。</p><p>多问多讨教就对了。</p><p>11、最后的最后，大家都是一双手，厨艺这东西练练总会上去的，但巧妇难为无米之炊，家里的调料一定要齐全，不然就会变成我，经常戴着口罩围着围裙坐电梯到小区门口超市买缺的调料（那回头率老高了）。郫县豆瓣酱、料酒、老姜、蒜瓣、老抽（酱油）、生抽（鲜酱油）、香醋、白醋、白砂糖、老冰糖、白芝麻、小磨麻油、甜面酱、蚝油、辣椒面、五香粉、八角、桂皮、香叶、咖哩粉、白胡椒粉、鲜辣粉、花椒粉、椒盐、孜然粉、番茄酱、浓汤宝（牛肉、猪肉和老母鸡）、蜂蜜、老干妈豆豉酱。</p><p>这些调味品有共同的特征——1、保质期较长，常备着，不容易坏。2、使用频率极其频繁。3、要么不用，一旦那道菜式需要用到，而你恰恰缺少，那这道菜基本就属于做不了了，非要不可的那种。</p><h1 id="调味品"><a href="#调味品" class="headerlink" title="调味品"></a>调味品</h1><ul><li>油：大豆油即可，菜籽油更好。</li><li>盐：海盐、湖盐、井盐、岩盐，任选即可。</li><li>酱油：生抽，老抽。生抽一般用来蘸料，拌凉菜，或者是炒菜时提个鲜；老抽一般在红烧时做上色用。简单来说，拌菜炒菜用生抽，红烧用老抽。</li><li>醋：陈醋，白醋，米醋。陈醋用途最广，可以炒菜，可以凉拌，可以蘸酱，还能上色；白醋最大的用处体现在它的功能性，比如除臭除味、美肤养颜、洗涤除垢等等；米醋因为口味柔和，有着非常浓厚的香气，所以多用来凉拌。</li><li>糖：绵糖。</li><li>其他：十三香、干辣椒（小米椒）/辣椒粉、大茴香（孜然）/孜然粉、八角、花椒/花椒粉、桂皮、香叶、小茴香、芝麻、烧烤料。</li></ul><h1 id="烹饪"><a href="#烹饪" class="headerlink" title="烹饪"></a>烹饪</h1><p>万能流程：<br>1、放油，放肉，放料酒，翻炒。<br>2、放菜，翻炒。<br>3、放入调味料（最后放盐），翻炒。<br>4、根据经验，观察色泽，尝一尝，出锅。</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ul><li>APP：下厨房</li><li>保存土豆：纸箱+不透光</li><li>存肉：买来肉之后按一顿的份量切块，每块分别放入保鲜膜，冷冻。</li><li>化肉：盐+白醋</li><li>磨刀：碗底，同一个方向</li></ul><h1 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h1><p><a href="https://www.zhihu.com/question/21696230" target="_blank" rel="noopener">你是明白了哪几个基本原理之后而厨艺大增的？</a></p><p><a href="http://open.163.com/newview/movie/free?pid=MD96HFRVB&mid=MDHNHOJB3" target="_blank" rel="noopener">来自专业厨师的36个无价的烹饪技巧</a></p><p><a href="http://open.163.com/newview/movie/free?pid=MD96HFRVB&mid=MDCGPFIUS" target="_blank" rel="noopener">20个你不知道的聪明的烹饪技巧</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;记不得新冠疫情开始的具体时间，只知道今年的春节（2020年1月25日），没有出去拜年，春节期间也没有出去聚餐。然后，疫情日益严重，继湖北武汉之后，各市也开始封城。&lt;br&gt;复工日期一推再推，2月15日经历了两次信息登记，三次体温检测，顺利返回北京。先去社区办理观察证，小区内隔离两周，拿到出入证，还要录入人脸识别，以便进出小区。&lt;br&gt;3月9日年后第一次上班，需要查询近期行程，测量体温，才能进入达美中心。复工后三周休两周，直到最近，才每周上班。但是，仍然不敢在外面吃饭，因为多人用餐是最容易传播新冠的途径。&lt;/p&gt;
&lt;p&gt;因此，厨道大兴！而小编不才也加入了自己做饭的行列，毕竟自己做才最放心。做的多了，自然不能只满足于能吃，而要追求好吃。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.voidking.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>使用curl访问k8s的apiserver</title>
    <link href="https://www.voidking.com/dev-curl-k8s-api-server/"/>
    <id>https://www.voidking.com/dev-curl-k8s-api-server/</id>
    <published>2020-04-15T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s管理工具"><a href="#k8s管理工具" class="headerlink" title="k8s管理工具"></a>k8s管理工具</h1><p>管理k8s集群，除了kubectl和go-client，其实还可以使用curl命令。<br>本文，我们就学习一下怎样使用curl访问k8s的apiserver，实现k8s集群的管理。主要参考<a href="https://www.codercto.com/a/89468.html" target="_blank" rel="noopener">如何使用curl访问k8s的apiserver</a>。</p><p>需求：使用curl命令，实现 kubectl get pod 同样的效果。<br>使用curl命令访问k8s集群时，分别使用证书和token两种认证方式。</p><a id="more"></a><h1 id="使用证书"><a href="#使用证书" class="headerlink" title="使用证书"></a>使用证书</h1><p>假设我们拥有集群的kubeconfig文件，我们需要从中拿出ca cert、client cert和client key，保存为文件。并且拿出apiserver，保存为变量。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat<span class="built_in"> config </span>| grep certificate-authority-data | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt; ca.crt</span><br><span class="line">cat<span class="built_in"> config </span>| grep client-certificate-data | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt; client.crt</span><br><span class="line">cat<span class="built_in"> config </span>| grep client-key-data | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt; client.key</span><br><span class="line"><span class="attribute">APISERVER</span>=$(cat<span class="built_in"> config </span>| grep<span class="built_in"> server </span>| awk <span class="string">'&#123;print $2&#125;'</span>)</span><br></pre></td></tr></table></figure><p>查看API的url，使用curl命令调用API</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -v8</span><br><span class="line">curl <span class="params">--cert</span> <span class="string">./client.crt</span> <span class="params">--cacert</span> <span class="string">./ca.crt</span> <span class="params">--key</span> <span class="string">./client.key</span> $APISERVER/api/v1/namespaces/default/pods/</span><br></pre></td></tr></table></figure><p>以上，拿到了default空间下的pod信息，和 kubectl get pod 等同。</p><h1 id="使用Token"><a href="#使用Token" class="headerlink" title="使用Token"></a>使用Token</h1><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><p>想要使用curl命令访问apiserver，首先要获得一个具有权限的token。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> secrets <span class="comment">--all-namespaces | grep admin</span></span><br><span class="line">kubectl describe secrets admin-<span class="keyword">token</span>-vmv2c -n kube-<span class="keyword">system</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Name:</span>         <span class="string">admin-token-vmv2c</span></span><br><span class="line"><span class="attr">Namespace:</span>    <span class="string">kube-system</span></span><br><span class="line"><span class="attr">Labels:</span>       <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Annotations:  kubernetes.io/service-account.name:</span> <span class="string">admin</span></span><br><span class="line">              <span class="attr">kubernetes.io/service-account.uid:</span> <span class="string">a75b4cdc-e120-11e9-8695-00163e300424</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Type:</span>  <span class="string">kubernetes.io/service-account-token</span></span><br><span class="line"></span><br><span class="line"><span class="string">Data</span></span><br><span class="line"><span class="string">====</span></span><br><span class="line"><span class="attr">ca.crt:</span>     <span class="number">1419</span> <span class="string">bytes</span></span><br><span class="line"><span class="attr">namespace:</span>  <span class="number">11</span> <span class="string">bytes</span></span><br><span class="line"><span class="attr">token:</span>      <span class="string">xxxthisisatokenxxx</span></span><br></pre></td></tr></table></figure><p>最后一个字段就是token，那么这个token有哪些权限呢？</p><h2 id="查看token权限"><a href="#查看token权限" class="headerlink" title="查看token权限"></a>查看token权限</h2><p>根据annotations中的key value，可以看到这个secrets绑定了一个service-account(sa)，name为admin。等同于这个token绑定了一个sa，name为admin。</p><p>查看admin这个service-account的信息。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> <span class="keyword">sa</span> --<span class="keyword">all</span>-namespaces | <span class="keyword">grep</span> admin</span><br><span class="line">kubectl describe <span class="keyword">sa</span> admin -n kube-<span class="built_in">system</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Name:                admin</span><br><span class="line">Namespace:           kube-<span class="built_in">system</span></span><br><span class="line">Label<span class="variable">s:</span>              <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Annotation<span class="variable">s:</span>         kubectl.kubernetes.io/<span class="keyword">last</span>-applied-configuration:</span><br><span class="line">                       &#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"kind"</span>:<span class="string">"ServiceAccount"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"name"</span>:<span class="string">"admin"</span>,<span class="string">"namespace"</span>:<span class="string">"kube-system"</span>&#125;&#125;</span><br><span class="line">Image pull secret<span class="variable">s:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Mountable secret<span class="variable">s:</span>   admin-token-vmv2c</span><br><span class="line">Token<span class="variable">s:</span>              admin-token-vmv2c</span><br><span class="line">Event<span class="variable">s:</span>              <span class="symbol">&lt;none&gt;</span></span><br></pre></td></tr></table></figure><p>没有关于admin的权限信息，那么我们再看一下admin绑定了哪些role和clusterrole。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> rolebindings --<span class="keyword">all</span>-namespaces -oyaml | <span class="keyword">grep</span> <span class="string">"name: admin"</span> -A10 -B10</span><br><span class="line">kubectl <span class="built_in">get</span> clusterrolebindings --<span class="keyword">all</span>-namespaces -oyaml | <span class="keyword">grep</span> <span class="string">"name: admin"</span> -A10 -B10</span><br></pre></td></tr></table></figure><p>找到有用信息为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"><span class="symbol">  kind:</span> ClusterRoleBinding</span><br><span class="line"><span class="symbol">  metadata:</span></span><br><span class="line"><span class="symbol">    annotations:</span></span><br><span class="line">      kubectl.kubernetes.io/last-applied-configuration: |</span><br><span class="line">        &#123;<span class="string">"apiVersion"</span>:<span class="string">"rbac.authorization.k8s.io/v1beta1"</span>,<span class="string">"kind"</span>:<span class="string">"ClusterRoleBinding"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"name"</span>:<span class="string">"admin"</span>&#125;,<span class="string">"roleRef"</span>:&#123;<span class="string">"apiGroup"</span>:<span class="string">"rbac.authorization.k8s.io"</span>,<span class="string">"kind"</span>:<span class="string">"ClusterRole"</span>,<span class="string">"name"</span>:<span class="string">"cluster-admin"</span>&#125;,<span class="string">"subjects"</span>:[&#123;<span class="string">"kind"</span>:<span class="string">"ServiceAccount"</span>,<span class="string">"name"</span>:<span class="string">"admin"</span>,<span class="string">"namespace"</span>:<span class="string">"kube-system"</span>&#125;]&#125;</span><br><span class="line"><span class="symbol">    creationTimestamp:</span> <span class="string">"2019-09-27T12:16:37Z"</span></span><br><span class="line"><span class="symbol">    name:</span> admin</span><br><span class="line"><span class="symbol">    resourceVersion:</span> <span class="string">"1317"</span></span><br><span class="line"><span class="symbol">    selfLink:</span> <span class="meta-keyword">/apis/</span>rbac.authorization.k8s.io<span class="meta-keyword">/v1/</span>clusterrolebindings/admin</span><br><span class="line"><span class="symbol">    uid:</span> a75e1ef9-e120<span class="number">-11e9</span><span class="number">-8695</span><span class="number">-00163e300424</span></span><br><span class="line"><span class="symbol">  roleRef:</span></span><br><span class="line"><span class="symbol">    apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line"><span class="symbol">    kind:</span> ClusterRole</span><br><span class="line"><span class="symbol">    name:</span> cluster-admin</span><br><span class="line"><span class="symbol">  subjects:</span></span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line"><span class="symbol">    name:</span> admin</span><br><span class="line"><span class="symbol">    namespace:</span> kube-system</span><br></pre></td></tr></table></figure><p>可知admin绑定了一个名为cluster-admin的clusterrole，接着查看cluster-admin的权限。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe clusterrole <span class="keyword">cluster</span>-<span class="keyword">admin</span> -n kube-<span class="keyword">system</span></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Name:         cluster-admin</span><br><span class="line">Labels:       kubernetes.io/<span class="attribute">bootstrapping</span>=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources  Non-Resource URLs <span class="built_in"> Resource </span>Names  Verbs</span><br><span class="line">  ---------  -----------------  --------------  -----</span><br><span class="line">  *.*        []                 []              [*]</span><br><span class="line">             [*]                []              [*]</span><br></pre></td></tr></table></figure><p>cluster-admin这个角色拥有集群的所有权限，因此admin这个sa拥有集群的所有权限。</p><h2 id="使用token"><a href="#使用token" class="headerlink" title="使用token"></a>使用token</h2><p>1、设置token和apiserver作为变量</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TOKEN=<span class="constructor">$(<span class="params">kubectl</span> <span class="params">describe</span> <span class="params">secrets</span> $(<span class="params">kubectl</span> <span class="params">get</span> <span class="params">secrets</span> -<span class="params">n</span> <span class="params">kube</span>-<span class="params">system</span> |<span class="params">grep</span> <span class="params">admin</span> |<span class="params">cut</span> -<span class="params">f1</span> -<span class="params">d</span> ' ')</span> -n kube-system <span class="pattern-match">|grep -<span class="constructor">E</span> '^token' |cut -f2 -d':'|tr -d '\t'|tr -d ' ')</span></span><br><span class="line"><span class="pattern-match"><span class="constructor">APISERVER</span>=<span class="constructor">$(<span class="params">kubectl</span> <span class="params">config</span> <span class="params">view</span> |<span class="params">grep</span> <span class="params">server</span>|<span class="params">cut</span> -<span class="params">f</span> 2- -<span class="params">d</span> <span class="string">":"</span> | <span class="params">tr</span> -<span class="params">d</span> <span class="string">" "</span>)</span></span></span><br><span class="line"><span class="pattern-match">``` </span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">2、查看<span class="constructor">API</span>的url，使用curl命令调用<span class="constructor">API</span></span></span><br></pre></td></tr></table></figure><p>kubectl get pods -v8<br>curl -H “Authorization: Bearer $TOKEN” $APISERVER/api/v1/namespaces/default/pods/  –insecure</p><p>```</p><p>以上，拿到了default空间下的pod信息，和 kubectl get pod 等同。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;k8s管理工具&quot;&gt;&lt;a href=&quot;#k8s管理工具&quot; class=&quot;headerlink&quot; title=&quot;k8s管理工具&quot;&gt;&lt;/a&gt;k8s管理工具&lt;/h1&gt;&lt;p&gt;管理k8s集群，除了kubectl和go-client，其实还可以使用curl命令。&lt;br&gt;本文，我们就学习一下怎样使用curl访问k8s的apiserver，实现k8s集群的管理。主要参考&lt;a href=&quot;https://www.codercto.com/a/89468.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何使用curl访问k8s的apiserver&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;需求：使用curl命令，实现 kubectl get pod 同样的效果。&lt;br&gt;使用curl命令访问k8s集群时，分别使用证书和token两种认证方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>PS绘制抛物线</title>
    <link href="https://www.voidking.com/hobby-ps-parabola/"/>
    <id>https://www.voidking.com/hobby-ps-parabola/</id>
    <published>2020-04-12T18:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>已有一张 draw.io 绘制出的图像如下。<br><img src="http://cdn.voidking.com/@/imgs/ps-parabola/parabola.png?imageView2/0/w/250" alt=""></p><p>现在需要在小球之间绘制平抛运动的抛物线。</p><a id="more"></a><h1 id="绘制方法"><a href="#绘制方法" class="headerlink" title="绘制方法"></a>绘制方法</h1><p>1、使用PS打开原始图像，使用 ctrl+加号 放大到合适的大小。</p><p>2、菜单栏图层，新建，图层。</p><p>3、工具栏选择钢笔工具。单击上面的小球，然后单击下面的小球并按住鼠标，向下拉伸，移动调整曲线的弧度。</p><p>4、右键曲线，建立选区，确定。或者直接 ctrl+Enter ，路径变成选区。</p><p>5、菜单栏编辑，描边，确定。<br>ctrl+D 取消选区，选中图层 Enter回车 去掉钢笔笔迹。</p><p>6、图层，只显示抛物线，工具栏选择橡皮擦工具，擦除不需要的部分。</p><p>7、图层，显示所有图层，即可看到需要的抛物线。</p><p>重复上述步骤，完成另外两条抛物线，最终结果如下图。<br><img src="http://cdn.voidking.com/@/imgs/ps-parabola/parabola.jpg?imageView2/0/w/250" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;已有一张 draw.io 绘制出的图像如下。&lt;br&gt;&lt;img src=&quot;http://cdn.voidking.com/@/imgs/ps-parabola/parabola.png?imageView2/0/w/250&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在需要在小球之间绘制平抛运动的抛物线。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="ps" scheme="https://www.voidking.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>MacOS设置</title>
    <link href="https://www.voidking.com/hobby-macos-settings/"/>
    <id>https://www.voidking.com/hobby-macos-settings/</id>
    <published>2020-04-08T20:00:00.000Z</published>
    <updated>2020-10-28T16:09:16.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h1><h2 id="用户名"><a href="#用户名" class="headerlink" title="用户名"></a>用户名</h2><p>系统偏好设置，用户与群组，点按锁按钮以进行修改。右键用户，高级选项。<br>修改账户名称为vk，这个名称是shell中显示的用户名。<br>修改全名为voidking，这个名称是mac系统显示的名称。<br>个人目录，修改为 /Users/vk ，这个目录是新的home目录。</p><p>修改完成后点击“好”，系统重启，然后整个系统恢复到出厂状态。</p><a id="more"></a><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p>系统偏好设置，用户与群组，更改密码。</p><h2 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h2><p>系统偏好设置，触控板，光标与点按。<br>勾选 轻点来点按，勾选 辅助点按，跟踪速度调整为喜欢的速度。 </p><h2 id="电脑名称"><a href="#电脑名称" class="headerlink" title="电脑名称"></a>电脑名称</h2><p>系统偏好设置，共享，电脑名称，编辑。</p><h2 id="开机声音"><a href="#开机声音" class="headerlink" title="开机声音"></a>开机声音</h2><p>1、关闭开机声音</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nvram BootAudio=%00</span><br><span class="line">sudo nvram SystemAudioVolume=%80</span><br></pre></td></tr></table></figure><p>2、打开开机声音</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nvram BootAudio=%01</span><br><span class="line">sudo nvram -d SystemAudioVolume</span><br></pre></td></tr></table></figure><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>使用mac系统的Finder，可以查看“我的所有文件”，但是这是假的，点击这个选项只能看到最近使用的一些文件。</p><p>解决办法：打开Finder，command＋逗号，出现Finder偏好设置，边栏，设备中勾选硬盘。然后在侧边栏中，就可以打开硬盘，看到所有文件了。</p><p>当然， /etc 这种文件夹是看不到的。</p><h2 id="设置默认文件排序"><a href="#设置默认文件排序" class="headerlink" title="设置默认文件排序"></a>设置默认文件排序</h2><p>打开Finder，点击家目录，command＋J，选择排序方式（种类），用做默认。家目录下的所有目录，都会继承这种默认排序方式。</p><h2 id="打不开软件"><a href="#打不开软件" class="headerlink" title="打不开软件"></a>打不开软件</h2><p>从网络下载的软件，安装时提示：<br>打不开“xxx”，因为它来自身份不明的开发者。</p><p>解决办法：系统偏好设置，安全性和隐私，点锁按钮以进行更改，任何来源，允许来自任何来源。</p><h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><p>1、从windows系统 C:\Windows\Fonts 目录中拷贝需要的字体。<br>2、command+shift+G，输入 <code>/Library/Fonts</code>，前往。<br>3、字体放入 Fonts 目录。</p><h2 id="启动sftp"><a href="#启动sftp" class="headerlink" title="启动sftp"></a>启动sftp</h2><p>1、系统偏好设置，共享，勾选远程登录</p><p>、测试</p><p><code>sftp localhost</code></p><h1 id="软件相关"><a href="#软件相关" class="headerlink" title="软件相关"></a>软件相关</h1><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>1、打开shell<br>command＋space，输入“terminal”。<br>或者 Launchpad，其他，终端。<br>为了方便使用，可以把终端放到Dock。</p><p>2、个性设置<br>在home目录下创建 .bash_profile 文件，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ll</span></span><br><span class="line">alias ll="ls -l"</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> color</span></span><br><span class="line">export CLICOLOR=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> \h:\W \u\$</span></span><br><span class="line">export PS1='\[\033[01;33m\]\u@\h\[\033[01;31m\] \W\$\[\033[00m\] '</span><br><span class="line"><span class="meta">#</span><span class="bash"> grep</span></span><br><span class="line">alias grep='grep --color=always'</span><br></pre></td></tr></table></figure><p>更好的方式是，使用ohmyzsh。</p><h2 id="ohmyzsh"><a href="#ohmyzsh" class="headerlink" title="ohmyzsh"></a>ohmyzsh</h2><p><a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My Zsh</a> is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout…”Oh My ZSH!”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"</span><br></pre></td></tr></table></figure><p>在.zshrc中添加一些设置后，也许会提示：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zsh compinit: <span class="keyword">insecure </span><span class="keyword">directories, </span>run compaudit for list.</span><br><span class="line">Ignore <span class="keyword">insecure </span><span class="keyword">directories </span><span class="keyword">and </span>continue [y] <span class="keyword">or </span>abort compinit [n]?</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compaudit <span class="string">| xargs chmod g-w,o-w</span></span><br></pre></td></tr></table></figure><h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><p>brew 全称<a href="http://brew.sh/index.html" target="_blank" rel="noopener">Homebrew</a>，是Mac OSX上的软件包管理工具。</p><p>安装brew：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 国内安装失败的话，建议换下面的脚本</span></span><br><span class="line">/bin/zsh -c "$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)"</span><br></pre></td></tr></table></figure><p>更换homebrew源：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd </span><span class="string">"$(brew --repo)"</span> &amp;&amp; <span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">git:</span>//<span class="string">mirrors.</span><span class="string">ustc.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">brew.</span><span class="string">git</span></span><br><span class="line"><span class="string">cd </span><span class="string">"$(brew --repo homebrew/core)"</span> &amp;&amp; <span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">git:</span>//<span class="string">mirrors.</span><span class="string">ustc.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">homebrew-core.</span><span class="string">git</span></span><br><span class="line"><span class="string">cd </span><span class="string">"$(brew --repo homebrew/cask)"</span> &amp;&amp; <span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">git:</span>//<span class="string">mirrors.</span><span class="string">ustc.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">homebrew-cask.</span><span class="string">git</span></span><br><span class="line"><span class="string">brew </span><span class="string">update</span></span><br><span class="line"><span class="string">#</span> 还原</span><br><span class="line"><span class="string">cd </span><span class="string">"$(brew --repo)"</span> &amp;&amp; <span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">brew.</span><span class="string">git</span></span><br><span class="line"><span class="string">cd </span><span class="string">"$(brew --repo homebrew/core)"</span> &amp;&amp; <span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">homebrew-core.</span><span class="string">git</span></span><br><span class="line"><span class="string">cd </span><span class="string">"$(brew --repo homebrew/cask)"</span> &amp;&amp; <span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">homebrew-cask.</span><span class="string">git</span></span><br><span class="line"><span class="string">brew </span><span class="string">update</span></span><br></pre></td></tr></table></figure><p>更多内容参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">Homebrew/Linuxbrew 镜像使用帮助</a>。</p><h2 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h2><p>安装<a href="https://iterm2.com/" target="_blank" rel="noopener">iterm2</a></p><h3 id="配置rzsz"><a href="#配置rzsz" class="headerlink" title="配置rzsz"></a>配置rzsz</h3><p>1、安装iterm2-zmodem</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brew install wget</span><br><span class="line">brew install lrzsz</span><br><span class="line"></span><br><span class="line">git clone https://github.com/aikuyun/iterm2-zmodem.git</span><br><span class="line">cd iterm2-zmodem</span><br><span class="line">cp iterm2-* /usr/local/bin</span><br><span class="line">cd /usr/local/bin</span><br><span class="line">chmod +x iterm2-*</span><br></pre></td></tr></table></figure><p>2、iterm2配置项 </p><p>Profiles-&gt;OpenProfiles-&gt;EditProfiles-&gt;Advanced-&gt;Tirgger，添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Regular expression:</span>  <span class="string">/*/*B0100</span></span><br><span class="line"><span class="attr">Action:</span> <span class="string">Run</span> <span class="string">Silent</span> <span class="string">Coprocess</span></span><br><span class="line"><span class="attr">Parameters:</span> <span class="string">/usr/local/bin/iterm2-send-zmodem.sh</span></span><br><span class="line"><span class="attr">Instant:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Regular expression:</span>  <span class="string">/*/*B00000000000000</span></span><br><span class="line"><span class="attr">Action:</span> <span class="string">Run</span> <span class="string">Silent</span> <span class="string">Coprocess</span></span><br><span class="line"><span class="attr">Parameters:</span> <span class="string">/usr/local/bin/iterm2-recv-zmodem.sh</span></span><br><span class="line"><span class="attr">Instant:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="clone-session"><a href="#clone-session" class="headerlink" title="clone session"></a>clone session</h3><p>1、Iterm2-&gt;Preferences-&gt;Profiles-&gt;Working Directory<br>勾选 Reuse previous session’s directory</p><p>2、编辑 .ssh/config 文件，添加</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host *</span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPath ~/.ssh/master-<span class="built_in">%r</span>@<span class="built_in">%h</span>:<span class="built_in">%p</span></span><br></pre></td></tr></table></figure><p>3、重新打开终端，第一次登录需要密码。第二次登录同一台机器，就不需要密码了，nice。</p><h3 id="更换主题和背景色"><a href="#更换主题和背景色" class="headerlink" title="更换主题和背景色"></a>更换主题和背景色</h3><p>更换主题：Iterm2-&gt;Preferences-&gt;Appearance-&gt;General-&gt;Theme<br>更换背景色：Iterm2-&gt;Preferences-&gt;Profiles-&gt;Colors-&gt;Color Presets</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>git配置参考<a href="https://www.voidking.com/dev-git-command/">《常用git命令》</a>。</p><h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p>sublime破解方法：</p><p>1、<code>vim /etc/hosts</code>，添加</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> www.sublimetext.com</span><br><span class="line"><span class="number">127.0.0.1</span> license.sublimehq.com</span><br></pre></td></tr></table></figure><p>2、sublime中输入license</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----- BEGIN LICENSE -----</span><br><span class="line">Member J2TeaM</span><br><span class="line">Single User License</span><br><span class="line">EA7E<span class="number">-1011316</span></span><br><span class="line">D7DA350E <span class="number">1</span>B8B0760 <span class="number">972</span>F8B60 F3E64036</span><br><span class="line">B9B4E234 F356F38F <span class="number">0</span>AD1E3B7 <span class="number">0E9</span>C5FAD</span><br><span class="line">FA0A2ABE <span class="number">25</span>F65BD8 D51458E5 <span class="number">3923</span>CE80</span><br><span class="line"><span class="number">87428428</span> <span class="number">79079</span>A01 AA69F319 A1AF29A4</span><br><span class="line">A684C2DC <span class="number">0</span>B1583D4 <span class="number">19</span>CBD290 <span class="number">217618</span>CD</span><br><span class="line"><span class="number">5653E0</span>A0 BACE3948 BB2EE45E <span class="number">422</span>D2C87</span><br><span class="line">DD9AF44B <span class="number">99</span>C49590 D2DBDEE1 <span class="number">75860</span>FD2</span><br><span class="line"><span class="number">8</span>C8BB2AD B2ECE5A4 EFC08AF2 <span class="number">25</span>A9B864</span><br><span class="line">------ END LICENSE ------</span><br></pre></td></tr></table></figure><h2 id="ssh-config"><a href="#ssh-config" class="headerlink" title="ssh config"></a>ssh config</h2><p>登录远程服务器，需要<br><code>ssh username@host -p port</code><br>在记忆这些信息是很麻烦的，因此我们需要一个简单的方法。</p><p>1、创建 .ssh/config 文件，内容为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host jumpbox</span><br><span class="line">HostName jumpbox.voidking.com</span><br><span class="line">User voidking</span><br><span class="line">Port 2345</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host bastionhost</span><br><span class="line">HostName 45.68.78.134</span><br><span class="line">User root</span><br><span class="line">Port 3456</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>2、配置authorized_keys</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh | sh</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub jumpbox</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub bastionhost</span><br></pre></td></tr></table></figure><p>3、登录服务器 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh jumpbox</span><br><span class="line">ssh bastionhost</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>1、安装启动mysql</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>mysql</span><br><span class="line">mysql.server start</span><br></pre></td></tr></table></figure><p>2、mysqlclient连接mysql</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql -uroot</span></span><br></pre></td></tr></table></figure><p>3、使用sequelpro连接mysql<br>报错： MySQL said: Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(/usr/local/mysql/lib/plugin/caching_sha2_password.so, 2): image not found</p><p>解决：参考<a href="https://www.voidking.com/dev-mysql-reset-password/">MySQL重置密码</a>，设置密码。</p><h2 id="mysqlclient"><a href="#mysqlclient" class="headerlink" title="mysqlclient"></a>mysqlclient</h2><p>1、安装mysqlclient</p><p><code>brew install mysql-connector-c</code></p><p>2、编辑 .zshrc 添加路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mysql</span></span><br><span class="line">export PATH="/usr/local/Cellar/mysql-client/8.0.19/bin:$PATH"</span><br></pre></td></tr></table></figure><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>1、访问<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">Java SE Downloads</a>页面，下载dmg文件并安装</p><p>2、编辑 .bash_profile 文件，添加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">JAVA_HOME</span>=/Library/Java/JavaVirtualMachines/jdk-14.0.1.jdk/Contents/Home</span><br><span class="line"><span class="attribute">CLASSPATH</span>=<span class="variable">$JAVA_HOME</span>/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span><br><span class="line"><span class="attribute">PATH</span>=<span class="variable">$JAVA_HOME</span>/bin:$PATH:.</span><br><span class="line"><span class="builtin-name">export</span> JAVA_HOME</span><br><span class="line"><span class="builtin-name">export</span> CLASSPATH</span><br><span class="line"><span class="builtin-name">export</span> PATH</span><br></pre></td></tr></table></figure><p>3、测试安装</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source <span class="string">.bash_profile</span></span><br><span class="line">java <span class="params">--version</span></span><br></pre></td></tr></table></figure><h2 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h2><p>参考<a href="https://www.voidking.com/dev-centos-pyenv/">CentOS安装配置pyenv</a>。不同的是，本节是在macos环境中使用pyenv。<br>1、安装pyenv<br><code>brew install pyenv</code></p><p>2、配置pyenv<br>在 .zshrc 中添加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$&#123;HOME&#125;</span>/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line">eval <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br></pre></td></tr></table></figure><p>使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>3、安装python3.6.10</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pyenv</span> <span class="string">install -l</span></span><br><span class="line"><span class="attr">pyenv</span> <span class="string">install -v 3.6.10</span></span><br><span class="line"><span class="attr">pyenv</span> <span class="string">rehash</span></span><br></pre></td></tr></table></figure><p>如果安装很慢，这里提供一个小技巧：提前下载安装包。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~<span class="regexp">/.pyenv/</span>cache</span><br><span class="line">cd ~<span class="regexp">/.pyenv/</span>cache</span><br><span class="line">wget https:<span class="regexp">//</span>www.python.org<span class="regexp">/ftp/</span>python<span class="regexp">/3.6.10/</span>Python-<span class="number">3.6</span>.<span class="number">10</span>.tar.xz</span><br></pre></td></tr></table></figure><p>4、切换python版本</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv <span class="keyword">global</span> <span class="number">3.6</span><span class="number">.10</span></span><br><span class="line">pyenv <span class="keyword">rehash</span></span><br><span class="line"><span class="keyword">python</span> -V</span><br></pre></td></tr></table></figure><p>5、切换为原版本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv global system</span><br><span class="line">pyenv rehash</span><br><span class="line">python -V</span><br></pre></td></tr></table></figure><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>1、参考<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">Node Version Manager</a>，安装nvm</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -<span class="keyword">o</span>- http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/nvm-<span class="keyword">sh</span>/nvm/v0.<span class="number">36.0</span>/install.<span class="keyword">sh</span> | bash</span><br></pre></td></tr></table></figure><p>如果下载脚本报错，就本地创建install.sh，从网页拷贝内容到install.sh后执行。</p><p>2、编辑 .zshrc ，添加内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><p>3、使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .zshrc</span><br><span class="line">nvm</span><br></pre></td></tr></table></figure><p>4、安装使用指定版本</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br><span class="line">nvm install v10<span class="number">.16</span><span class="number">.3</span></span><br><span class="line">nvm <span class="type">list</span></span><br><span class="line">nvm use v10<span class="number">.16</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><h2 id="解压rar"><a href="#解压rar" class="headerlink" title="解压rar"></a>解压rar</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>unrar</span><br><span class="line">unrar x package-name.rar</span><br></pre></td></tr></table></figure><h2 id="命令行发邮件"><a href="#命令行发邮件" class="headerlink" title="命令行发邮件"></a>命令行发邮件</h2><p>邮件系统有三个组成部分：邮件用户代理（MUA，Mail User Agent）；邮件传送代理（MTA，Mail Transport Agent）；邮件分发代理（MDA，Mail Deliver Agent）。<br>macos自带mail（mailx）命令，这是一个MUA，与之配合的是sendmail，一个MTA。但是，sendmail不支持使用外部MDA发邮件，因此需要把sendmail替换成msmtp。</p><p>1、安装msmtp</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>msmtp</span><br></pre></td></tr></table></figure><p>2、配置使用msmtp<br><code>sudo vim /etc/mail.rc</code>，添加：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">sendmail</span>=/usr/local/bin/msmtp</span><br></pre></td></tr></table></figure><p>3、配置msmtp<br><code>vim ~/.msmtprc</code>，内容为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line"></span><br><span class="line">account default</span><br><span class="line">host smtp.163.com</span><br><span class="line">port 25</span><br><span class="line"><span class="keyword">from</span> quizthink@163.com</span><br><span class="line">auth login</span><br><span class="line">tls off</span><br><span class="line">user quizthink@163.com</span><br><span class="line">password xxxxxx</span><br></pre></td></tr></table></figure><p>4、修改 .msmtprc 权限<br><code>chmod 600 ~/.msmtprc</code></p><p>5、发送邮件<br><code>echo &quot;Hello world&quot; | mail -s &quot;test&quot; voidking@qq.com</code></p><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>前提：参考<a href="https://www.voidking.com/dev-frp/">《使用frp进行内网穿透》</a>配置好frp服务端。<br>本节中，配置macos的内网穿透，</p><p>1、下载macos用的frp，这里下载<a href="https://github.com/fatedier/frp/releases/download/v0.31.1/frp_0.31.1_darwin_amd64.tar.gz" target="_blank" rel="noopener">frp_0.31.1_darwin_amd64.tar.gz</a>。</p><p>2、解压并配置 frpc.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">120.77</span>.<span class="number">36.182</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">3422</span></span><br></pre></td></tr></table></figure><p>3、启动frpc客户端</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br><span class="line"><span class="comment"># control+C</span></span><br><span class="line">brew install screen</span><br><span class="line">screen ./frpc -c frpc.ini</span><br><span class="line"><span class="comment"># control+A+D</span></span><br></pre></td></tr></table></figure><p>4、启用远程登录<br>系统偏好设置，共享，勾选远程登录。</p><p>5、测试</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br><span class="line">ssh <span class="symbol">vk@</span><span class="number">120.77</span><span class="number">.36</span><span class="number">.182</span> -p <span class="number">3422</span></span><br></pre></td></tr></table></figure><h2 id="好用的软件"><a href="#好用的软件" class="headerlink" title="好用的软件"></a>好用的软件</h2><ul><li><a href="https://www.google.com/intl/zh-CN/chrome/" target="_blank" rel="noopener">Chrome</a></li><li><a href="https://iterm2.com/" target="_blank" rel="noopener">iterm2</a></li><li><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">sublime</a></li><li><a href="https://www.wps.cn/" target="_blank" rel="noopener">wps</a></li><li><a href="https://pan.baidu.com/" target="_blank" rel="noopener">百度云盘</a></li><li><a href="https://skim-app.sourceforge.io/" target="_blank" rel="noopener">Skim</a></li><li><a href="https://app.diagrams.net/" target="_blank" rel="noopener">draw.io</a></li><li><a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a></li><li><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a></li><li><a href="https://www.freedownloadmanager.org/zh/" target="_blank" rel="noopener">FDM</a></li><li><a href="https://macwk.com/soft/movist" target="_blank" rel="noopener">Movist</a></li><li><a href="http://www.sequelpro.com/" target="_blank" rel="noopener">sequelpro</a></li><li><a href="https://mounty.app/" target="_blank" rel="noopener">Mounty</a></li><li><a href="https://www.postman.com/" target="_blank" rel="noopener">postman</a></li><li><a href="https://www.typora.io/" target="_blank" rel="noopener">typora</a></li></ul><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="shell中打开finder"><a href="#shell中打开finder" class="headerlink" title="shell中打开finder"></a>shell中打开finder</h2><p><code>open .</code></p><h2 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h2><p>1、command + tab<br>2、三指左右滑动<br>3、三指上滑</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系统相关&quot;&gt;&lt;a href=&quot;#系统相关&quot; class=&quot;headerlink&quot; title=&quot;系统相关&quot;&gt;&lt;/a&gt;系统相关&lt;/h1&gt;&lt;h2 id=&quot;用户名&quot;&gt;&lt;a href=&quot;#用户名&quot; class=&quot;headerlink&quot; title=&quot;用户名&quot;&gt;&lt;/a&gt;用户名&lt;/h2&gt;&lt;p&gt;系统偏好设置，用户与群组，点按锁按钮以进行修改。右键用户，高级选项。&lt;br&gt;修改账户名称为vk，这个名称是shell中显示的用户名。&lt;br&gt;修改全名为voidking，这个名称是mac系统显示的名称。&lt;br&gt;个人目录，修改为 /Users/vk ，这个目录是新的home目录。&lt;/p&gt;
&lt;p&gt;修改完成后点击“好”，系统重启，然后整个系统恢复到出厂状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
  </entry>
  
</feed>
