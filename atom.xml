<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习的郝</title>
  
  <subtitle>好好学习，天天向上！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.voidking.com/"/>
  <updated>2022-03-13T06:00:00.000Z</updated>
  <id>https://www.voidking.com/</id>
  
  <author>
    <name>好好学习的郝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSCode常用快捷键和配置</title>
    <link href="https://www.voidking.com/dev-vscode-shortcut-and-config/"/>
    <id>https://www.voidking.com/dev-vscode-shortcut-and-config/</id>
    <published>2022-02-13T06:00:00.000Z</published>
    <updated>2022-03-13T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCode简介"><a href="#VSCode简介" class="headerlink" title="VSCode简介"></a>VSCode简介</h1><p>JetBrains 全家桶非常好用，但是每年 $249 的价格，直接劝退了。然后，VSCode（Visual Studio Code）就成了最好的选择。</p><blockquote><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a> 是一个轻量但功能强大的代码编辑器，适用于 Windows、macOS 和 Linux。它内置了对 JavaScript、TypeScript 和 Node.js 的支持，并为其他语言（如 C++、C#、Java、Python、PHP、Go）和运行时（如 .NET 和 Unity）提供了丰富的扩展生态系统。</p></blockquote><p>本文记录一下 VSCode 常用的一些快捷键和配置，备忘。</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="查看快捷键"><a href="#查看快捷键" class="headerlink" title="查看快捷键"></a>查看快捷键</h2><p>左下角齿轮（Manage），Keyboard Shortcuts</p><p>VSCode的很多快捷键和sublime相同，这个必须点赞。sublime快捷键参考<a href="https://www.voidking.com/dev-sublime/">《Sublime Text3》</a>。</p><h2 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h2><p><code>command</code>+<code>shift</code>+<code>F</code></p><h2 id="选择相同内容"><a href="#选择相同内容" class="headerlink" title="选择相同内容"></a>选择相同内容</h2><p>选中一部分内容后，<code>command</code>+<code>D</code>可以选中相同内容。<br>配合<code>command</code>+<code>-&gt;</code>或者<code>command</code>+<code>&lt;-</code>，可以完成很多批量修改操作，比如print变log，比如print下面一行添加log。</p><h2 id="同列多行编辑"><a href="#同列多行编辑" class="headerlink" title="同列多行编辑"></a>同列多行编辑</h2><p><code>command</code>+<code>option</code>+<code>↑↓</code></p><p>sulime中<code>ctrl</code>+<code>shift</code>+<code>↑↓</code></p><h2 id="自动补全函数返回值"><a href="#自动补全函数返回值" class="headerlink" title="自动补全函数返回值"></a>自动补全函数返回值</h2><h2 id="函数跳转"><a href="#函数跳转" class="headerlink" title="函数跳转"></a>函数跳转</h2><p><code>command</code> + 点击：跳转函数定义，或跳转函数引用<br><code>ctrl</code> + <code>-</code>：跳回之前位置</p><h2 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h2><p><code>option</code> + <code>shift</code> + <code>F</code><br>对于Python代码，第一次执行会提示安装autopep8，安装即可。</p><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>左侧边栏，Extensions，搜索插件安装即可。</p><h2 id="保存文件时自动格式化"><a href="#保存文件时自动格式化" class="headerlink" title="保存文件时自动格式化"></a>保存文件时自动格式化</h2><p>Code，Preferences，Settings，Text Editor，Formatting，勾选Format On Save。<br>当 <code>command</code>+<code>S</code> 保存文件时，会自动执行一次代码格式化。</p><h2 id="粘贴时正确缩进"><a href="#粘贴时正确缩进" class="headerlink" title="粘贴时正确缩进"></a>粘贴时正确缩进</h2><p>复制一整块代码进行粘贴时，缩进往往不对，需要手动调整，这点还是jetbrains好用。<br>不过好在vscode插件很多，“Paste and Indent”这个插件就能解决这个问题。</p><p>1、安装“Paste and Indent”</p><p>2、<code>command</code> + <code>shift</code> + <code>P</code>，打开命令面板。</p><p>3、输入<code>keyboard</code>，选择 References: Open Keyboard Shortcuts(JSON)</p><p>4、编辑 keybindings.json，填入内容为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Place your key bindings in this file to override the defaults</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+v"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"pasteAndIndent.action"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+v"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"editor.action.clipboardPasteAction"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"!editorTextFocus"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+shift+v"</span>,</span><br><span class="line">        <span class="attr">"command"</span>: <span class="string">"editor.action.clipboardPasteAction"</span>,</span><br><span class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>重启vscode，复制粘贴时，使用ctrl+v就能够自动缩进了。<br>但是，ctrl+v有时候的表现反而不如常规粘贴（cmd+v），这时可以使用cmd+z进行撤销，就变成了常规粘贴的效果。<br>这个插件的原理应该是先进行了常规的粘贴，然后进行了缩进格式化，因此cmd+z可以还原常规粘贴的效果。</p><h2 id="批量替换换行符"><a href="#批量替换换行符" class="headerlink" title="批量替换换行符"></a>批量替换换行符</h2><h2 id="python代码检查"><a href="#python代码检查" class="headerlink" title="python代码检查"></a>python代码检查</h2><h2 id="python代码自动规范化"><a href="#python代码自动规范化" class="headerlink" title="python代码自动规范化"></a>python代码自动规范化</h2><h2 id="设置Python注释模板"><a href="#设置Python注释模板" class="headerlink" title="设置Python注释模板"></a>设置Python注释模板</h2><p>1、打开代码片段配置<br>Code，Preferences，User Snippets，选择Python<br>此时会打开一个python.json文件，这就是代码片段模板配置文件。不止可以配置文件头部注释，还可以配置通用内容。</p><p>2、填入内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">    <span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">    <span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">    <span class="comment">// same ids are connected.</span></span><br><span class="line">    <span class="comment">// Example:</span></span><br><span class="line">    <span class="comment">// "Print to console": &#123;</span></span><br><span class="line">    <span class="comment">//  "prefix": "log",</span></span><br><span class="line">    <span class="comment">//  "body": [</span></span><br><span class="line">    <span class="comment">//      "console.log('$1');",</span></span><br><span class="line">    <span class="comment">//      "$2"</span></span><br><span class="line">    <span class="comment">//  ],</span></span><br><span class="line">    <span class="comment">//  "description": "Log output to console"</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="attr">"header"</span>: &#123;</span><br><span class="line">        <span class="attr">"prefix"</span>: <span class="string">"pythonheader"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">            <span class="string">"#!/usr/bin/env python3"</span>,</span><br><span class="line">            <span class="string">"# -*- coding:utf-8 -*-"</span>,</span><br><span class="line">            <span class="string">"#"</span>,</span><br><span class="line">            <span class="string">"# Copyright (c) 2022 voidking.com, Inc. All Rights Reserved"</span>,</span><br><span class="line">            <span class="string">"#"</span>,</span><br><span class="line">            <span class="string">"\"\"\""</span>,</span><br><span class="line">            <span class="string">"Authors: voidking"</span>,</span><br><span class="line">            <span class="string">"Date:    $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE"</span>,</span><br><span class="line">            <span class="string">"\"\"\""</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、使用代码片段<br>新建Python文件，文件头部不会出现注释。<br>输入”pythonheader”，根据提示回车，就会自动添加注释了。<br>这种用法和sublime的Emmet插件很像，<code>!+tab</code>自动生成html5框架。</p><h2 id="git分支代码比较"><a href="#git分支代码比较" class="headerlink" title="git分支代码比较"></a>git分支代码比较</h2><p>git分支代码比较合并，<a href="https://www.voidking.com/dev-idea-git-merge-code/">JetBrains中的Show Diff with Working Tree</a>非常好用。vscode上没有能够完美替代这个功能的插件，gitlens只能算差强人意。</p><p>1、安装gitlens插件</p><p>2、左边栏显示gitlens插件<br><code>command</code> + <code>shift</code> + <code>P</code>，打开命令面板。<br>输入gitlenss，找到 Gitlens: Set Views Layout，点击它。<br>选择Gitlens Layout，这时gitlens插件就会显示在左边栏。<br><img src="https://cdn.voidking.com/@/imgs/vscode-shortcut-and-config/gitlens.png?imageView2/0/w/700" alt=""></p><p>3、选择分支进行比较<br>点击gitlens插件，BRANCHS，当前分支会有一个对号。<br>选中想要对比的分支，<code>option</code>+单击，Compare with Working Tree就会出现在 SEARCH&amp;COMPARE。<br><img src="https://cdn.voidking.com/@/imgs/vscode-shortcut-and-config/branches.png?imageView2/0/w/400" alt=""></p><p>4、代码比较<br>SEARCH&amp;COMPARE，选中Comparing Working…，点击Swap Comparison，让当前代码放在左边（个人习惯）。<br>x files changed中点击那些存在diff的文件，就可以愉快地进行代码比较了。<br><img src="https://cdn.voidking.com/@/imgs/vscode-shortcut-and-config/swap.png?imageView2/0/w/400" alt=""></p><p>5、代码合并<br>根据左右两边代码的不同，自行修改左边的代码。<br>和JetBrains相比，本插件最大的缺点是不能通过快捷按钮修改左边的代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VSCode简介&quot;&gt;&lt;a href=&quot;#VSCode简介&quot; class=&quot;headerlink&quot; title=&quot;VSCode简介&quot;&gt;&lt;/a&gt;VSCode简介&lt;/h1&gt;&lt;p&gt;JetBrains 全家桶非常好用，但是每年 $249 的价格，直接劝退了。然后，VSCode（Visual Studio Code）就成了最好的选择。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VSCode&lt;/a&gt; 是一个轻量但功能强大的代码编辑器，适用于 Windows、macOS 和 Linux。它内置了对 JavaScript、TypeScript 和 Node.js 的支持，并为其他语言（如 C++、C#、Java、Python、PHP、Go）和运行时（如 .NET 和 Unity）提供了丰富的扩展生态系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文记录一下 VSCode 常用的一些快捷键和配置，备忘。&lt;/p&gt;
&lt;h1 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h1&gt;&lt;h2 id=&quot;查看快捷键&quot;&gt;&lt;a href=&quot;#查看快捷键&quot; class=&quot;headerlink&quot; title=&quot;查看快捷键&quot;&gt;&lt;/a&gt;查看快捷键&lt;/h2&gt;&lt;p&gt;左下角齿轮（Manage），Keyboard Shortcuts&lt;/p&gt;
&lt;p&gt;VSCode的很多快捷键和sublime相同，这个必须点赞。sublime快捷键参考&lt;a href=&quot;https://www.voidking.com/dev-sublime/&quot;&gt;《Sublime Text3》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;全局搜索&quot;&gt;&lt;a href=&quot;#全局搜索&quot; class=&quot;headerlink&quot; title=&quot;全局搜索&quot;&gt;&lt;/a&gt;全局搜索&lt;/h2&gt;&lt;p&gt;&lt;code&gt;command&lt;/code&gt;+&lt;code&gt;shift&lt;/code&gt;+&lt;code&gt;F&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;选择相同内容&quot;&gt;&lt;a href=&quot;#选择相同内容&quot; class=&quot;headerlink&quot; title=&quot;选择相同内容&quot;&gt;&lt;/a&gt;选择相同内容&lt;/h2&gt;&lt;p&gt;选中一部分内容后，&lt;code&gt;command&lt;/code&gt;+&lt;code&gt;D&lt;/code&gt;可以选中相同内容。&lt;br&gt;配合&lt;code&gt;command&lt;/code&gt;+&lt;code&gt;-&amp;gt;&lt;/code&gt;或者&lt;code&gt;command&lt;/code&gt;+&lt;code&gt;&amp;lt;-&lt;/code&gt;，可以完成很多批量修改操作，比如print变log，比如print下面一行添加log。&lt;/p&gt;
&lt;h2 id=&quot;同列多行编辑&quot;&gt;&lt;a href=&quot;#同列多行编辑&quot; class=&quot;headerlink&quot; title=&quot;同列多行编辑&quot;&gt;&lt;/a&gt;同列多行编辑&lt;/h2&gt;&lt;p&gt;&lt;code&gt;command&lt;/code&gt;+&lt;code&gt;option&lt;/code&gt;+&lt;code&gt;↑↓&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;sulime中&lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;shift&lt;/code&gt;+&lt;code&gt;↑↓&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;自动补全函数返回值&quot;&gt;&lt;a href=&quot;#自动补全函数返回值&quot; class=&quot;headerlink&quot; title=&quot;自动补全函数返回值&quot;&gt;&lt;/a&gt;自动补全函数返回值&lt;/h2&gt;&lt;h2 id=&quot;函数跳转&quot;&gt;&lt;a href=&quot;#函数跳转&quot; class=&quot;headerlink&quot; title=&quot;函数跳转&quot;&gt;&lt;/a&gt;函数跳转&lt;/h2&gt;&lt;p&gt;&lt;code&gt;command&lt;/code&gt; + 点击：跳转函数定义，或跳转函数引用&lt;br&gt;&lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;-&lt;/code&gt;：跳回之前位置&lt;/p&gt;
&lt;h2 id=&quot;代码格式化&quot;&gt;&lt;a href=&quot;#代码格式化&quot; class=&quot;headerlink&quot; title=&quot;代码格式化&quot;&gt;&lt;/a&gt;代码格式化&lt;/h2&gt;&lt;p&gt;&lt;code&gt;option&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;F&lt;/code&gt;&lt;br&gt;对于Python代码，第一次执行会提示安装autopep8，安装即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/git/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="git" scheme="https://www.voidking.com/tags/git/"/>
    
      <category term="vscode" scheme="https://www.voidking.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>macos挂载阿里云盘当做本地盘</title>
    <link href="https://www.voidking.com/hobby-macos-mount-aliyundrive/"/>
    <id>https://www.voidking.com/hobby-macos-mount-aliyundrive/</id>
    <published>2022-02-06T00:00:00.000Z</published>
    <updated>2022-02-06T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相比于百度云盘，阿里云盘还不够成熟，很多功能还不完善，但是最大的优点是不限速，不限速，不限速！<br>为了更方便地使用阿里云盘，本文研究一下阿里云盘挂载到本地macos系统的方法。<br>参考文档：</p><ul><li><a href="https://github.com/zxbu/webdav-aliyundriver" target="_blank" rel="noopener">webdav-aliyundriver</a></li><li><a href="https://blog.csdn.net/zhao_888CSDN/article/details/120021843" target="_blank" rel="noopener">mac挂载阿里云盘</a></li></ul><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先通过webdav协议把阿里云盘变成本地文件服务器，然后通过mac挂载工具挂载本地文件服务器，当做本地磁盘使用。</p><p>其中webdav协议是基于Web的分布式创作和版本控制协议（Web-based Distributed Authoring and Versioning），它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可对Web Server直接读写，还可以支持文件的版本控制。</p><p><a href="https://github.com/zxbu/webdav-aliyundriver" target="_blank" rel="noopener">webdav-aliyundriver</a>这个工具实现了阿里云盘的webdav协议，可以用来把阿里云盘变成本地文件服务器。</p><p><a href="https://cloudmounter.net/" target="_blank" rel="noopener">CloudMounter</a>这个工具可以用来挂载文件服务器当做本地磁盘。</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="获取阿里云token"><a href="#获取阿里云token" class="headerlink" title="获取阿里云token"></a>获取阿里云token</h2><p>1、登录<a href="https://www.aliyundrive.com/" target="_blank" rel="noopener">阿里云盘网页版</a></p><p>2、F12 -&gt; Application -&gt; Storage -&gt; Local Storage -&gt; token -&gt; refresh_token<br><img src="https://cdn.voidking.com/@/imgs/macos-mount-aliyundrive/token.png?imageView2/0/w/700" alt=""></p><h2 id="启动本地文件服务器"><a href="#启动本地文件服务器" class="headerlink" title="启动本地文件服务器"></a>启动本地文件服务器</h2><p>1、下载<a href="https://github.com/zxbu/webdav-aliyundriver/releases/latest" target="_blank" rel="noopener">webdav-aliyundriver.jar</a>。</p><p>2、启动阿里云盘为本地文件服务器<br><code>java -jar webdav-aliyundriver.jar --aliyundrive.refresh-token=&quot;your refreshToken&quot;</code><br><img src="https://cdn.voidking.com/@/imgs/macos-mount-aliyundrive/webdav.png?imageView2/0/w/700" alt=""></p><p>3、测试访问<br>浏览器访问 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> ，输入用户名和密码就可以看到云盘里的文件了。其中用户名和密码都是admin。</p><h2 id="挂载本地文件服务器"><a href="#挂载本地文件服务器" class="headerlink" title="挂载本地文件服务器"></a>挂载本地文件服务器</h2><p>1、下载安装<a href="https://xclient.info/s/cloudmounter.html" target="_blank" rel="noopener">CloudMounter破解版</a>（有条件的同学还是要支持正版啊）</p><p>2、打开CloudMounter，选择WebDAV。填入名称、WebDAV URL、用户名和密码。<br><img src="https://cdn.voidking.com/@/imgs/macos-mount-aliyundrive/cloudmounter.png?imageView2/0/w/600" alt=""></p><p>3、然后，就可以在macos系统中愉快地使用阿里云盘了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;相比于百度云盘，阿里云盘还不够成熟，很多功能还不完善，但是最大的优点是不限速，不限速，不限速！&lt;br&gt;为了更方便地使用阿里云盘，本文研究一下阿里云盘挂载到本地macos系统的方法。&lt;br&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zxbu/webdav-aliyundriver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webdav-aliyundriver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zhao_888CSDN/article/details/120021843&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mac挂载阿里云盘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Airflow入门篇</title>
    <link href="https://www.voidking.com/dev-airflow-start/"/>
    <id>https://www.voidking.com/dev-airflow-start/</id>
    <published>2021-11-28T00:00:00.000Z</published>
    <updated>2022-04-04T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Airflow是啥？"><a href="#Airflow是啥？" class="headerlink" title="Airflow是啥？"></a>Airflow是啥？</h1><blockquote><p>Airflow is a platform to programmatically author, schedule and monitor workflows.<br>Airflow 是一个以编程方式创作、安排和监控工作流的平台。</p></blockquote><ul><li>Airflow 可以将工作流编排为任务的有向无环图 (DAG)。 </li><li>Airflow 调度器调度任务在一组work上执行，同时满足指定的依赖项。</li><li>Airflow 拥有大量的命令行工具，可以轻松在DAG上执行复杂的操作。</li><li>Airflow 界面友好，管道、进度、问题一目了然。</li></ul><p>更多内容参考<a href="https://airflow.apache.org/docs/apache-airflow/stable/index.html" target="_blank" rel="noopener">Airflow官方文档</a></p><a id="more"></a><h1 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h1><p>安装配置airflow，主要参考<a href="https://airflow.apache.org/docs/apache-airflow/stable/start/local.html" target="_blank" rel="noopener">Airflow本地快速运行</a>和<a href="https://airflow.apache.org/docs/apache-airflow/stable/installation/index.html" target="_blank" rel="noopener">Airflow Installation</a>。</p><p>前置条件：安装配置好python3.6，详情参考<a href="https://www.voidking.com/hobby-macos-settings/">MacOS设置</a>。</p><p>1、安装airflow</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install "apache-airflow[celery]==2.0.0" --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.0.0/constraints-3.6.txt"</span><br></pre></td></tr></table></figure><p>2、初始化</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">airflow db init</span><br><span class="line">airflow<span class="built_in"> users </span>create \</span><br><span class="line">    --username admin \</span><br><span class="line">    --firstname Peter \</span><br><span class="line">    --lastname Parker \</span><br><span class="line">    --role Admin \</span><br><span class="line">    --email spiderman@superhero.org</span><br></pre></td></tr></table></figure><p>默认安装目录为 /Users/voidking/airflow，如果要指定安装目录的话，可以在执行初始化命令前配置 AIRFLOW_HOME 变量。</p><h1 id="启停Airflow"><a href="#启停Airflow" class="headerlink" title="启停Airflow"></a>启停Airflow</h1><p>1、启动airflow</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">airflow webserver -D  # 启动web</span><br><span class="line">airflow scheduler -D  # 启动调度器</span><br></pre></td></tr></table></figure><p>2、停止airflow，参考<a href="https://aprilyoungs.github.io/blog/2021/03/24/bd-airflow" target="_blank" rel="noopener">Airflow任务调度系统</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止airflow webserver</span></span><br><span class="line">ps -ef | grep 'airflow' | grep 'webserver' | awk '&#123;print $2&#125;' | xargs kill -9 </span><br><span class="line">cd $AIRFLOW_HOME  </span><br><span class="line">rm -rf airflow-webserver.pid</span><br><span class="line">rm -rf airflow-webserver-monitor.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止airflow scheduler  </span></span><br><span class="line">ps -ef | grep 'airflow' | grep 'scheduler' | awk '&#123;print $2&#125;' | xargs kill -9  </span><br><span class="line">cd $AIRFLOW_HOME  </span><br><span class="line">rm -rf airflow-scheduler.pid</span><br></pre></td></tr></table></figure><p>3、封装一个启停脚本<br><a href="https://github.com/voidking/scripts/tree/main/shell/airflow" target="_blank" rel="noopener">脚本链接</a></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow dags list</span><br></pre></td></tr></table></figure><h1 id="实用配置"><a href="#实用配置" class="headerlink" title="实用配置"></a>实用配置</h1><p>修改airflow.cfg：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定dags目录</span></span><br><span class="line"><span class="attr">dags_folder</span> = /Users/voidking/airflow/dags</span><br><span class="line"></span><br><span class="line"><span class="comment"># dags目录扫描时间间隔</span></span><br><span class="line"><span class="attr">dag_dir_list_interval</span> = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用api请求</span></span><br><span class="line"><span class="attr">auth_backend</span> = airflow.api.auth.backend.basic_auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志路径和日志文件名</span></span><br><span class="line"><span class="attr">log_filename_template</span> = &#123;&#123; ti.dag_id &#125;&#125;/&#123;&#123; ti.task_id &#125;&#125;.log</span><br></pre></td></tr></table></figure><p>更多内容参考<a href="https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html" target="_blank" rel="noopener">Configuration Reference</a>。</p><h1 id="Hello-DAGs"><a href="#Hello-DAGs" class="headerlink" title="Hello DAGs"></a>Hello DAGs</h1><p>1、启动airflow<br>启动airflow webserver和airflow scheduler，然后访问<a href="http://localhost:8080" target="_blank" rel="noopener">本地8080端口</a>，看到airflow管理页面<br><img src="https://cdn.voidking.com/@/imgs/airflow-start/index.png?imageView2/0/w/800" alt=""></p><p>2、编写dags脚本<br>编写第一个dags脚本，命名为 hello.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> DAG</span><br><span class="line"><span class="keyword">from</span> airflow.operators.bash <span class="keyword">import</span> BashOperator</span><br><span class="line"></span><br><span class="line">default_args = &#123;</span><br><span class="line">    <span class="string">'owner'</span>: <span class="string">'airflow'</span>,</span><br><span class="line">    <span class="string">'depends_on_past'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'email'</span>: [<span class="string">'airflow@example.com'</span>],</span><br><span class="line">    <span class="string">'email_on_failure'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'email_on_retry'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'retries'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'retry_delay'</span>: datetime.timedelta(minutes=<span class="number">5</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dag = DAG(</span><br><span class="line">    dag_id=<span class="string">'hello'</span>,</span><br><span class="line">    default_args=default_args,</span><br><span class="line">    description=<span class="string">'The first DAG'</span>,</span><br><span class="line">    catchup=<span class="literal">False</span>,</span><br><span class="line">    schedule_interval=<span class="literal">None</span>,</span><br><span class="line">    start_date=datetime.datetime(<span class="number">2021</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    tags=[<span class="string">'example'</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">t1 = BashOperator(</span><br><span class="line">    task_id=<span class="string">'print_hello'</span>,</span><br><span class="line">    bash_command=<span class="string">'echo "Hello dags!"'</span>,</span><br><span class="line">    dag=dag</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">t2 = BashOperator(</span><br><span class="line">    task_id=<span class="string">'print_hello_again'</span>,</span><br><span class="line">    bash_command=<span class="string">'echo "Hello dags again!"'</span>,</span><br><span class="line">    dag=dag</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">t1 &gt;&gt; t2</span><br></pre></td></tr></table></figure><p>简单测试dags脚本：<code>python hello.py</code></p><p>3、dags脚本放入到airflow dags目录<br>hello.py 放入 /Users/voidking/airflow/dags 目录（或者创建软链），使airflow可以扫描读取到它（前提是启动scheduler）。<br>注意，新建的dags任务并不会马上出现在界面上，默认需要5分钟。<br>如果页面头部出现报错信息，请按照提示修改dags脚本。</p><p>另外，dags脚本也可以放入到 /Users/voidking/.pyenv/versions/3.6.4/lib/python3.6/site-packages/airflow/example_dags/ 目录，和示例脚本放到一起。</p><p>4、触发运行<br><img src="https://cdn.voidking.com/@/imgs/airflow-start/trigger.png?imageView2/0/w/800" alt=""><br><img src="https://cdn.voidking.com/@/imgs/airflow-start/trigger2.png?imageView2/0/w/600" alt=""><br>这里的传参为空，因为不需要额外参数。</p><p>5、查看执行日志<br>点击查看hello的<a href="http://localhost:8080/tree?dag_id=hello" target="_blank" rel="noopener">dags详情</a>，查看执行日志。<br><img src="https://cdn.voidking.com/@/imgs/airflow-start/detail.png?imageView2/0/w/700" alt=""><br><img src="https://cdn.voidking.com/@/imgs/airflow-start/log.png?imageView2/0/w/600" alt=""><br>以上，第一个dags脚本运行完成。</p><h1 id="重跑任务"><a href="#重跑任务" class="headerlink" title="重跑任务"></a>重跑任务</h1><p>1、进入<a href="http://localhost:8080/tree?dag_id=hello" target="_blank" rel="noopener">dags详情页面</a></p><p>2、点击需要重跑的task的小方块</p><p>3、点击Clear或者Run，重跑任务<br><img src="https://cdn.voidking.com/@/imgs/airflow-start/rerun.png?imageView2/0/w/700" alt=""></p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>tutorial.py详解、传参、接口调用<br>airflow + django</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Airflow是啥？&quot;&gt;&lt;a href=&quot;#Airflow是啥？&quot; class=&quot;headerlink&quot; title=&quot;Airflow是啥？&quot;&gt;&lt;/a&gt;Airflow是啥？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Airflow is a platform to programmatically author, schedule and monitor workflows.&lt;br&gt;Airflow 是一个以编程方式创作、安排和监控工作流的平台。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Airflow 可以将工作流编排为任务的有向无环图 (DAG)。 &lt;/li&gt;
&lt;li&gt;Airflow 调度器调度任务在一组work上执行，同时满足指定的依赖项。&lt;/li&gt;
&lt;li&gt;Airflow 拥有大量的命令行工具，可以轻松在DAG上执行复杂的操作。&lt;/li&gt;
&lt;li&gt;Airflow 界面友好，管道、进度、问题一目了然。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/stable/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Airflow官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python小技巧</title>
    <link href="https://www.voidking.com/dev-python-tricks/"/>
    <id>https://www.voidking.com/dev-python-tricks/</id>
    <published>2021-11-07T12:00:00.000Z</published>
    <updated>2022-04-17T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法检查"><a href="#语法检查" class="headerlink" title="语法检查"></a>语法检查</h1><p><a href="https://www.pylint.org/" target="_blank" rel="noopener">pylint</a> 是一个能够检查Python编码质量、编码规范的工具。它分析 Python 代码中的错误，查找不符合代码风格标准（Pylint 默认使用的代码风格是 PEP 8）和有潜在问题的代码。</p><p>个人认为正确性比风格更加重要，不妨大材小用，执行脚本之前，都使用pylint进行语法检查一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pylint</span><br><span class="line">pylint test.py</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="导入自定义模块"><a href="#导入自定义模块" class="headerlink" title="导入自定义模块"></a>导入自定义模块</h1><h2 id="全局导入"><a href="#全局导入" class="headerlink" title="全局导入"></a>全局导入</h2><p>自己新建了一个模块，怎样让它可以被全局引用？答：导入自定义模块。<br>具体操作方法：<br>1、进入 xxx/python3/lib/python3.6/site-packages 目录<br>2、新建 yyy.pth 文件，写入自定义模块的路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/home/</span>voidking<span class="regexp">/scripts/</span>vktools<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>详情参考<a href="https://blog.csdn.net/yuezhuo_752/article/details/95632014" target="_blank" rel="noopener">python之使用.pth文件导入自定义模块</a></p><h2 id="指定文件导入"><a href="#指定文件导入" class="headerlink" title="指定文件导入"></a>指定文件导入</h2><p>自己新建了一个模块a，路径不同的情况下，怎样让它被模块b引用？答：使用 sys.path.append 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sys.path.remove('/path/to/a')</span></span><br><span class="line">sys.path.append(<span class="string">'/path/to/a'</span>)</span><br></pre></td></tr></table></figure><h1 id="获取脚本路径"><a href="#获取脚本路径" class="headerlink" title="获取脚本路径"></a>获取脚本路径</h1><p>已知路径：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path</span><br><span class="line">└── <span class="keyword">module</span><span class="number">_</span>a</span><br><span class="line">    ├── getpath.py</span><br><span class="line">    └── <span class="keyword">module</span><span class="number">_</span>b</span><br><span class="line">        └── getpath.py</span><br></pre></td></tr></table></figure><p>getpath.py脚本内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> module_b <span class="keyword">import</span> getpath</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_path</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'os.getcwd() is <span class="subst">&#123;os.getcwd()&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'sys.path[0] is <span class="subst">&#123;sys.path[<span class="number">0</span>]&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'sys.argv[0] is <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'__file__ is <span class="subst">&#123;__file__&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'os.path.dirname(__file__) is <span class="subst">&#123;os.path.dirname(__file__)&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'os.path.abspath(__file__) is <span class="subst">&#123;os.path.abspath(__file__)&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'os.path.realpath(__file__) is <span class="subst">&#123;os.path.realpath(__file__)&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'os.path.split(os.path.realpath(__file__))[0] is <span class="subst">&#123;os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------ module_a/getpath.py ------'</span>)</span><br><span class="line">print_path()</span><br><span class="line">print(<span class="string">'---------------------------------'</span>)</span><br><span class="line">print(<span class="string">'------ module_a/module_b/getpath.py ------'</span>)</span><br><span class="line">getpath.print_path()</span><br><span class="line">print(<span class="string">'------------------------------------------'</span>)</span><br></pre></td></tr></table></figure><p>在path目录中执行脚本<code>python module_a/getpath.py</code> ，得到结果为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------ module_a/getpath.py ------</span></span><br><span class="line">os.getcwd() <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span></span><br><span class="line">sys.path[<span class="number">0</span>] <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a</span><br><span class="line">sys.argv[<span class="number">0</span>] <span class="keyword">is</span> module_a/getpath.py</span><br><span class="line">__file__ <span class="keyword">is</span> module_a/getpath.py</span><br><span class="line">os.path.dirname(__file__) <span class="keyword">is</span> module_a</span><br><span class="line">os.path.abspath(__file__) <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a/getpath.py</span><br><span class="line">os.path.realpath(__file__) <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a/getpath.py</span><br><span class="line">os.path.split(os.path.realpath(__file__))[<span class="number">0</span>] <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a</span><br><span class="line"><span class="comment">---------------------------------</span></span><br><span class="line"><span class="comment">------ module_a/module_b/getpath.py ------</span></span><br><span class="line">os.getcwd() <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span></span><br><span class="line">sys.path[<span class="number">0</span>] <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a</span><br><span class="line">sys.argv[<span class="number">0</span>] <span class="keyword">is</span> module_a/getpath.py</span><br><span class="line">__file__ <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a/module_b/getpath.py</span><br><span class="line">os.path.dirname(__file__) <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a/module_b</span><br><span class="line">os.path.abspath(__file__) <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a/module_b/getpath.py</span><br><span class="line">os.path.realpath(__file__) <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a/module_b/getpath.py</span><br><span class="line">os.path.split(os.path.realpath(__file__))[<span class="number">0</span>] <span class="keyword">is</span> /Users/vk/tmp/<span class="type">path</span>/module_a/module_b</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br></pre></td></tr></table></figure><p>由实验结果，可以得出如下结论。</p><h2 id="获取执行命令的绝对路径"><a href="#获取执行命令的绝对路径" class="headerlink" title="获取执行命令的绝对路径"></a>获取执行命令的绝对路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><h2 id="获取入口脚本的父绝对路径"><a href="#获取入口脚本的父绝对路径" class="headerlink" title="获取入口脚本的父绝对路径"></a>获取入口脚本的父绝对路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="获取执行脚本的绝对路劲"><a href="#获取执行脚本的绝对路劲" class="headerlink" title="获取执行脚本的绝对路劲"></a>获取执行脚本的绝对路劲</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.path.abspath(__file__)</span><br><span class="line">os.path.realpath(__file__)</span><br></pre></td></tr></table></figure><h2 id="获取执行脚本的父绝对路径"><a href="#获取执行脚本的父绝对路径" class="headerlink" title="获取执行脚本的父绝对路径"></a>获取执行脚本的父绝对路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="获取文件-目录的父路径"><a href="#获取文件-目录的父路径" class="headerlink" title="获取文件/目录的父路径"></a>获取文件/目录的父路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.dirname(__file__)</span><br></pre></td></tr></table></figure><h1 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h1><p>在指定目录中，根据文件前缀查找文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_files_by_prefix</span><span class="params">(prefix, dir_path)</span>:</span></span><br><span class="line">    file_list = list()</span><br><span class="line">    file_pattern = os.path.join(dir_path, <span class="string">'&#123;&#125;*'</span>.format(prefix))</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> glob.glob(file_pattern):</span><br><span class="line">        file_list.append(f)</span><br><span class="line">    <span class="keyword">return</span> file_list</span><br></pre></td></tr></table></figure><h1 id="删除目录和文件"><a href="#删除目录和文件" class="headerlink" title="删除目录和文件"></a>删除目录和文件</h1><p>封装几个简单函数，删除目录和文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除空目录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_dir</span><span class="params">(dir_path)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dir_path):</span><br><span class="line">        os.removedirs(dir_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_file</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        os.remove(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录和文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_dir_and_file</span><span class="params">(dir_path)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dir_path):</span><br><span class="line">        shutil.rmtree(dir_path)</span><br></pre></td></tr></table></figure><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p><a href="https://docs.python.org/zh-cn/3/library/unittest.html" target="_blank" rel="noopener">unittest</a>是一个Python单元测试框架。它受到 JUnit 的启发，与其他语言中的主流单元测试框架有着相似的风格。其支持测试自动化，配置共享和关机代码测试。支持将测试样例聚合到测试集中，并将测试与报告框架独立。</p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>新建一个 tests/test_demo.py 脚本，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStringMethods</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_upper</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(<span class="string">'foo'</span>.upper(), <span class="string">'FOO'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_isupper</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertTrue(<span class="string">'FOO'</span>.isupper())</span><br><span class="line">        self.assertFalse(<span class="string">'Foo'</span>.isupper())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_split</span><span class="params">(self)</span>:</span></span><br><span class="line">        s = <span class="string">'hello world'</span></span><br><span class="line">        self.assertEqual(s.split(), [<span class="string">'hello'</span>, <span class="string">'world'</span>])</span><br><span class="line">        <span class="comment"># check that s.split fails when the separator is not a string</span></span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(TypeError):</span><br><span class="line">            s.split(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>继承 unittest.TestCase 就创建了一个测试样例。上述三个独立的测试是三个类的方法，这些方法的命名都以 test 开头。 这个命名约定告诉测试运行者类的哪些方法表示测试。</p><p>每个测试的关键是：调用 assertEqual() 来检查预期的输出； 调用 assertTrue() 或 assertFalse() 来验证一个条件；调用 assertRaises() 来验证抛出了一个特定的异常。</p><p>通过 setUp() 和 tearDown() 方法，可以设置测试开始前与完成后需要执行的指令。</p><p>最后的代码块中，演示了运行测试的一个简单的方法。 unittest.main() 提供了一个测试脚本的命令行接口。</p><h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>方法一：脚本级别调用（直接运行脚本）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python tests/test_demo.py</span><br><span class="line">python tests/test_demo.py -v</span><br><span class="line">python -m unittest tests/test_demo.py</span><br></pre></td></tr></table></figure><p>方法二：包、模块、类和方法级别调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 包级别调用（进入tests目录查找所有test_*.py文件并运行）</span></span><br><span class="line">python -m unittest discover -s tests -p "test_*.py"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 模块级别调用</span></span><br><span class="line">python -m unittest tests.test_demo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 类级别调用</span></span><br><span class="line">python -m unittest tests.test_demo.TestStringMethods</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法级别调用</span></span><br><span class="line">python -m unittest tests.test_demo.TestStringMethods.test_upper</span><br></pre></td></tr></table></figure><h2 id="单元测试之mock"><a href="#单元测试之mock" class="headerlink" title="单元测试之mock"></a>单元测试之mock</h2><p>单元测试时，如果涉及网络请求，建议使用mock模块来模拟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> mock</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_system</span><span class="params">(method: str, url: str, data=&#123;&#125;)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.request(method=method, url=url, headers=headers, data=json.dumps(data))</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username: str, password: str)</span>:</span></span><br><span class="line">    <span class="comment"># 以下接口暂时访问不通</span></span><br><span class="line">    LOGIN_URL=<span class="string">'http://127.0.0.1/login'</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'username'</span>: username,</span><br><span class="line">        <span class="string">'password'</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">    response = request_system(<span class="string">'POST'</span>, LOGIN_URL)</span><br><span class="line">    <span class="keyword">if</span> response.status == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> json.loads(response.text)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMockMethods</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_request_system</span><span class="params">(self)</span>:</span></span><br><span class="line">        mock_response = mock.Mock()</span><br><span class="line">        mock_response.status_code = <span class="number">200</span></span><br><span class="line">        mock_response.text = json.dumps(&#123;<span class="string">"code"</span>: <span class="number">0</span>, <span class="string">"msg"</span>:<span class="string">"success"</span>&#125;)</span><br><span class="line">        request_system = mock.Mock(return_value=mock_response)</span><br><span class="line"></span><br><span class="line">        response = request_system(method=<span class="string">'POST'</span>,url=<span class="string">'http://127.0.0.1/'</span>)</span><br><span class="line">        print(response.status_code)</span><br><span class="line">        print(response.text)</span><br><span class="line">        self.assertEqual(<span class="number">200</span>, response.status_code)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        login = mock.Mock(return_value=&#123;<span class="string">"code"</span>: <span class="number">0</span>, <span class="string">"msg"</span>:<span class="string">"success"</span>&#125;)</span><br><span class="line">        data = login(username=<span class="string">'voidking'</span>,password=<span class="string">'voidking'</span>)</span><br><span class="line">        print(data)</span><br><span class="line">        self.assertEqual(<span class="number">0</span>, data.get(<span class="string">'code'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>这种模拟测试方式很巧妙，适合测试访问第三方接口，但是并不会真正发出请求。<br>另一个问题来了，Python怎么测试自己的接口？不知道。<br>想到以前使用Beego框架进行开发，它的单元测试就很巧妙，先在测试数据库插入数据，然后通过beego.BeeApp.Handlers.ServeHTTP(w, r)把自己临时启动起来，最后自己的单元测试调用自己的接口。<br>其中的关键在于把自己启动起来，理论上Python也能做到。</p><h1 id="url特殊字符转义"><a href="#url特殊字符转义" class="headerlink" title="url特殊字符转义"></a>url特殊字符转义</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">labelselector = parse.quote(<span class="string">'app_id=voidking,env in (test,online)'</span>)</span><br><span class="line">url = <span class="string">f'https://www.voidking.com?labelselector=<span class="subst">&#123;labelselector&#125;</span>'</span></span><br></pre></td></tr></table></figure><p>特殊字符对应url编码表：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">空格 : %20</span><br><span class="line">" : %22</span><br><span class="line"># : %23</span><br><span class="line">% : %25</span><br><span class="line">&amp; : %26</span><br><span class="line">( : %28</span><br><span class="line">) : %29</span><br><span class="line">+ : %2B</span><br><span class="line">, : %2C</span><br><span class="line">/ : %2F</span><br><span class="line"><span class="meta">: :</span> %3A</span><br><span class="line">; : %3B</span><br><span class="line">&lt; : %3C</span><br><span class="line"><span class="section">= : %3D</span></span><br><span class="line">&gt; : %3E</span><br><span class="line">? : %3F</span><br><span class="line">@ : %40</span><br><span class="line">\ : %5C</span><br><span class="line">| : %7C</span><br></pre></td></tr></table></figure><h1 id="函数重试"><a href="#函数重试" class="headerlink" title="函数重试"></a>函数重试</h1><p>函数重试，我们可以通过循环多次调用实现，也可以使用retrying包。</p><h2 id="任意异常重试"><a href="#任意异常重试" class="headerlink" title="任意异常重试"></a>任意异常重试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(stop_max_attempt_number=3, wait_random_min=1000, wait_random_max=3000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'run'</span>)</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>当函数run抛出任意异常时，则进行重试。</p><ul><li>stop_max_attempt_number：最大重试次数</li><li>wait_random_min：最小重试间隔</li><li>wait_random_max：最大重试间隔</li></ul><p>注意函数内不要使用try except，否则异常就被函数自己捕获处理了，不会抛给retry。</p><h2 id="指定异常重试"><a href="#指定异常重试" class="headerlink" title="指定异常重试"></a>指定异常重试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">if_value_error</span><span class="params">(exception)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> isinstance(exception, ValueError)</span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(retry_on_exception=if_value_error, stop_max_attempt_number=3, wait_random_min=1000, wait_random_max=3000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    value = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    msg = <span class="string">f'value is <span class="subst">&#123;value&#125;</span>'</span></span><br><span class="line">    print(msg)</span><br><span class="line">    <span class="keyword">if</span> value &lt;= <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'value is too small!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'value is too large!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>当函数run抛出ValueError异常时，则进行重试；抛出Exception异常时，不会重试。</p><h2 id="指定返回值重试"><a href="#指定返回值重试" class="headerlink" title="指定返回值重试"></a>指定返回值重试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">if_return_small</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> value &lt;= <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(retry_on_result=if_return_small, stop_max_attempt_number=3, wait_random_min=1000, wait_random_max=3000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    value = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    msg = <span class="string">f'value is <span class="subst">&#123;value&#125;</span>'</span></span><br><span class="line">    print(msg)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>当函数run返回值小于5时，进行重试。</p><h2 id="多次重试后容忍异常"><a href="#多次重试后容忍异常" class="headerlink" title="多次重试后容忍异常"></a>多次重试后容忍异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(stop_max_attempt_number=3, wait_random_min=1000, wait_random_max=3000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'run'</span>)</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'run2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br><span class="line">    run2()</span><br></pre></td></tr></table></figure><p>当函数run抛出任意异常时，则进行重试。重试指定次数后，程序就异常结束了。这时，如果我们想要容忍异常，让run2可以正常运行，该怎么办呢？很简单，给run函数包裹一个try except即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(wrap_exception=True,stop_max_attempt_number=3, wait_random_min=1000, wait_random_max=3000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'run'</span>)</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap_run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        run()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'run2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    wrap_run()</span><br><span class="line">    run2()</span><br></pre></td></tr></table></figure><h1 id="操作mysql数据库"><a href="#操作mysql数据库" class="headerlink" title="操作mysql数据库"></a>操作mysql数据库</h1><p>python操作mysql数据库，是经常遇到的需求，下面整理一下具体操作方法。</p><h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> vkphp <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> vkphp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>更多内容参考<a href="https://www.voidking.com/dev-docker-mysql/">《使用Docker安装配置Mysql》</a>和<a href="https://www.voidking.com/dev-mysql-command/">《MySQL常用命令》</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><code>pip3 install mysqlclient==1.3.13</code></p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line">db = MySQLdb.connect(host=<span class="string">"localhost"</span>, </span><br><span class="line">                    port=<span class="string">"3306"</span>,</span><br><span class="line">                    user=<span class="string">"root"</span>, </span><br><span class="line">                    password=<span class="string">"voidking"</span>, </span><br><span class="line">                    database=<span class="string">"vkphp"</span>, </span><br><span class="line">                    charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用cursor()方法获取操作游标 </span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># SQL 插入语句</span></span><br><span class="line">sql = <span class="string">"insert into `user` (`name`,`password`) values('haojin','voidking');"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="comment"># 执行sql语句</span></span><br><span class="line">   cursor.execute(sql)</span><br><span class="line">   <span class="comment"># 提交到数据库执行</span></span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   <span class="comment"># 发生错误时回滚</span></span><br><span class="line">   db.rollback()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭数据库连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>其他操作参考<a href="https://www.runoob.com/python/python-mysql.html" target="_blank" rel="noopener">Python 操作 MySQL 数据库</a>。</p><h1 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h1><p>一些情况下，在安装python时没有默认安装pip，这时就需要手动安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方法一：</span></span><br><span class="line">python -m ensurepip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法二：</span></span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://docs.python.org/3.6/" target="_blank" rel="noopener">Python官方文档</a></li><li><a href="https://docs.python.org/zh-cn/3.6/download.html" target="_blank" rel="noopener">Python官方文档下载</a></li><li><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Python官方文档下载-chm格式</a></li><li><a href="https://magic.iswbm.com/" target="_blank" rel="noopener">Python黑魔法手册</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Python Cookbook 3rd Edition Documentation</a></li><li><a href="https://www.kancloud.cn/kancloud/google-style-guide/43289" target="_blank" rel="noopener">Google Python风格指南</a></li><li><a href="https://docs.python.org/zh-cn/3/library/unittest.html" target="_blank" rel="noopener">unittest - 单元测试框架</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;语法检查&quot;&gt;&lt;a href=&quot;#语法检查&quot; class=&quot;headerlink&quot; title=&quot;语法检查&quot;&gt;&lt;/a&gt;语法检查&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.pylint.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pylint&lt;/a&gt; 是一个能够检查Python编码质量、编码规范的工具。它分析 Python 代码中的错误，查找不符合代码风格标准（Pylint 默认使用的代码风格是 PEP 8）和有潜在问题的代码。&lt;/p&gt;
&lt;p&gt;个人认为正确性比风格更加重要，不妨大材小用，执行脚本之前，都使用pylint进行语法检查一下。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pylint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pylint test.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="测试" scheme="https://www.voidking.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python打印日志</title>
    <link href="https://www.voidking.com/dev-python-log/"/>
    <id>https://www.voidking.com/dev-python-log/</id>
    <published>2021-11-07T12:00:00.000Z</published>
    <updated>2022-03-28T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="输出日志到控制台"><a href="#输出日志到控制台" class="headerlink" title="输出日志到控制台"></a>输出日志到控制台</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">log = logging.getLogger(__name__)</span><br><span class="line">log.setLevel(logging.DEBUG)</span><br><span class="line">log.addHandler(logging.StreamHandler(sys.stdout)) <span class="comment">#默认sys.error</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'print info level log to console'</span>)</span><br></pre></td></tr></table></figure><h1 id="输出日志到文件"><a href="#输出日志到文件" class="headerlink" title="输出日志到文件"></a>输出日志到文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">log = logging.getLogger(__name__)</span><br><span class="line">log.setLevel(logging.DEBUG)</span><br><span class="line">log.addHandler(logging.FileHandler(<span class="string">'python.log'</span>))</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'print info level log to file'</span>)</span><br></pre></td></tr></table></figure><p>日志文件默认存储到执行命令的路径下，可以通过使用绝对路径来指定日志文件路径。</p><h1 id="封装日志模块"><a href="#封装日志模块" class="headerlink" title="封装日志模块"></a>封装日志模块</h1><p>1、封装一个日志模块 log.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_log</span><span class="params">(log_path, level=logging.INFO, when=<span class="string">"D"</span>, backup=<span class="number">7</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             format=<span class="string">"%(levelname)s: %(asctime)s: %(filename)s:%(lineno)d * %(thread)d %(message)s"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             datefmt=<span class="string">"%m-%d %H:%M:%S"</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    init_log - initialize log module</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">    log_path - Log file path prefix.</span></span><br><span class="line"><span class="string">    Log data will go to two files: log_path.log and log_path.log.wf</span></span><br><span class="line"><span class="string">    Any non-exist parent directories will be created automatically</span></span><br><span class="line"><span class="string">    level - msg above the level will be displayed</span></span><br><span class="line"><span class="string">    DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</span></span><br><span class="line"><span class="string">    the default value is logging.INFO</span></span><br><span class="line"><span class="string">    when - how to split the log file by time interval</span></span><br><span class="line"><span class="string">    'S' : Seconds</span></span><br><span class="line"><span class="string">    'M' : Minutes</span></span><br><span class="line"><span class="string">    'H' : Hours</span></span><br><span class="line"><span class="string">    'D' : Days</span></span><br><span class="line"><span class="string">    'W' : Week day</span></span><br><span class="line"><span class="string">    default value: 'D'</span></span><br><span class="line"><span class="string">    format - format of the log</span></span><br><span class="line"><span class="string">    default format:</span></span><br><span class="line"><span class="string">    %(levelname)s: %(asctime)s: %(filename)s:%(lineno)d * %(thread)d %(message)s</span></span><br><span class="line"><span class="string">    INFO: 12-09 18:02:42: log.py:40 * 139814749787872 HELLO WORLD</span></span><br><span class="line"><span class="string">    backup - how many backup file to keep</span></span><br><span class="line"><span class="string">    default value: 7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">    OSError: fail to create log directories</span></span><br><span class="line"><span class="string">    IOError: fail to open log file</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    formatter = logging.Formatter(format, datefmt)</span><br><span class="line">    logger = logging.getLogger()</span><br><span class="line">    logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    dir = os.path.dirname(log_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dir):</span><br><span class="line">        os.makedirs(dir)</span><br><span class="line"></span><br><span class="line">    handler = logging.handlers.TimedRotatingFileHandler(log_path + <span class="string">".log"</span>,</span><br><span class="line">                                                        when=when,</span><br><span class="line">                                                        backupCount=backup)</span><br><span class="line">    handler.setLevel(level)</span><br><span class="line">    handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">    handler = logging.handlers.TimedRotatingFileHandler(log_path + <span class="string">".log.wf"</span>,</span><br><span class="line">                                                        when=when,</span><br><span class="line">                                                        backupCount=backup)</span><br><span class="line">    handler.setLevel(logging.WARNING)</span><br><span class="line">    handler.setFormatter(formatter)</span><br><span class="line">    logger.addHandler(handler)</span><br></pre></td></tr></table></figure><p>2、使用日志模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> log</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VKTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.info(<span class="string">'print info level log to file'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 日志保存到./log/vk.log和./log/vk.log.wf，按天切割，保留7天</span></span><br><span class="line">    log.init_log(<span class="string">"./log/vk"</span>)</span><br><span class="line">    logging.info(<span class="string">"程序启动!!!"</span>)</span><br><span class="line"></span><br><span class="line">    vk = VKTest()</span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">"程序结束!!!"</span>)</span><br></pre></td></tr></table></figure><p>执行脚本后，日志内容会输出到 log/vk.log 中。</p><h1 id="封装日志模块2-0"><a href="#封装日志模块2-0" class="headerlink" title="封装日志模块2.0"></a>封装日志模块2.0</h1><p>1、封装一个日志模块 log.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line">DEFAULT_LOG_PATH = <span class="string">'./log/'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 logfile_name=<span class="string">'default'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 log_path=DEFAULT_LOG_PATH,</span></span></span><br><span class="line"><span class="function"><span class="params">                 level=logging.INFO,</span></span></span><br><span class="line"><span class="function"><span class="params">                 when=<span class="string">"D"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 backup=<span class="number">7</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 format=<span class="string">"%(levelname)s: %(asctime)s: %(filename)s:%(lineno)d * %(thread)d %(message)s"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 datefmt=<span class="string">"%m-%d %H:%M:%S"</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        init_log - initialize log module</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">        log_path - Log file path prefix.</span></span><br><span class="line"><span class="string">        Log data will go to two files: log_path.log and log_path.log.wf</span></span><br><span class="line"><span class="string">        Any non-exist parent directories will be created automatically</span></span><br><span class="line"><span class="string">        level - msg above the level will be displayed</span></span><br><span class="line"><span class="string">        DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</span></span><br><span class="line"><span class="string">        the default value is logging.INFO</span></span><br><span class="line"><span class="string">        when - how to split the log file by time interval</span></span><br><span class="line"><span class="string">        'S' : Seconds</span></span><br><span class="line"><span class="string">        'M' : Minutes</span></span><br><span class="line"><span class="string">        'H' : Hours</span></span><br><span class="line"><span class="string">        'D' : Days</span></span><br><span class="line"><span class="string">        'W' : Week day</span></span><br><span class="line"><span class="string">        default value: 'D'</span></span><br><span class="line"><span class="string">        format - format of the log</span></span><br><span class="line"><span class="string">        default format:</span></span><br><span class="line"><span class="string">        %(levelname)s: %(asctime)s: %(filename)s:%(lineno)d * %(thread)d %(message)s</span></span><br><span class="line"><span class="string">        INFO: 12-09 18:02:42: log.py:40 * 139814749787872 HELLO WORLD</span></span><br><span class="line"><span class="string">        backup - how many backup file to keep</span></span><br><span class="line"><span class="string">        default value: 7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises:</span></span><br><span class="line"><span class="string">        OSError: fail to create log directories</span></span><br><span class="line"><span class="string">        IOError: fail to open log file</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        formatter = logging.Formatter(format, datefmt)</span><br><span class="line">        <span class="comment"># getLogger一定要传参，否则多次调用对象创建，得到的会是同一个logger对象</span></span><br><span class="line">        <span class="comment"># 后果就是相同的日志内容，会同时写到多个不同的日志文件中</span></span><br><span class="line">        self.logger = logging.getLogger(logfile_name)</span><br><span class="line">        self.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_path):</span><br><span class="line">            os.makedirs(log_path)</span><br><span class="line">            </span><br><span class="line">        common_log = os.path.join(log_path, logfile_name + <span class="string">".log"</span>)</span><br><span class="line">        handler = logging.handlers.TimedRotatingFileHandler(common_log,</span><br><span class="line">                                                            when=when,</span><br><span class="line">                                                            backupCount=backup)</span><br><span class="line">        handler.setLevel(level)</span><br><span class="line">        handler.setFormatter(formatter)</span><br><span class="line">        self.logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">        wf_log = os.path.join(log_path, logfile_name + <span class="string">".log.wf"</span>)</span><br><span class="line">        handler = logging.handlers.TimedRotatingFileHandler(wf_log,</span><br><span class="line">                                                            when=when,</span><br><span class="line">                                                            backupCount=backup)</span><br><span class="line">        handler.setLevel(logging.WARNING)</span><br><span class="line">        handler.setFormatter(formatter)</span><br><span class="line">        self.logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.logger</span><br></pre></td></tr></table></figure><p>2、使用日志模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存到./log/vk.log和./log/vk.log.wf，按天切割，保留7天</span></span><br><span class="line">logger = log.Log(logfile_name=<span class="string">'vk_test'</span>).get_logger()</span><br><span class="line">logger = log.Log(logfile_name=<span class="string">'vk'</span>).get_logger()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VKTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        logger.info(<span class="string">'print info level log to file'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    logger.info(<span class="string">"程序启动!!!"</span>)</span><br><span class="line">    vk = VKTest()</span><br><span class="line">    logger.info(<span class="string">"程序结束!!!"</span>)</span><br></pre></td></tr></table></figure><p>执行脚本后，日志内容会输出到 log/vk.log 中。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://magic.iswbm.com/" target="_blank" rel="noopener">Python黑魔法手册</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Python Cookbook 3rd Edition Documentation</a></li><li><a href="https://www.kancloud.cn/kancloud/google-style-guide/43289" target="_blank" rel="noopener">Google Python风格指南</a></li><li><a href="https://docs.python.org/zh-cn/3/library/unittest.html" target="_blank" rel="noopener">unittest - 单元测试框架</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;输出日志到控制台&quot;&gt;&lt;a href=&quot;#输出日志到控制台&quot; class=&quot;headerlink&quot; title=&quot;输出日志到控制台&quot;&gt;&lt;/a&gt;输出日志到控制台&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MacOS安装Minikube</title>
    <link href="https://www.voidking.com/dev-macos-minikube/"/>
    <id>https://www.voidking.com/dev-macos-minikube/</id>
    <published>2021-11-02T07:00:00.000Z</published>
    <updated>2021-12-18T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Minikube是在个人计算机上的虚拟机中运行单节点Kubernetes集群的工具。<br><a href="https://www.voidking.com/dev-k8s-start/">《K8S入门篇》</a>一文中，在Windows系统中安装过Minikube。本文中，我们来学习一下在MacOS系统中安装Minikube。<br>主要参考<a href="https://mp.weixin.qq.com/s/wGtlo2prJ3RYelAC1u95Wg" target="_blank" rel="noopener">再见Docker Desktop，你好 Minikube！</a>。</p><a id="more"></a><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="卸载Docker-Desktop"><a href="#卸载Docker-Desktop" class="headerlink" title="卸载Docker Desktop"></a>卸载Docker Desktop</h2><p>卸载Docker Desktop，包括Docker Client、Docker Daemon、Hyperkit等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall docker</span><br></pre></td></tr></table></figure><p>PS：Docker Desktop安装方法参考<a href="https://www.voidking.com/hobby-macos-settings/">《MacOS设置》</a>。</p><h2 id="安装Docker-Client"><a href="#安装Docker-Client" class="headerlink" title="安装Docker Client"></a>安装Docker Client</h2><p>Docker Client是一个客户端，用于和Docker Daemon进行交互。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="安装Kubectl"><a href="#安装Kubectl" class="headerlink" title="安装Kubectl"></a>安装Kubectl</h2><p>Kubectl是一个客户端，用于和K8S ApiServer进行交互。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectl</span><br></pre></td></tr></table></figure><h2 id="安装Hyperkit"><a href="#安装Hyperkit" class="headerlink" title="安装Hyperkit"></a>安装Hyperkit</h2><p>Hyperkit是一种MacOS上的虚拟化工具包，提供Hypervisor（虚拟机监视器，VMM）的能力，使虚拟机可以使用宿主机的资源进行计算。hyper是超级的意思，比super还要高级。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install hyperkit</span><br><span class="line">hyperkid -v</span><br></pre></td></tr></table></figure><h2 id="安装Minikube"><a href="#安装Minikube" class="headerlink" title="安装Minikube"></a>安装Minikube</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install minikube</span><br></pre></td></tr></table></figure><h2 id="设定minikube参数"><a href="#设定minikube参数" class="headerlink" title="设定minikube参数"></a>设定minikube参数</h2><p>设置CPU和内存的限制。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minikube config set cpus 3</span><br><span class="line">minikube config set memory 6g</span><br></pre></td></tr></table></figure><h2 id="启动Minikube"><a href="#启动Minikube" class="headerlink" title="启动Minikube"></a>启动Minikube</h2><p>启动Minikube，部署一个k8s集群。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --kubernetes-version=v1.19.14 --driver=hyperkit --container-runtime=docker</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>–kubernetes-version 指定K8S版本。</li><li>–driver 指定虚拟化驱动程序，比如hyperkit、multipass、virtualbox、parallels等。</li><li>–container-runtime 指定容器运行时，比如docker、containerd、cri-o等。</li></ul><h2 id="查看k8s集群"><a href="#查看k8s集群" class="headerlink" title="查看k8s集群"></a>查看k8s集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minikube kubectl get nodes</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h2 id="设置docker环境变量"><a href="#设置docker环境变量" class="headerlink" title="设置docker环境变量"></a>设置docker环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval $(minikube docker-env)</span><br></pre></td></tr></table></figure><p>以上，Minikube安装完成，也可以正常使用Docker。但是，Docker的使用依赖Minikube的启动，这有点坑啊！能不能不启动Minikube，只启动Docker Daemon呢？可以的，使用multipass。之所以不使用virtualbox，是因为virtualbox使用virtualbox驱动，而不是hyperkit。</p><h1 id="安装和使用multipass"><a href="#安装和使用multipass" class="headerlink" title="安装和使用multipass"></a>安装和使用multipass</h1><p>multipass 是一个轻量虚拟机管理器，是由Ubuntu运营公司Canonical所推出的开源项目。运行环境支持Linux、Windows、macOS，在Linux上使用的是KVM、Window上使用Hyper-V、macOS中使用HyperKit以最小开销运行VM。支持在笔记本模拟小型云。<br>更多内容参考<a href="https://multipass.run/" target="_blank" rel="noopener">Multipass官网</a>。</p><h2 id="安装multipass"><a href="#安装multipass" class="headerlink" title="安装multipass"></a>安装multipass</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install multipass</span><br></pre></td></tr></table></figure><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>创建一个ubuntu 18.04虚拟机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipass find</span><br><span class="line">multipass launch -n ubuntu18 -c 1 -m 2G -d 10G 18.04</span><br></pre></td></tr></table></figure><h2 id="启停虚拟机"><a href="#启停虚拟机" class="headerlink" title="启停虚拟机"></a>启停虚拟机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multipass list</span><br><span class="line">multipass stop ubuntu18</span><br><span class="line">multipass start ubuntu18</span><br></pre></td></tr></table></figure><h2 id="删除虚拟机"><a href="#删除虚拟机" class="headerlink" title="删除虚拟机"></a>删除虚拟机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipass delete ubuntu18</span><br><span class="line">multipass purge ubuntu18</span><br></pre></td></tr></table></figure><h2 id="使用虚拟机"><a href="#使用虚拟机" class="headerlink" title="使用虚拟机"></a>使用虚拟机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipass exec ubuntu18 -- lsb_release -a</span><br><span class="line">multipass shell ubuntu18</span><br></pre></td></tr></table></figure><h1 id="安装和使用Docker"><a href="#安装和使用Docker" class="headerlink" title="安装和使用Docker"></a>安装和使用Docker</h1><p>在虚拟机中，安装Docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">snap install docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><p>需要注意的是，使用snap安装的docker，只在用户目录下拥有读写权限。</p><p>比如这个命令是会报错的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-mysql -d \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /opt/data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=voidking \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><p>报错为：<br>docker: Error response from daemon: error while creating mount source path ‘/opt/data/mysql’: mkdir /opt/data: read-only file system.</p><p>可以改成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-mysql -d \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /home/work/data/mysql:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=voidking \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><p>或者卸载snap安装的docker，使用其他方式重新安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Minikube是在个人计算机上的虚拟机中运行单节点Kubernetes集群的工具。&lt;br&gt;&lt;a href=&quot;https://www.voidking.com/dev-k8s-start/&quot;&gt;《K8S入门篇》&lt;/a&gt;一文中，在Windows系统中安装过Minikube。本文中，我们来学习一下在MacOS系统中安装Minikube。&lt;br&gt;主要参考&lt;a href=&quot;https://mp.weixin.qq.com/s/wGtlo2prJ3RYelAC1u95Wg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;再见Docker Desktop，你好 Minikube！&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo环境搭建2021年8月版</title>
    <link href="https://www.voidking.com/dev-hexo-build-environment-2021-08/"/>
    <id>https://www.voidking.com/dev-hexo-build-environment-2021-08/</id>
    <published>2021-08-21T13:00:00.000Z</published>
    <updated>2021-08-22T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>15年的时候，写了一篇<a href="http://www.voidking.com/dev-hexo-build-environment/">《Hexo环境搭建》</a>，记录了hexo的详细安装部署步骤。18年的时候，写了一篇<a href="https://www.voidking.com/dev-hexo-build-environment-2018-05/">《Hexo环境搭建2018年5月版》</a>，对安装方法和步骤进行了更新。转眼又过了三年，今天再整理一版hexo环境搭建的流程，与时俱进。</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>系统环境：MACOS</p><p>安装brew、git、nvm、node，具体安装方法可以参考<a href="https://www.voidking.com/hobby-macos-settings/">《MacOS设置》</a>。</p><p>其中，node版本选择 v12.22.5</p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>1、切换国内源<br><code>npm config set registry=&quot;https://registry.npm.taobao.org&quot;</code></p><p>2、安装hexo</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g hexo</span></span><br><span class="line"><span class="attr">which</span> <span class="string">hexo</span></span><br></pre></td></tr></table></figure><p>3、初始化<br>新建hexo目录，并安装依赖包。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">init hexo</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install --force</span></span><br></pre></td></tr></table></figure><p>4、测试<br><code>hexo g</code>，<code>hexo s</code>，然后查看 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><p><code>npm install hexo-generator-feed --save</code>，</p><p>注意，后面的参数<code>--save</code>绝对不能省，否则该插件信息不会写入package.json。<br><code>hexo clean</code>，<code>hexo g</code>，查看public文件夹，可以看到atom.xml文件。</p><h2 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>如果报错：gyp: No Xcode or CLT version detected!<br>可以忽略它，也可以通过重装xcode-select解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --print-path</span><br><span class="line">sudo rm -r -f /Library/Developer/CommandLineTools</span><br><span class="line">sudo xcode-select --install</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p><code>hexo clean</code>，<code>hexo g</code>，查看public文件夹，可以看到sitemap.xml和baidusitemap.xml文件。<br>sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。具体参考<a href="http://www.voidking.com/dev-hexo-sitemap/">《hexo生成sitemap》</a>。</p><h2 id="支持本地搜索"><a href="#支持本地搜索" class="headerlink" title="支持本地搜索"></a>支持本地搜索</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>需要配合<code>_config.yml</code>配置和主题配置，详情参考<a href="https://www.voidking.com/dev-hexo-theme-next/">《Hexo更换主题为Next》</a>。</p><h2 id="支持git部署"><a href="#支持git部署" class="headerlink" title="支持git部署"></a>支持git部署</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>进入hexo/themes目录，下载自己维护的next主题<br><code>git clone https://github.com/voidking/hexo-theme-next.git next</code></p><p>该主题的更多个性化设置，可以参考<a href="https://www.voidking.com/dev-hexo-theme-next/">《Hexo更换主题为Next》</a>。</p><h1 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="config.yml配置"></a>config.yml配置</h1><p>hexo目录中的_config.yml修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">好好学习的郝</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">好好学习，天天向上！</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">学而不思则罔，思而不学则殆！</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">好好学习的郝</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://www.voidking.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'*.html'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">yearly:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">monthly:</span> <span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">category_generator:</span> </span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># local search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">striptags</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment"># github and gitee</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://voidking.com/voidking/voidking.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>1、在<a href="https://github.com/" target="_blank" rel="noopener">github</a>上注册一个帐号。</p><p>2、新建一个项目，和帐号名相同。</p><p>3、项目启动Pages服务。</p><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>1、生成本地代码<br><code>hexo g</code></p><p>2、本地测试<br><code>hexo s</code>，然后访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>3、发布到github<br><code>hexo d</code></p><p>4、线上测试<br><a href="http://voidking.github.io" target="_blank" rel="noopener">http://voidking.github.io</a></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>1、申请域名。</p><p>2、域名解析添加CNAME记录指向<code>voidking.github.io</code>。</p><p>3、voidking.github.io项目中添加CNAME文件，绑定域名。</p><p>4、测试访问。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上，hexo安装部署完成。有些步骤写的比较简单，不理解的可以自行谷歌百度。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;15年的时候，写了一篇&lt;a href=&quot;http://www.voidking.com/dev-hexo-build-environment/&quot;&gt;《Hexo环境搭建》&lt;/a&gt;，记录了hexo的详细安装部署步骤。18年的时候，写了一篇&lt;a href=&quot;https://www.voidking.com/dev-hexo-build-environment-2018-05/&quot;&gt;《Hexo环境搭建2018年5月版》&lt;/a&gt;，对安装方法和步骤进行了更新。转眼又过了三年，今天再整理一版hexo环境搭建的流程，与时俱进。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="node" scheme="https://www.voidking.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI失效</title>
    <link href="https://www.voidking.com/dev-hexo-travis-ci-not-work-anymore/"/>
    <id>https://www.voidking.com/dev-hexo-travis-ci-not-work-anymore/</id>
    <published>2021-08-08T09:30:00.000Z</published>
    <updated>2021-08-08T09:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>2021年8月8日，趁着周末空闲修改了一些文章，然后发了新版。但是，发现网站没有更新。<br>看看邮件，没有收到travis ci的邮件，再仔细想想，貌似好久没有收到travis ci的邮件了。<br>登录<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>查看构建记录，好家伙，上次构建还是5月份的！问题大了！</p><p>到底是怎么回事？Travis CI有bug不能用了？GitHub封杀了Travis CI？Travis CI规则改了，开源项目也有构建次数限制？…不知道具体什么原因，本文我们就来排查一下。</p><a id="more"></a><h1 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h1><p>1、登录<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a></p><p>2、点击 voidking/hexo-deploy 项目，点击右上角 More options，点击 Trigger build 进行手动触发构建<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/options.png?imageView2/0/w/700" alt=""></p><p>3、Branch 保持默认 master ，CUSTOM COMMIT MESSAGE 输入随意内容，CUSTOM CONFIG 不填<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/trigger.png?imageView2/0/w/600" alt=""></p><p>4、点击 Trigger custom build，就看到了具体的报错了<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/error.png?imageView2/0/w/700" alt=""><br>弹框提示 Oh no! You tried to trigger a build for voidking/hexo-deploy but the request was rejected.<br>Requests Tab页提示 Could not authorize build request for voidking/hexo-deploy.<br>从5月7日至今，一直是这个错误。</p><h1 id="猜想和验证"><a href="#猜想和验证" class="headerlink" title="猜想和验证"></a>猜想和验证</h1><h2 id="Travis-CI授权过期了？"><a href="#Travis-CI授权过期了？" class="headerlink" title="Travis CI授权过期了？"></a>Travis CI授权过期了？</h2><p>根据报错信息，很容易联想到授权过期，因为之前还好好的，突然不能用了。</p><p>1、进入GitHub <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>页面，配置Travis CI。<br>2、检查了一遍，并没有授权过期一说，没有什么问题。<br>3、保险起见，调整了一下 Repository access ，保存。<br>然而问题并没有解决，说明不是授权过期问题。</p><h2 id="缺少-travis-yml-？"><a href="#缺少-travis-yml-？" class="headerlink" title="缺少 .travis.yml ？"></a>缺少 .travis.yml ？</h2><p><a href="https://travis-ci.community/t/oh-no-you-tried-to-trigger-a-build-for-orgname-project-but-the-request-was-rejected/10657" target="_blank" rel="noopener">Travis CI论坛</a>上有人是因为缺少 .travis.yml 文件导致。</p><blockquote><p>In your case, it’s due to a missing .travis.yml.</p></blockquote><p>怀疑自己也是误删了 .travis.yml 文件，但是检查了一遍，并没有误删。</p><h2 id="需要换免费版？"><a href="#需要换免费版？" class="headerlink" title="需要换免费版？"></a>需要换免费版？</h2><p><a href="https://travis-ci.community/t/oh-no-you-tried-to-trigger-a-build-for-orgname-project-but-the-request-was-rejected/10657" target="_blank" rel="noopener">Travis CI论坛</a>上还有人没有找到原因，最终换了Github Actions。</p><blockquote><p>I kept struggling on this, and finally left <a href="https://travis-ci.com/" target="_blank" rel="noopener">travis.com</a> for <a href="https://docs.github.com/en/actions/" target="_blank" rel="noopener">Github Actions</a> :persevere: Now I can build &amp; deploy again </p></blockquote><p>如果非换不可的话，我打算换成<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI免费版</a>，毕竟更加熟悉。但是工作量很大，很多地方都需要重新配置。我不信需要这么麻烦！</p><h2 id="需要加入组织？"><a href="#需要加入组织？" class="headerlink" title="需要加入组织？"></a>需要加入组织？</h2><p><a href="https://stackoverflow.com/questions/41034694/travis-could-not-authorize-build-request/41078031" target="_blank" rel="noopener">stackoverflow</a>上有人说需要为组织选择一个plan，莫非现在必须要加入组织才能使用Travis CI？</p><blockquote><p>It’s also worth mentioning that this happens if you do not have a plan selected for your organization. First, you need to select a plan (Travis does not automatically select the free plan for you). Then, you can trigger a build and see if things work.</p></blockquote><blockquote><p>If that does not work, you’re likely out of builds and will need to upgrade the account.</p></blockquote><p>于是，创建了一个<a href="https://github.com/settings/organizations" target="_blank" rel="noopener">Organizations</a>：<a href="https://github.com/begoodcoder" target="_blank" rel="noopener">begoodcoder</a>。<br>然而创建组织后并没有解决问题。PS：个人感觉组织和个人账号的区别，主要是组织可以创建团队。</p><h2 id="Plan-Plan-Plan"><a href="#Plan-Plan-Plan" class="headerlink" title="Plan! Plan! Plan!"></a>Plan! Plan! Plan!</h2><p><a href="https://stackoverflow.com/questions/41034694/travis-could-not-authorize-build-request/41078031" target="_blank" rel="noopener">stackoverflow</a>上有多个优质回答提到了Plan，这个Plan是个啥？</p><blockquote><p>‘Could not authorize build request …’ usually occurs due to</p><ol><li>Has not activated either a free plan or a paid plan.</li><li>Expiration of the subscription.</li><li>Ran out of free trial build credits available for private repositories.<br>Travis CI is always-free only for public repositories. The free plan also provides 10,000 build credits try out building private repositories. Read updated info on <a href="https://docs.travis-ci.com/user/billing-faq" target="_blank" rel="noopener">Billing FAQ</a>.</li></ol></blockquote><p>1、Travis CI右上角点击账号，选择<a href="https://travis-ci.com/account/repositories" target="_blank" rel="noopener">Settings</a></p><p>2、点击页面上的<a href="https://travis-ci.com/account/plan" target="_blank" rel="noopener">Plan</a><br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/plan.png?imageView2/0/w/700" alt=""></p><p>3、选择<a href="https://travis-ci.com/account/plan?billingStep=1" target="_blank" rel="noopener">Free plan</a><br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/select.png?imageView2/0/w/700" alt=""></p><p>4、再次手动触发配送，成功！<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/success.png?imageView2/0/w/700" alt=""></p><p>以上，Travis CI失效的问题就定位并解决了，需要选择一个Plan！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;2021年8月8日，趁着周末空闲修改了一些文章，然后发了新版。但是，发现网站没有更新。&lt;br&gt;看看邮件，没有收到travis ci的邮件，再仔细想想，貌似好久没有收到travis ci的邮件了。&lt;br&gt;登录&lt;a href=&quot;https://travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis CI&lt;/a&gt;查看构建记录，好家伙，上次构建还是5月份的！问题大了！&lt;/p&gt;
&lt;p&gt;到底是怎么回事？Travis CI有bug不能用了？GitHub封杀了Travis CI？Travis CI规则改了，开源项目也有构建次数限制？…不知道具体什么原因，本文我们就来排查一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
      <category term="CICD" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/CICD/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="cicd" scheme="https://www.voidking.com/tags/cicd/"/>
    
  </entry>
  
  <entry>
    <title>使用Python操作Excel表格</title>
    <link href="https://www.voidking.com/dev-python-excel/"/>
    <id>https://www.voidking.com/dev-python-excel/</id>
    <published>2021-08-07T00:00:00.000Z</published>
    <updated>2021-08-07T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近疫情又变得严重，多地都推迟了开学，改为上网课。这样一来，老师们就需要每次上完课后统计学生的出勤情况，包括未上课的同学和上课时间不足40分钟的同学。</p><p>为了方便我们家谭老师的统计工作，决定趁周末写一个脚本，把人工统计变成自动统计。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>1、选择excel读写模块，经过简单比较决定选择 xlrd 和 xlwt 。<br>2、已知学生没有重名，因此全体学生姓名作为集合A，上课学生作为集合B，上课满40分钟学生作为集合C。未上课学生为A-B，上课时间不足40分钟的学生为A-C-(A-B)。<br>3、因为两个班级需要分开统计，因此使用学生姓名作为dict的key，班级作为dict的value。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>1、安装依赖</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install xlrd==<span class="number">1.2</span><span class="number">.0</span></span><br><span class="line">pip3 install xlwt</span><br></pre></td></tr></table></figure><p>之所以指定xlrd的版本，是因为更高的版本不支持读取xlsx格式的表格。</p><p>2、代码实现<br><a href="https://github.com/voidking/scripts/tree/main/python3.9/count-skip-stu" target="_blank" rel="noopener">统计缺勤学生</a></p><p>3、代码执行<br><code>./main.py xxx.xlsx</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近疫情又变得严重，多地都推迟了开学，改为上网课。这样一来，老师们就需要每次上完课后统计学生的出勤情况，包括未上课的同学和上课时间不足40分钟的同学。&lt;/p&gt;
&lt;p&gt;为了方便我们家谭老师的统计工作，决定趁周末写一个脚本，把人工统计变成自动统计。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>修改 MP3 的 ID3Tags</title>
    <link href="https://www.voidking.com/dev-modify-mp3-id3tags/"/>
    <id>https://www.voidking.com/dev-modify-mp3-id3tags/</id>
    <published>2021-05-05T04:00:00.000Z</published>
    <updated>2021-05-05T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ID3Tags是啥？"><a href="#ID3Tags是啥？" class="headerlink" title="ID3Tags是啥？"></a>ID3Tags是啥？</h1><p>ID3Tags，简称 ID3 ，表示MP3文件曲目标签。<br>ID3位于一个mp3文件的开头或末尾的若干字节内，附加了关于该mp3的歌手，标题，专辑名称，年代，风格等信息，该信息就被称为ID3信息，ID3信息分为两个版本，v1和v2版。<br>其中v1版的ID3在mp3文件的末尾128字节，以TAG三个字符开头，后面跟上歌曲信息。v2版一般位于mp3的开头，可以存储歌词，该专辑的图片等大容量的信息。</p><p>ID3全称是啥？没有找到，懂得的小伙伴感谢留言告知。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>使用python第三方库，查看mp3当前id3tags，修改id3tags并保存。<br>找到了两个不错的python第三方库：</p><ul><li><a href="https://eyed3.readthedocs.io/en/latest/" target="_blank" rel="noopener">eyeD3 document</a></li><li><a href="https://mutagen.readthedocs.io/en/latest/" target="_blank" rel="noopener">Mutagen document</a></li></ul><p>这里选择eyeD3，因为使用更简单。<br>使用到的参数和方法，参考<a href="https://eyed3.readthedocs.io/en/latest/eyed3.id3.html#module-eyed3.id3.tag" target="_blank" rel="noopener">eyed3.id3</a>。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="安装eyeD3"><a href="#安装eyeD3" class="headerlink" title="安装eyeD3"></a>安装eyeD3</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> -<span class="keyword">m</span> pip install eyed3 -i http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple/</span><br></pre></td></tr></table></figure><h2 id="命令行查看id3"><a href="#命令行查看id3" class="headerlink" title="命令行查看id3"></a>命令行查看id3</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eyeD3</span> <span class="string">-h</span></span><br><span class="line"><span class="attr">eyeD3</span> <span class="string">song.mp3</span></span><br></pre></td></tr></table></figure><h2 id="脚本查看id3"><a href="#脚本查看id3" class="headerlink" title="脚本查看id3"></a>脚本查看id3</h2><p>使用python脚本查看所有mp3的id3信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> eyed3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_audio_paths</span><span class="params">(dir_path)</span>:</span></span><br><span class="line">    audio_paths = []</span><br><span class="line">    <span class="keyword">for</span> dirs, dirnames, files <span class="keyword">in</span> os.walk(dir_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">'.mp3'</span>):</span><br><span class="line">                audio_paths.append(dirs+<span class="string">'/'</span>+file)</span><br><span class="line">    <span class="keyword">return</span> audio_paths</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_id3</span><span class="params">(audio_path)</span>:</span></span><br><span class="line">    <span class="comment"># load 和 save 时会打印出 Invalid date: ???????:36903863 ，可忽略</span></span><br><span class="line">    audio = eyed3.load(audio_path)</span><br><span class="line">    audio_name = audio_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> audio.tag:</span><br><span class="line">        print(<span class="string">'------ '</span> + audio_name + <span class="string">' ------'</span>)</span><br><span class="line">        print(<span class="string">'不存在id3'</span>)</span><br><span class="line">        print(<span class="string">'------ '</span> + <span class="string">'------'</span> + <span class="string">' ------'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'------ '</span> + audio_name + <span class="string">' ------'</span>)</span><br><span class="line">        <span class="keyword">if</span> audio.tag.title:</span><br><span class="line">            print(<span class="string">'title: '</span> + audio.tag.title)</span><br><span class="line">        <span class="keyword">if</span> audio.tag.artist:</span><br><span class="line">            print(<span class="string">'artist: '</span> + audio.tag.artist)</span><br><span class="line">        print(<span class="string">'------ '</span> + <span class="string">'------'</span> + <span class="string">' ------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    audio_paths = get_audio_paths(<span class="string">'./mp3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示id3信息</span></span><br><span class="line">    <span class="keyword">for</span> audio_path <span class="keyword">in</span> audio_paths:</span><br><span class="line">        show_id3(audio_path)</span><br></pre></td></tr></table></figure><h2 id="脚本修改id3"><a href="#脚本修改id3" class="headerlink" title="脚本修改id3"></a>脚本修改id3</h2><p>需求：已有200个mp3文件，id3信息都是广告。现在想要批量清除mp3文件现有的id3，然后根据文件名修改title，根据真实作者修改artist，根据真实封面修改封面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_id3</span><span class="params">(audio_path, title, artist ,img_path)</span>:</span></span><br><span class="line">    audio = eyed3.load(audio_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> audio.tag:</span><br><span class="line">        audio.initTag()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        audio.tag.clear()</span><br><span class="line">    audio.tag.title = title</span><br><span class="line">    audio.tag.artist = artist</span><br><span class="line">    audio.tag.images.set(<span class="number">3</span>, open(img_path,<span class="string">'rb'</span>).read(), <span class="string">'image/jpeg'</span>)</span><br><span class="line">    audio.tag.save()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    audio_paths = get_audio_paths(<span class="string">'./mp3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改id3信息</span></span><br><span class="line">    <span class="keyword">for</span> audio_path <span class="keyword">in</span> audio_paths:</span><br><span class="line">        title = audio_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        artist = <span class="string">'钱文忠'</span></span><br><span class="line">        img_path = <span class="string">'./img.png'</span> <span class="comment"># 200x200</span></span><br><span class="line">        modify_id3(audio_path, title, artist ,img_path)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ID3Tags是啥？&quot;&gt;&lt;a href=&quot;#ID3Tags是啥？&quot; class=&quot;headerlink&quot; title=&quot;ID3Tags是啥？&quot;&gt;&lt;/a&gt;ID3Tags是啥？&lt;/h1&gt;&lt;p&gt;ID3Tags，简称 ID3 ，表示MP3文件曲目标签。&lt;br&gt;ID3位于一个mp3文件的开头或末尾的若干字节内，附加了关于该mp3的歌手，标题，专辑名称，年代，风格等信息，该信息就被称为ID3信息，ID3信息分为两个版本，v1和v2版。&lt;br&gt;其中v1版的ID3在mp3文件的末尾128字节，以TAG三个字符开头，后面跟上歌曲信息。v2版一般位于mp3的开头，可以存储歌词，该专辑的图片等大容量的信息。&lt;/p&gt;
&lt;p&gt;ID3全称是啥？没有找到，懂得的小伙伴感谢留言告知。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next主题显示文章更新时间</title>
    <link href="https://www.voidking.com/dev-hexo-next-update-time/"/>
    <id>https://www.voidking.com/dev-hexo-next-update-time/</id>
    <published>2021-05-01T01:00:00.000Z</published>
    <updated>2021-05-01T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><a href="https://www.voidking.com/dev-hexo-theme-next/">《Hexo更换主题为Next》</a>一文中，关闭了文章的更新时间。因为next主题默认是使用markdown文件的修改时间作为更新时间，这个时间是不符合预期的。比如我换了电脑，clone下来markdown文件，写完后发布，那么所有文章的更新时间都会变成当前时间，这个就不符合预期，就不对。</p><p>但是，文章更新时间确实是有意义的，读者能够通过更新时间推断出一篇文章的有效性。比如很多工具和技术昨天可以用，文章写的没毛病，但是也许今天就不能用了。</p><p>本文就来研究一下，怎样让next主题显示符合预期的、准确的更新时间。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先，我们知道next主题是支持显示更新时间的，只不过显示的更新时间不对。那么，能不能显示对的更新时间呢？看代码。</p><p>1、<code>_config.yml</code>，其中关于更新时间的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2、<code>layout/_macro/post.swig</code>，其中关于更新时间的部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.post_meta.updated_at.enable and datetime_diff %&#125;</span><br><span class="line">  &#123;%- set display_updated = not theme.post_meta.updated_at.another_day or theme.post_meta.updated_at.another_day and date_diff %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if display_updated or not theme.post_meta.created_at %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-calendar-check-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>&#123;&#123; __('post.edited') &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">time</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.modified') + __('symbol.colon') + full_date(post.updated) &#125;&#125;"</span> <span class="attr">itemprop</span>=<span class="string">"dateModified"</span> <span class="attr">datetime</span>=<span class="string">"&#123;&#123; moment(post.updated).format() &#125;&#125;"</span>&gt;</span>&#123;&#123; date(post.updated) &#125;&#125;<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>由上面的代码我们可以得知：</p><ul><li>只要在文章头部yaml定义中添加 updated 字段，就可以显示我们自己定义的更新时间，而不是文件的修改时间。</li><li>如果开启了 <code>post_meta.updated_at.another_day</code> ，当 date 和 updated 日期相同时，只会显示发布时间。</li></ul><p>因此，我们现在有两个思路来实现next主题显示符合预期的更新时间。<br>思路一：开启 <code>post_meta.updated_at.enable</code>，然后给所有的md文件添加 updated 字段。<br>思路二：开启 <code>post_meta.updated_at.enable</code>，修改 post.swig ，令没有 updated 字段的md文件只显示发布时间，有 updated 字段的md文件显示发布时间和更新时间。</p><p>这里选择思路一，因为实现的逻辑最简单，而且郝同学的shell脚本用的还不错。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="开启更新时间显示"><a href="#开启更新时间显示" class="headerlink" title="开启更新时间显示"></a>开启更新时间显示</h2><p><code>_config.yml</code>，开启更新时间显示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="添加updated字段"><a href="#添加updated字段" class="headerlink" title="添加updated字段"></a>添加updated字段</h2><p>1、准备脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">dir=<span class="string">"_posts"</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$&#123;dir&#125;</span> | grep <span class="string">'.md'</span>`;<span class="keyword">do</span></span><br><span class="line">    content=$(cat <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;file&#125;</span>| head -n 10 | grep <span class="string">'date: '</span>)</span><br><span class="line">    datestr=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$content</span>"</span> | awk <span class="string">'&#123;print $2" "$3&#125;'</span>)</span><br><span class="line">    newcontent=<span class="string">"updated: "</span><span class="variable">$datestr</span></span><br><span class="line">    sed -i <span class="string">"/<span class="variable">$content</span>/a\\<span class="variable">$newcontent</span>"</span> <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;file&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>2、执行脚本<br>把脚本放到 source 目录下，然后执行脚本 <code>bash modify.sh</code><br>备注：需要linux环境，mac环境的sed命令和linux环境的sed命令有差异。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-theme-next/&quot;&gt;《Hexo更换主题为Next》&lt;/a&gt;一文中，关闭了文章的更新时间。因为next主题默认是使用markdown文件的修改时间作为更新时间，这个时间是不符合预期的。比如我换了电脑，clone下来markdown文件，写完后发布，那么所有文章的更新时间都会变成当前时间，这个就不符合预期，就不对。&lt;/p&gt;
&lt;p&gt;但是，文章更新时间确实是有意义的，读者能够通过更新时间推断出一篇文章的有效性。比如很多工具和技术昨天可以用，文章写的没毛病，但是也许今天就不能用了。&lt;/p&gt;
&lt;p&gt;本文就来研究一下，怎样让next主题显示符合预期的、准确的更新时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI部署项目到服务器</title>
    <link href="https://www.voidking.com/dev-travis-ci-deploy-to-server/"/>
    <id>https://www.voidking.com/dev-travis-ci-deploy-to-server/</id>
    <published>2021-04-11T08:00:00.000Z</published>
    <updated>2021-08-22T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-hexo-travis-ci/">《Hexo配置Travis CI自动发布》</a>一文中，我们学习了使用travis-ci构建发布hexo项目的方法。</p><p>因为项目的特殊性，所以发布时只是把代码push到了git仓库，并没有把代码发布到我们自己的服务。本文，我们就来学习一下怎样通过travis-ci，把项目发布到我们自己的服务器。</p><p>需求：<br>已知hexo项目部署在github，百度抓取不到github的内容，因此我们想要在自己的服务器也部署一份代码，国内的流量打到自己的服务器。实现国内流量 -&gt; 阿里云服务器，国外流量 -&gt; github pages。<br>配置 hexo-deploy ，在发布时会同时发布静态页面到 <a href="https://github.com/voidking/voidking.github.io.git" target="_blank" rel="noopener">voidking.github.io</a> 和 <a href="https://gitee.com/voidking/voidking.git" target="_blank" rel="noopener">voidking</a>。<br>阿里云服务器上有项目 /opt/nginx/work/voidking ，项目仓库为 <a href="https://gitee.com/voidking/voidking.git" target="_blank" rel="noopener">voidking</a>。<br>现在想要实现的是，当使用 hexo-deploy 之后，阿里云服务器上的代码能够自动更新。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>给 voidking.github.io 项目配置travis-ci，当静态页面更新完成后，在阿里云服务器上执行 git pull。<br>中间需要解决的主要问题是： travis-ci 访问阿里云服务器的权限问题。</p><p>另外，因为 voidking.github.io 项目是线上项目，所以我们创建一个在github上和travis-ci上分别创建一个 travis-test 项目，用来测试travis-ci的配置。</p><h1 id="配置travis-ci"><a href="#配置travis-ci" class="headerlink" title="配置travis-ci"></a>配置travis-ci</h1><h2 id="服务器密钥配置"><a href="#服务器密钥配置" class="headerlink" title="服务器密钥配置"></a>服务器密钥配置</h2><p>1、创建一个用户专门用来更新代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m voidking -s /bin/bash</span><br><span class="line">passwd voidking</span><br><span class="line">chown voidking -R /opt/nginx/work/</span><br></pre></td></tr></table></figure><p>2、生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su voidking</span><br><span class="line">cd ~</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>执行完之后，.ssh目录下生成了 id_rsa 和 id_rsa.pub。</p><p>3、使密钥生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALI_IP="8.136.13.58"</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub voidking@$&#123;ALI_IP&#125;</span><br><span class="line">ssh voidking@$&#123;ALI_IP&#125;</span><br></pre></td></tr></table></figure><h2 id="安装travis-client"><a href="#安装travis-client" class="headerlink" title="安装travis client"></a>安装travis client</h2><p>直接安装travis破坏服务器环境，因此最好使用Docker安装travis。<br>1、运行travis容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull ruby:slim</span><br><span class="line">docker run --name travis -it -d ruby:slim /bin/bash</span><br><span class="line">docker exec -it travis /bin/bash</span><br></pre></td></tr></table></figure><p>2、容器内安装travis client</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span></span><br><span class="line">gem install travis</span><br><span class="line">travis -h</span><br></pre></td></tr></table></figure><h2 id="travis-ci密钥配置"><a href="#travis-ci密钥配置" class="headerlink" title="travis-ci密钥配置"></a>travis-ci密钥配置</h2><p>1、拷贝密钥到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/voidking/.ssh/id_rsa travis:/tmp</span><br><span class="line">docker exec -it travis /bin/bash</span><br></pre></td></tr></table></figure><p>2、登录travis-ci</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">travis login --com --github-token xxxxxx</span><br></pre></td></tr></table></figure><p>3、对id_rsa加密，生成id_rsa.enc；同时生成服务端解密命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch .travis.yml</span><br><span class="line">travis encrypt-file id_rsa --add --com --repo=voidking/travis-test</span><br></pre></td></tr></table></figure><p>详情参考<a href="https://docs.travis-ci.com/user/encrypting-files" target="_blank" rel="noopener">Encrypting Files</a>。</p><p>执行完命令，会生成加密文件 id_rsa.enc，.travis.yml 中会被写入解密命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K <span class="variable">$encrypted_f217180e22ee_key</span> -iv <span class="variable">$encrypted_f217180e22ee_iv</span> -<span class="keyword">in</span> id_rsa.<span class="keyword">enc</span> -<span class="keyword">out</span> id_rsa -<span class="keyword">d</span></span><br></pre></td></tr></table></figure><p>并且，变量 <code>encrypted_f217180e22ee_key</code> 和 <code>encrypted_f217180e22ee_iv</code> 会填入travis-ci上travis-test项目中的环境变量配置中。</p><h2 id="travis-yml配置"><a href="#travis-yml配置" class="headerlink" title="travis.yml配置"></a>travis.yml配置</h2><p>1、访问<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI Pro</a>，找到 travis-test 项目，Settings，在Environment Variables一栏填入Name为GITEE_TOKEN，VALUE为gitee的access token。</p><p>2、在github上 travis-test 项目中放入 id_rsa.enc</p><p>3、在github上 travis-test 项目中创建 .travis.yml，内容为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">3.6</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># build main branch only</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ALI_IP:</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GIT_USER:</span> <span class="string">voidking</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GITEE_PAGES_REPO:</span> <span class="string">gitee.com/voidking/voidking.git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_f217180e22ee_key</span> <span class="string">-iv</span> <span class="string">$encrypted_f217180e22ee_iv</span> <span class="string">-in</span> <span class="string">id_rsa.enc</span> <span class="string">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="string">-d</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh</span> <span class="string">voidking@$&#123;ALI_IP&#125;</span> <span class="string">"cd /opt/nginx/work/voidking/ &amp;&amp; git pull --force --quiet \"https://$&#123;GIT_USER&#125;:$&#123;GITEE_TOKEN&#125;@$&#123;GITEE_PAGES_REPO&#125;\" master:master"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">"deploy success"</span></span><br></pre></td></tr></table></figure><p>4、提交代码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commmit -m <span class="string">"添加travis.yml"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>5、验证<br>打开<a href="https://travis-ci.com/github/voidking/travis-test" target="_blank" rel="noopener">travis voidking/travis-test</a> ，可以看到脚本已经成功执行。<br><img src="http://cdn.voidking.com/@/imgs/travis-ci-deploy-to-server/success.png?imageView2/0/w/800" alt=""></p><p>登录阿里云服务器，git log查看代码版本，确实也已经更新到了最新版。nice！</p><p>最后，同样的步骤配置到 voidking.github.io 项目上即可。</p><h1 id="配置travis-ci简化版"><a href="#配置travis-ci简化版" class="headerlink" title="配置travis-ci简化版"></a>配置travis-ci简化版</h1><p>上面的流程，安全性较高，但是整个流程很麻烦，有没有更简单的办法？必须是有的。<br>方法一：安装sshpass，直接使用密码登录服务器执行命令。<br>方法二：把私钥作为参数配置到travis-ci，使用时写入到文件中。</p><p>本节中我们研究一下方法二的配置方法。</p><h2 id="服务器密钥配置-1"><a href="#服务器密钥配置-1" class="headerlink" title="服务器密钥配置"></a>服务器密钥配置</h2><p>1、创建一个用户专门用来更新代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m voidking -s /bin/bash</span><br><span class="line">passwd voidking</span><br><span class="line">chown voidking -R /opt/nginx/work/</span><br></pre></td></tr></table></figure><p>2、生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su voidking</span><br><span class="line">cd ~</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>执行完之后，.ssh目录下生成了 id_rsa 和 id_rsa.pub。</p><p>3、使密钥生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALI_IP="8.136.13.58"</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub voidking@$&#123;ALI_IP&#125;</span><br><span class="line">ssh voidking@$&#123;ALI_IP&#125;</span><br></pre></td></tr></table></figure><h2 id="travis-ci密钥配置-1"><a href="#travis-ci密钥配置-1" class="headerlink" title="travis-ci密钥配置"></a>travis-ci密钥配置</h2><p>1、加密私钥<br><code>cat .ssh/id_rsa | base64 | tr -d &#39;\n&#39;</code></p><p>2、访问<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI Pro</a>，找到 travis-test 项目，Settings，Environment Variables。创建两组环境变量：</p><ul><li>Name为<code>GITEE_TOKEN</code>，VALUE为gitee的access token。</li><li>Name为<code>ID_RSA</code>，VALUE为加密后的私钥。</li></ul><h2 id="travis-yml配置-1"><a href="#travis-yml配置-1" class="headerlink" title="travis.yml配置"></a>travis.yml配置</h2><p>1、在github上 travis-test 项目中创建 .travis.yml，内容为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">3.6</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># build main branch only</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ALI_IP:</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GIT_USER:</span> <span class="string">voidking</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GITEE_PAGES_REPO:</span> <span class="string">gitee.com/voidking/voidking.git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">$&#123;ID_RSA&#125;</span> <span class="string">|</span> <span class="string">base64</span> <span class="string">-d</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh</span> <span class="string">voidking@$&#123;ALI_IP&#125;</span> <span class="string">"cd /opt/nginx/work/voidking/ &amp;&amp; git pull --force --quiet \"https://$&#123;GIT_USER&#125;:$&#123;GITEE_TOKEN&#125;@$&#123;GITEE_PAGES_REPO&#125;\" master:master"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">"deploy success"</span></span><br></pre></td></tr></table></figure><p>2、提交代码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commmit -m <span class="string">"简化travis.yml"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>3、验证<br>打开<a href="https://travis-ci.com/github/voidking/travis-test" target="_blank" rel="noopener">travis voidking/travis-test</a> ，查看脚本执行日志。<br>登录阿里云服务器，git log查看代码版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-travis-ci/&quot;&gt;《Hexo配置Travis CI自动发布》&lt;/a&gt;一文中，我们学习了使用travis-ci构建发布hexo项目的方法。&lt;/p&gt;
&lt;p&gt;因为项目的特殊性，所以发布时只是把代码push到了git仓库，并没有把代码发布到我们自己的服务。本文，我们就来学习一下怎样通过travis-ci，把项目发布到我们自己的服务器。&lt;/p&gt;
&lt;p&gt;需求：&lt;br&gt;已知hexo项目部署在github，百度抓取不到github的内容，因此我们想要在自己的服务器也部署一份代码，国内的流量打到自己的服务器。实现国内流量 -&amp;gt; 阿里云服务器，国外流量 -&amp;gt; github pages。&lt;br&gt;配置 hexo-deploy ，在发布时会同时发布静态页面到 &lt;a href=&quot;https://github.com/voidking/voidking.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking.github.io&lt;/a&gt; 和 &lt;a href=&quot;https://gitee.com/voidking/voidking.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking&lt;/a&gt;。&lt;br&gt;阿里云服务器上有项目 /opt/nginx/work/voidking ，项目仓库为 &lt;a href=&quot;https://gitee.com/voidking/voidking.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking&lt;/a&gt;。&lt;br&gt;现在想要实现的是，当使用 hexo-deploy 之后，阿里云服务器上的代码能够自动更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
      <category term="CICD" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/CICD/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="cicd" scheme="https://www.voidking.com/tags/cicd/"/>
    
  </entry>
  
  <entry>
    <title>怎样给文件、变量和函数命名？</title>
    <link href="https://www.voidking.com/dev-how-to-name-better/"/>
    <id>https://www.voidking.com/dev-how-to-name-better/</id>
    <published>2021-03-07T12:00:00.000Z</published>
    <updated>2021-08-01T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用user_tool.py还是user_utils.py？使用name还是username？使用user_add还是add_user？使用get_user_by_name还是get_users_by_name？等等等等，在编程活动中，我们经常会产生各种关于命名的纠结。<br>给文件、函数、变量命名是一件很难的事，但是也是有方法的。本文中，我们就来学习一下文件、变量和函数命名的方法。</p><p>参考文档：</p><ul><li><a href="https://www.cnblogs.com/dolphin0520/p/10567879.html" target="_blank" rel="noopener">工程实践：给函数取一个”好”的名字</a></li><li><a href="https://github.com/zh-google-styleguide/zh-google-styleguide" target="_blank" rel="noopener">Google 开源项目风格指南 (中文版)</a></li><li><a href="https://leohxj.gitbooks.io/a-programmer-prepares/content/programmer-basic/naming.html" target="_blank" rel="noopener">命名规范</a></li></ul><h1 id="命名方法"><a href="#命名方法" class="headerlink" title="命名方法"></a>命名方法</h1><p>要领：一看就懂，保持一致。</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>由于Windows, OSX下文件名不区分大小写(linux是区分的)，所以命名建议还是以全部小写为主。<br>连字符可以使用中划线、下划线或者省略，关键是要统一。</p><p>目录建议连字符使用中划线，比如: my-project-name。<br>有复数的情况使用复数命名法，比如: scripts, styles, images和data-modules。<br>文件建议连字符使用下划线，比如：user_test.py。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量命名常用的有两种方式:<br>下划线命名法，比如: my_variable<br>驼峰式命名法，比如: myVariale</p><p>python语言建议使用下划线命名法。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数命名常用的有两种方式:<br>下划线命名法，比如: get_user_by_name<br>驼峰式命名法，比如: getUserByName</p><p>python语言建议使用下划线命名法。不同于变量命名的是，函数名称要使用动词开头，并且尽可能准确。</p><h1 id="常用动词表"><a href="#常用动词表" class="headerlink" title="常用动词表"></a>常用动词表</h1><p>动词选取要精准。通常来说，动词决定了一个函数要采取什么”动作”。动词取的好，一个函数名字已经成功了80%。</p><p>常用动词表：</p><table><thead><tr><th align="left">类别</th><th align="left">单词</th></tr></thead><tbody><tr><td align="left">添加/插入/创建/初始化/加载</td><td align="left">add、append、insert、create、initialize、load</td></tr><tr><td align="left">删除/销毁</td><td align="left">delete、remove、destroy、drop</td></tr><tr><td align="left">打开/开始/启动</td><td align="left">open、start</td></tr><tr><td align="left">关闭/停止</td><td align="left">close、stop</td></tr><tr><td align="left">获取/读取/查找/查询</td><td align="left">get、fetch、acquire、read、search、find、query</td></tr><tr><td align="left">设置/重置/放入/写入/释放/刷新</td><td align="left">set、reset、put、write、release、refresh</td></tr><tr><td align="left">发送/推送</td><td align="left">send、push</td></tr><tr><td align="left">接收/拉取</td><td align="left">receive、pull</td></tr><tr><td align="left">提交/撤销/取消</td><td align="left">submit、cancel</td></tr><tr><td align="left">收集/采集/选取/选择</td><td align="left">collect、pick、select</td></tr><tr><td align="left">提取/解析</td><td align="left">sub、extract、parse</td></tr><tr><td align="left">编码/解码</td><td align="left">encode、decode</td></tr><tr><td align="left">填充/打包/压缩</td><td align="left">fill、pack、compress</td></tr><tr><td align="left">清空/拆包/解压</td><td align="left">flush、clear、unpack、decompress</td></tr><tr><td align="left">增加/减少</td><td align="left">increase、decrease、reduce</td></tr><tr><td align="left">分隔/拼接</td><td align="left">split、join、concat</td></tr><tr><td align="left">过滤/校验/检测</td><td align="left">filter、valid、check</td></tr></tbody></table><h1 id="常用领域词"><a href="#常用领域词" class="headerlink" title="常用领域词"></a>常用领域词</h1><p>名词使用领域词汇。举个例子：集合的容量通常用capacity、集合实际元素个数用size、字符串长度用length，这种就遵循大家的使用习惯，不要用size去形如字符串的长度。</p><p>再比如，假如使用到建造者模式，那么通常会用build作为函数名字，这个时候就不要另辟蹊径，用create来作为函数名字，使用大家约定俗成的命名习惯更容易让你的代码被别人读懂。</p><p>常用名词表：</p><table><thead><tr><th align="left">类别</th><th align="left">单词</th></tr></thead><tbody><tr><td align="left">容量/大小/长度</td><td align="left">capacity、size、length</td></tr><tr><td align="left">实例/上下文</td><td align="left">instance、context</td></tr><tr><td align="left">配置</td><td align="left">config、settings</td></tr><tr><td align="left">头部/前面/前一个/第一个</td><td align="left">header、front、previous、first</td></tr><tr><td align="left">尾部/后面/后一个/最后一个</td><td align="left">tail、back、next、last</td></tr><tr><td align="left">区间/区域/某一部分/范围/规模</td><td align="left">range、interval、region、area、section、scope、scale</td></tr><tr><td align="left">缓存/缓冲/会话</td><td align="left">cache、buffer、session</td></tr><tr><td align="left">本地/局部/全局</td><td align="left">local、global</td></tr><tr><td align="left">成员/元素</td><td align="left">member、element</td></tr><tr><td align="left">菜单/列表</td><td align="left">menu、list</td></tr><tr><td align="left">源/目标</td><td align="left">source、destination、target</td></tr></tbody></table><h1 id="常用缩写表"><a href="#常用缩写表" class="headerlink" title="常用缩写表"></a>常用缩写表</h1><p>1、本缩写表是《编码命名规范》的附录。</p><p>2、本缩写表中列出的都是通用性缩写，不提供标准缩写，如：Win9x、COM 等。</p><p>3、使用本缩写表里的缩写时，请对其进行必要的注释说明。</p><p>4、除少数情况以外，大部分缩写与大小写无关。</p><a id="more"></a><table><thead><tr><th align="center">缩写</th><th align="center">全称</th></tr></thead><tbody><tr><td align="center">addr</td><td align="center">Address</td></tr><tr><td align="center">adm</td><td align="center">Administrator</td></tr><tr><td align="center">app</td><td align="center">Application</td></tr><tr><td align="center">arg</td><td align="center">Argument</td></tr><tr><td align="center">asm</td><td align="center">assemble</td></tr><tr><td align="center">asyn</td><td align="center">asynchronization</td></tr><tr><td align="center">avg</td><td align="center">average</td></tr><tr><td align="center">DB</td><td align="center">Database</td></tr><tr><td align="center">bk</td><td align="center">back</td></tr><tr><td align="center">bmp</td><td align="center">Bitmap</td></tr><tr><td align="center">btn</td><td align="center">Button</td></tr><tr><td align="center">buf</td><td align="center">Buffer</td></tr><tr><td align="center">calc</td><td align="center">Calculate</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">chg</td><td align="center">Change</td></tr><tr><td align="center">clk</td><td align="center">Click</td></tr><tr><td align="center">clr</td><td align="center">color</td></tr><tr><td align="center">cmd</td><td align="center">Command</td></tr><tr><td align="center">cmp</td><td align="center">Compare</td></tr><tr><td align="center">col</td><td align="center">Column</td></tr><tr><td align="center">coord</td><td align="center">coordinates</td></tr><tr><td align="center">cpy</td><td align="center">copy</td></tr><tr><td align="center">ctl/ctrl</td><td align="center">Control</td></tr><tr><td align="center">cur</td><td align="center">Current</td></tr><tr><td align="center">cyl</td><td align="center">Cylinder</td></tr><tr><td align="center">dbg</td><td align="center">Debug</td></tr><tr><td align="center">dbl</td><td align="center">Double</td></tr><tr><td align="center">dec</td><td align="center">Decrease</td></tr><tr><td align="center">def</td><td align="center">default</td></tr><tr><td align="center">del</td><td align="center">Delete</td></tr><tr><td align="center">dest/dst</td><td align="center">Destination</td></tr><tr><td align="center">dev</td><td align="center">Device</td></tr><tr><td align="center">dict</td><td align="center">dictionary</td></tr><tr><td align="center">diff</td><td align="center">different</td></tr><tr><td align="center">dir</td><td align="center">directory</td></tr><tr><td align="center">disp</td><td align="center">Display</td></tr><tr><td align="center">div</td><td align="center">Divide</td></tr><tr><td align="center">dlg</td><td align="center">Dialog</td></tr><tr><td align="center">doc</td><td align="center">Document</td></tr><tr><td align="center">drv</td><td align="center">Driver</td></tr><tr><td align="center">dyna</td><td align="center">Dynamic</td></tr><tr><td align="center">env</td><td align="center">Environment</td></tr><tr><td align="center">err</td><td align="center">error</td></tr><tr><td align="center">ex/ext</td><td align="center">Extend</td></tr><tr><td align="center">exec</td><td align="center">execute</td></tr><tr><td align="center">flg</td><td align="center">flag</td></tr><tr><td align="center">frm</td><td align="center">Frame</td></tr><tr><td align="center">func/fn</td><td align="center">Function</td></tr><tr><td align="center">grp</td><td align="center">group</td></tr><tr><td align="center">horz</td><td align="center">Horizontal</td></tr><tr><td align="center">idx/ndx</td><td align="center">Index</td></tr><tr><td align="center">img</td><td align="center">Image</td></tr><tr><td align="center">impl</td><td align="center">Implement</td></tr><tr><td align="center">inc</td><td align="center">Increase</td></tr><tr><td align="center">info</td><td align="center">Information</td></tr><tr><td align="center">init</td><td align="center">Initial/Initialize/Initialization</td></tr><tr><td align="center">ins</td><td align="center">Insert</td></tr><tr><td align="center">inst</td><td align="center">Instance</td></tr><tr><td align="center">INT/intr</td><td align="center">Interrupt</td></tr><tr><td align="center">len</td><td align="center">Length</td></tr><tr><td align="center">lib</td><td align="center">Library</td></tr><tr><td align="center">lnk</td><td align="center">Link</td></tr><tr><td align="center">log</td><td align="center">logical</td></tr><tr><td align="center">lst</td><td align="center">List</td></tr><tr><td align="center">max</td><td align="center">maximum</td></tr><tr><td align="center">mem</td><td align="center">Memory</td></tr><tr><td align="center">mgr/man</td><td align="center">Manage/Manager</td></tr><tr><td align="center">mid</td><td align="center">middle</td></tr><tr><td align="center">min</td><td align="center">minimum</td></tr><tr><td align="center">msg</td><td align="center">Message</td></tr><tr><td align="center">mul</td><td align="center">Multiply</td></tr><tr><td align="center">num</td><td align="center">Number</td></tr><tr><td align="center">obj</td><td align="center">Object</td></tr><tr><td align="center">ofs</td><td align="center">Offset</td></tr><tr><td align="center">org</td><td align="center">Origin</td></tr><tr><td align="center">param</td><td align="center">Parameter</td></tr><tr><td align="center">pic</td><td align="center">picture</td></tr><tr><td align="center">pkg</td><td align="center">package</td></tr><tr><td align="center">pnt/pt</td><td align="center">Point</td></tr><tr><td align="center">pos</td><td align="center">Position</td></tr><tr><td align="center">pre/prev</td><td align="center">previous</td></tr><tr><td align="center">prg</td><td align="center">program</td></tr><tr><td align="center">prn</td><td align="center">Print</td></tr><tr><td align="center">proc</td><td align="center">Process</td></tr><tr><td align="center">prop</td><td align="center">Properties</td></tr><tr><td align="center">psw</td><td align="center">Password</td></tr><tr><td align="center">ptr</td><td align="center">Pointer</td></tr><tr><td align="center">pub</td><td align="center">Public</td></tr><tr><td align="center">rc</td><td align="center">rect</td></tr><tr><td align="center">ref</td><td align="center">Reference</td></tr><tr><td align="center">reg</td><td align="center">Register</td></tr><tr><td align="center">req</td><td align="center">request</td></tr><tr><td align="center">res</td><td align="center">Resource</td></tr><tr><td align="center">ret</td><td align="center">return</td></tr><tr><td align="center">rgn</td><td align="center">region</td></tr><tr><td align="center">scr</td><td align="center">screen</td></tr><tr><td align="center">sec</td><td align="center">Second</td></tr><tr><td align="center">seg</td><td align="center">Segment</td></tr><tr><td align="center">sel</td><td align="center">Select</td></tr><tr><td align="center">src</td><td align="center">Source</td></tr><tr><td align="center">std</td><td align="center">Standard</td></tr><tr><td align="center">stg</td><td align="center">Storage</td></tr><tr><td align="center">stm</td><td align="center">Stream</td></tr><tr><td align="center">str</td><td align="center">String</td></tr><tr><td align="center">sub</td><td align="center">Subtract</td></tr><tr><td align="center">sum</td><td align="center">summation</td></tr><tr><td align="center">svr</td><td align="center">Server</td></tr><tr><td align="center">sync</td><td align="center">Synchronization</td></tr><tr><td align="center">sys</td><td align="center">System</td></tr><tr><td align="center">tbl</td><td align="center">Table</td></tr><tr><td align="center">temp/tmp</td><td align="center">Temporary</td></tr><tr><td align="center">tran/trans</td><td align="center">translate/transation/transparent</td></tr><tr><td align="center">tst</td><td align="center">Test</td></tr><tr><td align="center">txt</td><td align="center">text</td></tr><tr><td align="center">unk</td><td align="center">Unknown</td></tr><tr><td align="center">upd</td><td align="center">Update</td></tr><tr><td align="center">upg</td><td align="center">Upgrade</td></tr><tr><td align="center">util</td><td align="center">Utility</td></tr><tr><td align="center">var</td><td align="center">Variable</td></tr><tr><td align="center">ver</td><td align="center">Version</td></tr><tr><td align="center">vert</td><td align="center">Vertical</td></tr><tr><td align="center">vir</td><td align="center">Virus</td></tr><tr><td align="center">wnd</td><td align="center">Window</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用user_tool.py还是user_utils.py？使用name还是username？使用user_add还是add_user？使用get_user_by_name还是get_users_by_name？等等等等，在编程活动中，我们经常会产生各种关于命名的纠结。&lt;br&gt;给文件、函数、变量命名是一件很难的事，但是也是有方法的。本文中，我们就来学习一下文件、变量和函数命名的方法。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/dolphin0520/p/10567879.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;工程实践：给函数取一个”好”的名字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zh-google-styleguide/zh-google-styleguide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google 开源项目风格指南 (中文版)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leohxj.gitbooks.io/a-programmer-prepares/content/programmer-basic/naming.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;命名方法&quot;&gt;&lt;a href=&quot;#命名方法&quot; class=&quot;headerlink&quot; title=&quot;命名方法&quot;&gt;&lt;/a&gt;命名方法&lt;/h1&gt;&lt;p&gt;要领：一看就懂，保持一致。&lt;/p&gt;
&lt;h2 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; title=&quot;文件&quot;&gt;&lt;/a&gt;文件&lt;/h2&gt;&lt;p&gt;由于Windows, OSX下文件名不区分大小写(linux是区分的)，所以命名建议还是以全部小写为主。&lt;br&gt;连字符可以使用中划线、下划线或者省略，关键是要统一。&lt;/p&gt;
&lt;p&gt;目录建议连字符使用中划线，比如: my-project-name。&lt;br&gt;有复数的情况使用复数命名法，比如: scripts, styles, images和data-modules。&lt;br&gt;文件建议连字符使用下划线，比如：user_test.py。&lt;/p&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;变量命名常用的有两种方式:&lt;br&gt;下划线命名法，比如: my_variable&lt;br&gt;驼峰式命名法，比如: myVariale&lt;/p&gt;
&lt;p&gt;python语言建议使用下划线命名法。&lt;/p&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;函数命名常用的有两种方式:&lt;br&gt;下划线命名法，比如: get_user_by_name&lt;br&gt;驼峰式命名法，比如: getUserByName&lt;/p&gt;
&lt;p&gt;python语言建议使用下划线命名法。不同于变量命名的是，函数名称要使用动词开头，并且尽可能准确。&lt;/p&gt;
&lt;h1 id=&quot;常用动词表&quot;&gt;&lt;a href=&quot;#常用动词表&quot; class=&quot;headerlink&quot; title=&quot;常用动词表&quot;&gt;&lt;/a&gt;常用动词表&lt;/h1&gt;&lt;p&gt;动词选取要精准。通常来说，动词决定了一个函数要采取什么”动作”。动词取的好，一个函数名字已经成功了80%。&lt;/p&gt;
&lt;p&gt;常用动词表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;类别&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;单词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;添加/插入/创建/初始化/加载&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;add、append、insert、create、initialize、load&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;删除/销毁&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;delete、remove、destroy、drop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;打开/开始/启动&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;open、start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;关闭/停止&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;close、stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;获取/读取/查找/查询&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;get、fetch、acquire、read、search、find、query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;设置/重置/放入/写入/释放/刷新&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;set、reset、put、write、release、refresh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;发送/推送&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;send、push&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;接收/拉取&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;receive、pull&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;提交/撤销/取消&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;submit、cancel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;收集/采集/选取/选择&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;collect、pick、select&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;提取/解析&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;sub、extract、parse&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;编码/解码&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;encode、decode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;填充/打包/压缩&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;fill、pack、compress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;清空/拆包/解压&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;flush、clear、unpack、decompress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;增加/减少&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;increase、decrease、reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;分隔/拼接&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;split、join、concat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;过滤/校验/检测&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;filter、valid、check&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;常用领域词&quot;&gt;&lt;a href=&quot;#常用领域词&quot; class=&quot;headerlink&quot; title=&quot;常用领域词&quot;&gt;&lt;/a&gt;常用领域词&lt;/h1&gt;&lt;p&gt;名词使用领域词汇。举个例子：集合的容量通常用capacity、集合实际元素个数用size、字符串长度用length，这种就遵循大家的使用习惯，不要用size去形如字符串的长度。&lt;/p&gt;
&lt;p&gt;再比如，假如使用到建造者模式，那么通常会用build作为函数名字，这个时候就不要另辟蹊径，用create来作为函数名字，使用大家约定俗成的命名习惯更容易让你的代码被别人读懂。&lt;/p&gt;
&lt;p&gt;常用名词表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;类别&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;单词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;容量/大小/长度&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;capacity、size、length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;实例/上下文&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;instance、context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;配置&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;config、settings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;头部/前面/前一个/第一个&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;header、front、previous、first&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;尾部/后面/后一个/最后一个&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;tail、back、next、last&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;区间/区域/某一部分/范围/规模&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;range、interval、region、area、section、scope、scale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;缓存/缓冲/会话&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;cache、buffer、session&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;本地/局部/全局&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;local、global&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;成员/元素&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;member、element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;菜单/列表&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;menu、list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;源/目标&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;source、destination、target&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;常用缩写表&quot;&gt;&lt;a href=&quot;#常用缩写表&quot; class=&quot;headerlink&quot; title=&quot;常用缩写表&quot;&gt;&lt;/a&gt;常用缩写表&lt;/h1&gt;&lt;p&gt;1、本缩写表是《编码命名规范》的附录。&lt;/p&gt;
&lt;p&gt;2、本缩写表中列出的都是通用性缩写，不提供标准缩写，如：Win9x、COM 等。&lt;/p&gt;
&lt;p&gt;3、使用本缩写表里的缩写时，请对其进行必要的注释说明。&lt;/p&gt;
&lt;p&gt;4、除少数情况以外，大部分缩写与大小写无关。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
    
      <category term="转载" scheme="https://www.voidking.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo本地搜索加速</title>
    <link href="https://www.voidking.com/dev-hexo-local-search-accelerate/"/>
    <id>https://www.voidking.com/dev-hexo-local-search-accelerate/</id>
    <published>2021-02-24T13:00:00.000Z</published>
    <updated>2021-08-22T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着文章数量的增长，search.xml文件越来越大。因此在加载这个文件时，需要的时间很长，而且偶尔会出现加载不出来的情况。</p><p>有没有什么办法能够加快加载速度呢？必须是有的，本文就来研究一下。</p><p><a href="https://www.voidking.com/dev-hexo-gulp/">《Hexo使用Gulp压缩静态资源》</a>一文中，提到search.xml大小为3.5M。今天又看了一下，文件大小变成了4.3M（加载时会压缩传输，大小约为1.3M）。从文中的实验可以得出结论，在文件大小方面，没有什么优化的空间了。</p><p>再想优化，就得从网络方面入手：CDN加速。主要参考<a href="https://zhuanlan.zhihu.com/p/76951130" target="_blank" rel="noopener">jsDelivr+Github 使用方法</a>。</p><p>更多Hexo相关内容，参考<a href="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/">Hexo系列文章</a>。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>修改 search.xml 的文件链接，改成cdn的地址。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>1、测试jsdelivr链接，search.xml的cdn地址为<br><a href="https://cdn.jsdelivr.net/gh/voidking/voidking.github.io/search.xml" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/voidking/voidking.github.io/search.xml</a></p><p>2、编辑 next/source/js/local-search.js ，如下修改：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const path = CONFIG.root + searchPath;</span></span><br><span class="line"><span class="keyword">const</span> jsdelivr = <span class="symbol">'https</span>:<span class="comment">//cdn.jsdelivr.net/gh/'</span></span><br><span class="line"><span class="keyword">const</span> userRepo = <span class="symbol">'voidking</span>/voidking.github.io/'</span><br><span class="line"><span class="keyword">const</span> path = jsdelivr + userRepo + searchPath;</span><br></pre></td></tr></table></figure><p>3、本地测试，提交代码，使用修改后的主题进行部署</p><p>实测加载速度飞快，4.3M的search.xml能够稳定在2秒内加载完毕，完美。</p><h1 id="提高通用性"><a href="#提高通用性" class="headerlink" title="提高通用性"></a>提高通用性</h1><p>1、cdn的配置放在 <code>_config.yml</code> 文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Use CDN to accelerate the speed of loading search.xml</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># url: //cdn.jsdelivr.net/gh/&lt;username&gt;/&lt;username&gt;.github.io/search.xml</span></span><br><span class="line">    <span class="attr">url:</span></span><br></pre></td></tr></table></figure><p>2、编辑 next/source/js/local-search.js ，如下修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = CONFIG.root + searchPath;</span><br><span class="line"><span class="comment">// Use CDN to accelerate the speed of loading search.xml</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'cdn'</span> <span class="keyword">in</span> CONFIG.localsearch &amp;&amp; CONFIG.localsearch.cdn.enable === <span class="literal">true</span> &amp;&amp; CONFIG.localsearch.cdn.url !== <span class="literal">null</span>)&#123;</span><br><span class="line">  path = CONFIG.localsearch.cdn.url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;随着文章数量的增长，search.xml文件越来越大。因此在加载这个文件时，需要的时间很长，而且偶尔会出现加载不出来的情况。&lt;/p&gt;
&lt;p&gt;有没有什么办法能够加快加载速度呢？必须是有的，本文就来研究一下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-gulp/&quot;&gt;《Hexo使用Gulp压缩静态资源》&lt;/a&gt;一文中，提到search.xml大小为3.5M。今天又看了一下，文件大小变成了4.3M（加载时会压缩传输，大小约为1.3M）。从文中的实验可以得出结论，在文件大小方面，没有什么优化的空间了。&lt;/p&gt;
&lt;p&gt;再想优化，就得从网络方面入手：CDN加速。主要参考&lt;a href=&quot;https://zhuanlan.zhihu.com/p/76951130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jsDelivr+Github 使用方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;更多Hexo相关内容，参考&lt;a href=&quot;https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/&quot;&gt;Hexo系列文章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown编辑器</title>
    <link href="https://www.voidking.com/dev-markdown-editor/"/>
    <id>https://www.voidking.com/dev-markdown-editor/</id>
    <published>2021-02-13T12:00:00.000Z</published>
    <updated>2021-02-13T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假设现在要写一篇markdown格式文章，使用什么编辑器比较好？答：<a href="https://www.sublimetext.com/" target="_blank" rel="noopener">sublime</a>或者<a href="https://typora.io/" target="_blank" rel="noopener">typora</a>。</p><p>假设现在要把一篇markdown格式文章导出成pdf文档，使用什么编辑器比较好？答：typora。</p><p>假设现在要把一篇markdown格式文章发布成微信公众号文章，使用什么编辑器比较好？答：<a href="https://github.com/lyricat/wechat-format" target="_blank" rel="noopener">wechat-format</a>。</p><p>本文主要介绍三款 markdown 编辑器，分别是 sublime、typora和wechat-format。<br>此外，还会介绍几个在线markdown编辑器，测试和预览都很方便。</p><a id="more"></a><h1 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h1><p>.md 结尾的文件，在使用 sublime 进行编辑时会自动语法高亮。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/markdown.png?imageView2/0/w/800" alt=""><br>之所以推荐sublime，是因为这个编辑器是个万能的编辑器，而且非常轻量。<br>使用了六年了，依然情有独钟。</p><h1 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>typora是近两年崛起的markdown编辑器神器。<br>传统的markdown编辑器，左边是编辑器，右边是预览。typora另辟蹊径，没有左右分开，而是把编辑和预览结合在一起，随时切换（command+/），更可以在预览时进行编辑。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora1.png?imageView2/0/w/800" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora2.png?imageView2/0/w/800" alt=""></p><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>typora提供各种主题，更是支持用户自定义主题，简单好用。下面我们按照自己的需求来定制主题，熟悉一下自定义主题的流程。</p><p>已知需求为：</p><ul><li>github主题自己很喜欢，但是标题字号太大，想要改小一点。</li><li>标题在显示的时候自动编号。</li></ul><p>1、Typora，偏好设置，外观，打开主题文件夹<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/folder.png?imageView2/0/w/800" alt=""></p><p>2、备份github.css为github.css.bak</p><p>3、编辑github.css，修改字号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.225</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.15em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.43</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.05em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h5</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、编辑github.css，给标题前添加自动编号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 标题自动编号 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">counter-reset</span>: h1counter; &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">counter-reset</span>: h2counter; &#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123; <span class="attribute">counter-reset</span>: h3counter; &#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">counter-reset</span>: h4counter; &#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123; <span class="attribute">counter-reset</span>: h5counter; &#125;</span><br><span class="line"><span class="selector-tag">h5</span> &#123; <span class="attribute">counter-reset</span>: h6counter; &#125;</span><br><span class="line"><span class="selector-tag">h6</span> &#123; &#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h1counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h2counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h3counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h4counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h5counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h5counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h6counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h5counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h6counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、重启typora<br>可见标题字号变小了，同时添加了编号。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora3.png?imageView2/0/w/800" alt=""><br>但是，如果直接复制粘贴内容到微信公众号，这些标题编号不会被复制。而且，换行效果也没有了。<br>因此，从typora直接复制粘贴到微信公众号，不是一个好的方案。</p><h2 id="导出pdf"><a href="#导出pdf" class="headerlink" title="导出pdf"></a>导出pdf</h2><p>文件，导出，PDF。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora2pdf.png?imageView2/0/w/800" alt=""><br>如上，typora导出的pdf文档，简直完美。</p><h1 id="wechat-format"><a href="#wechat-format" class="headerlink" title="wechat-format"></a>wechat-format</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>wechat-format最大的优点是：适应微信公众号。比如，微信不支持外链，wechat-format生成的预览会包含 reference。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format1.png?imageView2/0/h/500" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format2.png?imageView2/0/h/500" alt=""><br>但是，标题居中效果不是我想要的，标题也没有自动编号，所以也需要自定义一下。</p><h2 id="自定义主题-1"><a href="#自定义主题-1" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>下载wechat-format源码，主要修改：</p><ul><li>src/assets/scripts/themes/default.js</li><li>src/assets/scripts/renderers/wx-renderer.js</li><li>src/assets/css/app.css</li></ul><p>修改后的代码参考 <a href="https://github.com/voidking/wechat-format/tree/root" target="_blank" rel="noopener">wechat-format</a>，最终效果如下<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format3.png?imageView2/0/h/500" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format4.png?imageView2/0/h/500" alt=""></p><h2 id="失败的尝试"><a href="#失败的尝试" class="headerlink" title="失败的尝试"></a>失败的尝试</h2><p>但是，修改完成之后，复制粘贴到微信公众号，这些标题编号依然不会被复制。<br>那么，怎样才能复制到这些编号？答：使这些编号变成元素，而不是样式。所以，需要使用js给页面添加编号元素。<br>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.cnblogs.com/qiudeqing/p/3229583.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">number</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> headings;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.querySelectorAll)</span><br><span class="line">        headings = <span class="built_in">document</span>.querySelectorAll(<span class="string">"h1,h2,h3,h4,h5,h6"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        headings = findHeadings(<span class="built_in">document</span>.body, []);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findHeadings</span>(<span class="params">root, sects</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> c = root.firstChild; c != <span class="literal">null</span>; c = c.nextSibling) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.nodeType !== <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (c.tagName.length == <span class="number">2</span> &amp;&amp; c.tagName.charAt(<span class="number">0</span>) == <span class="string">"H"</span>)</span><br><span class="line">                sects.push(c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                findHeadings(c, sects);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sects;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sectionNumbers = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> h = <span class="number">0</span>; h &lt; headings.length; h++) &#123;</span><br><span class="line">        <span class="keyword">var</span> heading = headings[h];</span><br><span class="line">        <span class="keyword">var</span> level = <span class="built_in">parseInt</span>(heading.tagName.charAt(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(level) || level &lt; <span class="number">1</span> || level &gt; <span class="number">6</span>) <span class="keyword">continue</span>;</span><br><span class="line">        sectionNumbers[level<span class="number">-1</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = level; i &lt; <span class="number">6</span>; i++) sectionNumbers[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> sectionNumber = sectionNumbers.slice(<span class="number">0</span>,level).join(<span class="string">"."</span>) + <span class="string">". "</span>;</span><br><span class="line">        <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">        span.className = <span class="string">"TOCSectNum"</span>;</span><br><span class="line">        span.innerHTML = sectionNumber;</span><br><span class="line">        heading.insertBefore(span, heading.firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，想要把这个代码应用到wechat-format，是有难度的，假期搞了一天，最终效果不理想，暂时放弃。<br>思路：修改 src/assets/scripts/editor.js ，把number函数改写到这个文件里。中间会用到dom转str和str转dom，代码附上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/DOMParser</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/XMLSerializer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trans</span>(<span class="params">str</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> parser = <span class="keyword">new</span> DOMParser();</span><br><span class="line">    <span class="keyword">var</span> doc=parser.parseFromString(str, <span class="string">"text/xml"</span>);</span><br><span class="line">    doc = number(doc);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line">    <span class="keyword">return</span> s.serializeToString(doc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在线markdown编辑器"><a href="#在线markdown编辑器" class="headerlink" title="在线markdown编辑器"></a>在线markdown编辑器</h1><h2 id="mdnice"><a href="#mdnice" class="headerlink" title="mdnice"></a>mdnice</h2><p><a href="https://www.mdnice.com/" target="_blank" rel="noopener">Markdown Nice</a>是一个支持自定义样式的 Markdown 编辑器，支持导出成微信公众号文章和知乎文章。</p><p>值得一提的是，mdnice导出的微信公众号文章，排版非常nice，比 wechat-format 还要美观。<br>尝试了自定义样式，添加了标题编号，同样无法复制到微信公众号。</p><h2 id="openwrite"><a href="#openwrite" class="headerlink" title="openwrite"></a>openwrite</h2><p><a href="https://openwrite.cn/" target="_blank" rel="noopener">OpenWrite</a>是一个博客群发平台，支持一键发文到微信公众号、知乎、头条、博客园、CSDN等平台。其中一项功能是Markdown格式文章导出微信公众号预览。</p><h2 id="Cmd-Markdown"><a href="#Cmd-Markdown" class="headerlink" title="Cmd Markdown"></a>Cmd Markdown</h2><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown</a>是一个用了很多年的在线markdown编辑器，稳定靠谱，支持高亮代码块、LaTeX 公式、流程图。</p><h2 id="马克飞象"><a href="#马克飞象" class="headerlink" title="马克飞象"></a>马克飞象</h2><p><a href="https://maxiang.io/#" target="_blank" rel="noopener">马克飞象</a>是一款专为印象笔记（Evernote）打造的Markdown编辑器，支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传。马克飞象同时提供桌面客户端以及离线Chrome App，支持移动端 Web。</p><h2 id="StackEdit"><a href="#StackEdit" class="headerlink" title="StackEdit"></a>StackEdit</h2><p><a href="https://stackedit.io/app#" target="_blank" rel="noopener">StackEdit</a>支持google登录，发布文章到web（github、gitlab、wordpress等），支持高亮代码块、LaTeX 公式、流程图。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;假设现在要写一篇markdown格式文章，使用什么编辑器比较好？答：&lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime&lt;/a&gt;或者&lt;a href=&quot;https://typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;typora&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;假设现在要把一篇markdown格式文章导出成pdf文档，使用什么编辑器比较好？答：typora。&lt;/p&gt;
&lt;p&gt;假设现在要把一篇markdown格式文章发布成微信公众号文章，使用什么编辑器比较好？答：&lt;a href=&quot;https://github.com/lyricat/wechat-format&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wechat-format&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文主要介绍三款 markdown 编辑器，分别是 sublime、typora和wechat-format。&lt;br&gt;此外，还会介绍几个在线markdown编辑器，测试和预览都很方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="markdown" scheme="https://www.voidking.com/tags/markdown/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="sublime" scheme="https://www.voidking.com/tags/sublime/"/>
    
      <category term="typora" scheme="https://www.voidking.com/tags/typora/"/>
    
      <category term="wechat-format" scheme="https://www.voidking.com/tags/wechat-format/"/>
    
  </entry>
  
  <entry>
    <title>Shell和Python互相调用</title>
    <link href="https://www.voidking.com/dev-shell-python/"/>
    <id>https://www.voidking.com/dev-shell-python/</id>
    <published>2021-01-13T13:00:00.000Z</published>
    <updated>2021-01-13T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在linux上，最常用的编程语言是shell，其次是python。而这两种语言，很多时候需要配合使用。本文就研究一下这两种语言互相调用的方法。</p><p>参考文档：</p><ul><li><a href="https://www.voidking.com/dev-shell-script-program-1/">《Shell脚本编程》</a></li><li><a href="https://www.voidking.com/dev-python-start/">《Python基础》</a></li></ul><a id="more"></a><h1 id="shell调用python"><a href="#shell调用python" class="headerlink" title="shell调用python"></a>shell调用python</h1><h2 id="调用python脚本"><a href="#调用python脚本" class="headerlink" title="调用python脚本"></a>调用python脚本</h2><p>shell调用python脚本，直接调用即可，例如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> main.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><h2 id="调用python模块"><a href="#调用python模块" class="headerlink" title="调用python模块"></a>调用python模块</h2><p>举个简单的例子，我们想要对curl获取的结果进行json格式化。<br>假设安装了jq，可以使用jq命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span> <span class="string">| jq</span></span><br></pre></td></tr></table></figure><p>假设没有安装jq，那我们可以使用python的 json.tool 模块：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span> <span class="string">| python -m json.tool</span></span><br></pre></td></tr></table></figure><h2 id="调用python函数"><a href="#调用python函数" class="headerlink" title="调用python函数"></a>调用python函数</h2><p>1、test.py 内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#scriptname:test.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helloworld</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"helloworld"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> helloworld()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"haojin"</span>,<span class="number">100</span>,<span class="string">"beijing"</span></span><br></pre></td></tr></table></figure><p>2、shell中调用 test.py 中的方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python -c 'import test;print test.helloworld<span class="literal">()</span>'</span><br><span class="line">python -c 'import test;test.echo<span class="literal">()</span>'</span><br><span class="line"></span><br><span class="line">res=<span class="constructor">$(<span class="params">python</span> -<span class="params">c</span> '<span class="params">import</span> <span class="params">test</span>;<span class="params">print</span> <span class="params">test</span>.<span class="params">get_user</span>()</span>')</span><br><span class="line">name=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f1</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>,$<span class="operator">/</span><span class="operator">/</span>' | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>^(<span class="operator">/</span><span class="operator">/</span>' | <span class="params">sed</span> <span class="string">"s/\'//g"</span>)</span></span><br><span class="line">score=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f2</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>,$<span class="operator">/</span><span class="operator">/</span>')</span></span><br><span class="line">loc=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f3</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>)</span>$<span class="comment">//' | sed "s/\'//g")</span></span><br></pre></td></tr></table></figure><h1 id="python调用shell"><a href="#python调用shell" class="headerlink" title="python调用shell"></a>python调用shell</h1><h2 id="调用shell命令"><a href="#调用shell命令" class="headerlink" title="调用shell命令"></a>调用shell命令</h2><p>main.py内容为</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">val = <span class="built_in">os</span>.system(<span class="string">'ls -al'</span>)</span><br><span class="line"><span class="built_in">print</span> val</span><br></pre></td></tr></table></figure><p>其中，val的值是exit code。</p><p>执行main.py，<code>python main.py</code></p><h2 id="调用shell脚本"><a href="#调用shell脚本" class="headerlink" title="调用shell脚本"></a>调用shell脚本</h2><p>1、main.sh 内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>2、python 调用 main.sh</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line">val = <span class="built_in">os</span>.system(<span class="string">'sh main.sh'</span>)</span><br><span class="line"><span class="built_in">print</span> val</span><br></pre></td></tr></table></figure><h2 id="获取shell指令的结果"><a href="#获取shell指令的结果" class="headerlink" title="获取shell指令的结果"></a>获取shell指令的结果</h2><p>例子：获取echo命令结果。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">res = <span class="built_in">os</span>.<span class="built_in">popen</span>(<span class="string">'echo "hello"'</span>)</span><br><span class="line"><span class="built_in">print</span> res.<span class="built_in">read</span>()</span><br><span class="line">res.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>高级例子：获取curl命令的返回结果，转化成dict。<br>1、main.sh 内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span></span><br></pre></td></tr></table></figure><p>2、python 调用 main.sh</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="title">res</span> = os.popen('sh main.sh')</span><br><span class="line"><span class="class"><span class="keyword">data</span> = json.loads(<span class="title">res</span>.<span class="title">read</span>())</span></span><br><span class="line"><span class="title">res</span>.close()</span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['number']</span></span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['string']</span></span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['array'][0]['foo']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在linux上，最常用的编程语言是shell，其次是python。而这两种语言，很多时候需要配合使用。本文就研究一下这两种语言互相调用的方法。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.voidking.com/dev-shell-script-program-1/&quot;&gt;《Shell脚本编程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.voidking.com/dev-python-start/&quot;&gt;《Python基础》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
      <category term="shell" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/shell/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="linux" scheme="https://www.voidking.com/tags/linux/"/>
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置Jupyter</title>
    <link href="https://www.voidking.com/dev-docker-jupyter/"/>
    <id>https://www.voidking.com/dev-docker-jupyter/</id>
    <published>2021-01-03T12:00:00.000Z</published>
    <updated>2021-08-08T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-jupyter-notebook/">《Jupyter notebook》</a>一文中学习了jupyter的使用，本文学习一下怎样使用docker安装jupyter，并且配置访问密码。</p><p>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.130。</p><a id="more"></a><h1 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/jupyter/base-notebook/" target="_blank" rel="noopener">Jupyter - Docker Official Images</a>。</p><p>2、下载jupyter镜像（以6.1.1为例）<br><code>docker pull jupyter/base-notebook:notebook-5.7.8</code></p><p>注意不要使用6.x.x，存在页面无法显示扩展插件的bug，详情参考<a href="https://discourse.jupyter.org/t/jupyter-nbextensions-configurator-not-shown/7294" target="_blank" rel="noopener">Jupyter nbextensions_configurator not shown</a>。</p><p>3、创建配置目录</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/jupyter/jovyan</span><br><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/jupyter/jovyan/.jupyter</span><br><span class="line">chmod <span class="number">777</span> -R /<span class="keyword">opt</span>/jupyter/jovyan</span><br></pre></td></tr></table></figure><p>4、启动jupyter服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-jupyter -d \</span><br><span class="line">-p <span class="number">8888</span>:<span class="number">8888</span> \</span><br><span class="line">-v /opt/jupyter/jovyan:/home/jovyan \</span><br><span class="line">jupyter/base-notebook:notebook<span class="number">-5.7</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><p>以上命令：</p><ul><li>命名容器为vk-jupyter，后台运行</li><li>映射宿主机8888端口到容器的8888端口</li><li>挂载宿主机目录/opt/jupyter/jovyan到容器目录/home/jovyan</li></ul><p>更多启动命令参数可以参考<a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Jupyter Docker Stacks</a>。</p><p>5、验证安装<br><code>docker ps</code>，jupyter启动正常的话就可以看到vk-jupyter容器。</p><p>浏览器访问 <a href="http://192.168.56.130:8888" target="_blank" rel="noopener">http://192.168.56.130:8888</a> ，可以看到Jupyter登录页面。</p><p>6、登录<br><code>docker exec -it vk-jupyter jupyter notebook list</code><br>可以查看到登录需要的token，使用token即可登录进入jupyter编辑页面。</p><h1 id="配置jupyter"><a href="#配置jupyter" class="headerlink" title="配置jupyter"></a>配置jupyter</h1><p>1、设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-jupyter jupyter notebook password</span><br><span class="line">docker restart vk-jupyter</span><br></pre></td></tr></table></figure><p>2、使用密码<br>浏览器访问 <a href="http://192.168.56.130:8888" target="_blank" rel="noopener">http://192.168.56.130:8888</a><br>此时使用自己设置的密码就可以访问jupyter了。</p><p>3、根目录<br>jupyter编辑器的默认根目录为 /home/jovyan ，对应宿主机目录 /opt/jupyter/jovyan ，创建的目录和文件都去这个路径下面去找。</p><p>4、安装ipywidgets 如果不安装ipywidgets，页面加载 /nbextensions/widgets/notebook/js/extension.js 文件时会报错404。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-<span class="keyword">jupyter </span>pip <span class="keyword">install </span>ipywidgets</span><br></pre></td></tr></table></figure><h1 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h1><p>jupyter 使用了 websocket 协议，所以需要配置支持 websocket。<br>如果不配置的话，通过域名访问时会报错无法连接内核，也就无法运行python脚本。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> jupyter.voidking.com;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">location</span> /&#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://172.17.12.85:8888;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># WebSocket support</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jupyter小技巧"><a href="#jupyter小技巧" class="headerlink" title="jupyter小技巧"></a>jupyter小技巧</h1><h2 id="执行bash"><a href="#执行bash" class="headerlink" title="执行bash"></a>执行bash</h2><p>在代码框里输入叹号+bash命令，即可执行bash，例如：<br><code>!ls -l</code></p><h2 id="登录进容器"><a href="#登录进容器" class="headerlink" title="登录进容器"></a>登录进容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-jupyter /bin/bash</span><br><span class="line">docker exec --user root -it vk-jupyter /bin/bash</span><br></pre></td></tr></table></figure><h2 id="安装常用命令"><a href="#安装常用命令" class="headerlink" title="安装常用命令"></a>安装常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec --user root -it vk-jupyter /bin/bash</span><br><span class="line">apt update</span><br><span class="line">apt install curl</span><br><span class="line">apt install unzip</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>Jupyter Notebook 扩展插件（nbextensions）是一些 JavaScript 模块，我们可以使用插件强化 Notebook 的功能。扩展插件本质上修改了 Jupyter UI，以实现更强大的功能。<br>1、界面添加 Nbextensions</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-<span class="keyword">jupyter </span>conda <span class="keyword">install </span>-c conda-forge <span class="keyword">jupyter_nbextensions_configurator</span></span><br><span class="line">#docker exec -it vk-jupyter pip install jupyter_nbextensions_configurator -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</span><br><span class="line">docker exec -it vk-<span class="keyword">jupyter </span><span class="keyword">jupyter </span>nbextensions_configurator enable --user</span><br><span class="line">docker exec -it vk-<span class="keyword">jupyter </span><span class="keyword">jupyter </span>nbextension list</span><br><span class="line">docker restart vk-<span class="keyword">jupyter</span></span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-jupyter/nbext.png?imageView2/0/w/600" alt=""></p><p>2、安装常用扩展集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-jupyter pip install jupyter_contrib_nbextensions -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</span><br><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> -it vk-jupyter conda install -c conda-forge jupyter_contrib_nbextensions</span></span><br><span class="line">docker exec -it vk-jupyter jupyter contrib nbextension install --user</span><br><span class="line">docker exec -it vk-jupyter jupyter nbextension list</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-jupyter/contrib.png?imageView2/0/w/600" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-jupyter-notebook/&quot;&gt;《Jupyter notebook》&lt;/a&gt;一文中学习了jupyter的使用，本文学习一下怎样使用docker安装jupyter，并且配置访问密码。&lt;/p&gt;
&lt;p&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.130。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用IDEA合并代码的个人实践</title>
    <link href="https://www.voidking.com/dev-idea-git-merge-code/"/>
    <id>https://www.voidking.com/dev-idea-git-merge-code/</id>
    <published>2020-09-11T00:00:00.000Z</published>
    <updated>2021-12-26T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>团队合作开发，肯定会涉及到代码合并的问题。<br>以前在代码合并的时候，喜欢使用beyond compare。同一个项目拷贝两份，一个保持最新代码，一个用于开发，开发完成后使用beyond compare把开发代码合并到最新代码。然后push到远程分支，提一个MR。<br>后来发现，使用IDEA配合Git命令来合并代码，简直完美。本文就来记录一下这种方法，供大家参考。</p><p>已知项目名为 voidking，有很多分支，其中 pre 分支用来发布服务到预发环境，master分支用来发布服务到生产环境。代码合并后，创建pre或者prod开头的tag，触发CICD。</p><a id="more"></a><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>1、在github或者gitlab新建一个issue，描述清楚问题或者功能。<br>2、针对这个issue，创建一个分支。这个分支会以issue的标题命名，前面加上issue的编号。假设生成的branch为 3-add-new-feat 。<br>3、拉取最新代码后，本地创建自己的分支<br><code>git checkout -b haojin</code></p><p>4、一顿复制粘贴，功能完成，commit自己的代码。</p><h1 id="pre分支代码合并"><a href="#pre分支代码合并" class="headerlink" title="pre分支代码合并"></a>pre分支代码合并</h1><p>到了代码合并的步骤，表演开始。</p><p>1、拉取最新代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>2、创建mergepre分支</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span>mergepre origin/pre</span><br></pre></td></tr></table></figure><p>3、使用IDEA合并代码<br>点击界面右下角Git Branches，选择 haojin 分支，Show Diff with Working Tree。<br>根据自己的修改，合并代码到当前的mergepre分支，修改完成后commit代码。</p><p>4、push代码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> HEAD:haojin --force</span><br></pre></td></tr></table></figure><p>需要注意的是，这里我们把mergepre的分支push到了远程的haojin分支，并没有push到 3-add-new-feat 。这是因为，3-add-new-feat这个分支我们留着，代码合并到master分支时使用。</p><p>点击出现的链接，或者在gitlab上的haojin分支点击创建MR，进入创建MR的页面。</p><p>5、选择要合并到的分支为 pre ，可以看到代码的变更，再次检查。</p><p>6、检查没问题的话，提交MR即可。</p><h1 id="master分支代码合并"><a href="#master分支代码合并" class="headerlink" title="master分支代码合并"></a>master分支代码合并</h1><p>以上，假设我们已经合并了自己的代码到 pre 分支。并且在预发环境发版验证通过，没有问题。接下来就可以合并代码到 master 分支了。</p><p>1、拉取最新代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>2、创建mergeprod分支</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span>mergeprod</span><br></pre></td></tr></table></figure><p>3、使用IDEA合并代码<br>点击界面右下角Git Branches，选择 haojin 分支，Show Diff with Working Tree。<br>根据自己的修改，合并代码到当前的mergeprod分支，修改完成后commit代码。</p><p>4、push代码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> HEAD:<span class="number">3</span>-add-<span class="built_in">new</span>-feat</span><br></pre></td></tr></table></figure><p>点击出现的链接，或者在gitlab上的haojin分支点击创建MR，进入创建MR的页面。</p><p>5、选择要合并到的分支为 master ，可以看到代码的变更，再次检查。</p><p>6、检查没问题的话，提交MR即可。</p><h1 id="代码冲突解决办法"><a href="#代码冲突解决办法" class="headerlink" title="代码冲突解决办法"></a>代码冲突解决办法</h1><p>问题描述：git pull 之后，出现代码冲突。<br>解决办法：菜单栏Git，Merge，Resolve Conflicts，选中冲突代码，Merge。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;团队合作开发，肯定会涉及到代码合并的问题。&lt;br&gt;以前在代码合并的时候，喜欢使用beyond compare。同一个项目拷贝两份，一个保持最新代码，一个用于开发，开发完成后使用beyond compare把开发代码合并到最新代码。然后push到远程分支，提一个MR。&lt;br&gt;后来发现，使用IDEA配合Git命令来合并代码，简直完美。本文就来记录一下这种方法，供大家参考。&lt;/p&gt;
&lt;p&gt;已知项目名为 voidking，有很多分支，其中 pre 分支用来发布服务到预发环境，master分支用来发布服务到生产环境。代码合并后，创建pre或者prod开头的tag，触发CICD。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/git/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="git" scheme="https://www.voidking.com/tags/git/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Go语言开发的小技巧</title>
    <link href="https://www.voidking.com/dev-golang-skills/"/>
    <id>https://www.voidking.com/dev-golang-skills/</id>
    <published>2020-09-10T12:00:00.000Z</published>
    <updated>2020-09-10T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学到了一些Go语言开发时的小技巧，做下记录。</p><h1 id="提高下载速度"><a href="#提高下载速度" class="headerlink" title="提高下载速度"></a>提高下载速度</h1><p>方法一：科学上网</p><p>方法二：配置代理，详情参考<a href="https://www.voidking.com/dev-golang-gpm/">《Golang包管理工具》</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export GOPROXY=https://goproxy.cn</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPROXY</span>=https://goproxy.io</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GO111MODULE</span>=on</span><br><span class="line">go <span class="builtin-name">get</span> -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure><p>方法三：使用gopm</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go <span class="builtin-name">get</span> -v github.com/gpmgo/gopm</span><br><span class="line">gopm <span class="builtin-name">get</span> -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="编译安装软件"><a href="#编译安装软件" class="headerlink" title="编译安装软件"></a>编译安装软件</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/g</span>oimports</span><br><span class="line">go install golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/g</span>oimports</span><br></pre></td></tr></table></figure><h1 id="自动格式化"><a href="#自动格式化" class="headerlink" title="自动格式化"></a>自动格式化</h1><p>Golang希望统一代码风格，因此推出了gofmt工具。gofmt可以格式化单个文件，也可以格式化整个目录下的所有go文件。<br>除了gofmt工具，go语言中还有一个go fmt命令，该命令是gofmt的简单封装。</p><p>在IDEA中，怎样使用gofmt呢？<br>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索File，找到File Watchers插件并安装。<br>3、Tools，File Watchers，添加或修改gofmt模版。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> type：Go</span><br><span class="line">Scope：Project <span class="keyword">files</span></span><br><span class="line">Program：/usr/local/go/bin/gofmt</span><br><span class="line">Arguments：-l -w -s <span class="symbol">$</span>FilePath<span class="symbol">$</span></span><br><span class="line">Output paths to refresh：<span class="symbol">$</span>FilePath<span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>4、勾选Enabled。</p><p>保存源码时，就会执行代码格式化了。</p><h1 id="自动引入依赖包"><a href="#自动引入依赖包" class="headerlink" title="自动引入依赖包"></a>自动引入依赖包</h1><p>参考上一节自动格式化，配置 goimports ，自动引入依赖包。</p><h1 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h1><p>如果对一个包或者函数不熟悉，可以使用go doc命令查看文档。比如：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="meta">doc</span> http.ListenAndServe</span><br></pre></td></tr></table></figure><p>如果想要看一个项目的帮助文档，可以使用godoc工具启动一个文档服务器。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -v golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/</span>godoc</span><br><span class="line">godoc -<span class="string">http :</span><span class="number">6060</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>Debugging Sucks! Testing Rocks!<br>Go语言支持三种测试：单元测试、性能测试和http测试，下面分别来看一下。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>Go语言单元测试函数以Test为前缀，详情参考<a href="https://books.studygolang.com/gopl-zh/ch11/ch11-02.html" target="_blank" rel="noopener">测试函数</a>。</p><p>实际开发中推荐使用表格驱动测试，就是把测试数据和测试逻辑分开。比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestShortFilename</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">        in       <span class="keyword">string</span></span><br><span class="line">        expected <span class="keyword">string</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;<span class="string">"???"</span>, <span class="string">"???"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"hello/filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"main/hello/filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        actual := getShortFilename(tt.in)</span><br><span class="line">        <span class="keyword">if</span> strings.Compare(actual, tt.expected) != <span class="number">0</span> &#123;</span><br><span class="line">            t.Fail()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IDEA中查看代码覆盖率：<br>在单元测试函数左边，会出现一个三角箭头，点击它，选择 Run ‘Testxxx’ with Coverage，即可看到代码覆盖率。绿线代表覆盖到了，红线代表没有覆盖到。</p><p>也可以使用命令查看代码覆盖率：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go test <span class="attribute">-coverprofile</span>=c.out</span><br><span class="line">go<span class="built_in"> tool </span>cover</span><br><span class="line">go<span class="built_in"> tool </span>cover <span class="attribute">html</span>=c.out</span><br></pre></td></tr></table></figure><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>1、编写性能测试函数，以Benchmark为前缀，详情参考<a href="https://books.studygolang.com/gopl-zh/ch11/ch11-04.html" target="_blank" rel="noopener">基准测试</a>。</p><p>2、运行基准测试</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">go</span> test -<span class="keyword">bench </span>.</span><br></pre></td></tr></table></figure><p>3、详细分析（文本）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go test bench . -cpuprofile cpu.out</span><br><span class="line">go<span class="built_in"> tool </span>pprof -text <span class="attribute">-nodecount</span>=10 ./cpu.test cpu.out</span><br></pre></td></tr></table></figure><p>4、详细分析（图表）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go<span class="built_in"> tool </span>pprof cpu.out</span><br><span class="line">web</span><br></pre></td></tr></table></figure><p>PS：需要安装<a href="http://www.graphviz.org/" target="_blank" rel="noopener">graphviz</a>，以便生成图表。</p><h2 id="http测试"><a href="#http测试" class="headerlink" title="http测试"></a>http测试</h2><p>Go语言的http测试使用 net/http/httptest 包，测试方法可以分为两种：一种是使用假的Request/Response，速度快，测试粒度小，适用于测试函数和方法；另外一种是启动http服务器，速度慢，代码覆盖量更大，适用于测试和模拟后端接口。</p><p>先说第一种，使用假的Request/Response：<br>1、已知函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="constructor">HelloHandler(<span class="params">w</span> <span class="params">http</span>.ResponseWriter, <span class="params">r</span> <span class="operator">*</span><span class="params">http</span>.Request)</span> &#123;</span><br><span class="line">w.<span class="constructor">Write([]<span class="params">byte</span>(<span class="string">"hello world"</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloHandler</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">req := httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://www.voidking.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">HelloHandler(w, req)</span><br><span class="line">bytes, _ := ioutil.ReadAll(w.Result().Body)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(bytes) != <span class="string">"hello world"</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"expected hello world, but got"</span>, <span class="keyword">string</span>(bytes))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行测试<br><code>go test -v .</code></p><p>再说第二种，启动http服务器。<br>1、已知函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="constructor">HelloHandler(<span class="params">w</span> <span class="params">http</span>.ResponseWriter, <span class="params">r</span> <span class="operator">*</span><span class="params">http</span>.Request)</span> &#123;</span><br><span class="line">w.<span class="constructor">Write([]<span class="params">byte</span>(<span class="string">"hello world"</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloHandler</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ts := httptest.NewServer(http.HandlerFunc(HelloHandler))</span><br><span class="line"><span class="keyword">defer</span> ts.Close()</span><br><span class="line"> </span><br><span class="line">res, err := http.Get(ts.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">bytes, err := ioutil.ReadAll(res.Body)</span><br><span class="line">res.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(bytes) != <span class="string">"hello world"</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"expected hello world, but got"</span>, <span class="keyword">string</span>(bytes))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行测试<br><code>go test -v .</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近学到了一些Go语言开发时的小技巧，做下记录。&lt;/p&gt;
&lt;h1 id=&quot;提高下载速度&quot;&gt;&lt;a href=&quot;#提高下载速度&quot; class=&quot;headerlink&quot; title=&quot;提高下载速度&quot;&gt;&lt;/a&gt;提高下载速度&lt;/h1&gt;&lt;p&gt;方法一：科学上网&lt;/p&gt;
&lt;p&gt;方法二：配置代理，详情参考&lt;a href=&quot;https://www.voidking.com/dev-golang-gpm/&quot;&gt;《Golang包管理工具》&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# export GOPROXY=https://goproxy.cn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;GOPROXY&lt;/span&gt;=https://goproxy.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;GO111MODULE&lt;/span&gt;=on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v golang.org/x/tools/cmd/goimports&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;方法三：使用gopm&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v github.com/gpmgo/gopm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gopm &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v golang.org/x/tools/cmd/goimports&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="golang" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/golang/"/>
    
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>使用IDEA开发Golang和Python</title>
    <link href="https://www.voidking.com/dev-idea-golang-python/"/>
    <id>https://www.voidking.com/dev-idea-golang-python/</id>
    <published>2020-09-09T12:00:00.000Z</published>
    <updated>2020-09-09T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>突然发现，自己安装了三款 JetBrains 的产品：IDEA、GoLand和PyCharm。这三款软件大小差不多，长得差不多，用起来也差不多。唯一的差别，就是自己在使用不同的编程语言写代码时，需要在它们之间来回切换。<br>能不能，只保留其中一款呢？一个IDE，所有编程语言通用，或者至少能够保证Java、Golang、Python通用。<br>这个需求是合理的，而且是很简单的配置就可以实现的，本文就来总结一下IDEA配置开发Golang和Python的方法。</p><a id="more"></a><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>IDEA本身就是适用于Java开发的，具体配置方法可以参考<a href="https://www.voidking.com/dev-idea-config/">《IDEA的常用配置》</a>和<a href="https://www.voidking.com/dev-idea-maven-javaweb/">《使用IDEA新建Maven JavaWeb项目》</a>。</p><p>此外，IDEA还支持Android开发，可以参考<a href="https://www.voidking.com/dev-android-as/">《Android开发——Android Studio》</a>进行配置。</p><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><p>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索Go，找到Go插件并安装。<br>This plugin extends IntelliJ platform with Go-specific coding assistance and tool integrations, and has everything you could find in GoLand.<br>3、重启IDEA。菜单栏，IntelliJ IDEA，Preferences…。<br>4、Languages &amp; Frameworks，Go。<br>5、配置好GOROOT和GOPATH。</p><p>上面的IDEA配置，和Goland几乎相同，然后就可以像Goland一样开发Go语言程序了。</p><p>Go项目Debug的配置方法，参考<a href="https://www.voidking.com/dev-beego-start-2/">《beego入门篇——下》</a>中的调试一节。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>配置方法参考<a href="https://www.jetbrains.com/help/idea/configuring-python-sdk.html" target="_blank" rel="noopener">Configure a Python SDK</a>。</p><p>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索Python，找到Python插件并安装。<br>The Python plug-in provides smart editing for Python scripts. The feature set of the plugin corresponds to PyCharm IDE Professional Edition.<br>3、重启IDEA。菜单栏，File，Project Structure…。<br>4、Platform Settings，加号，Add Python SDK…。<br>5、Project Settings，Project SDK，选择新添加的Python SDK。</p><p>上面的IDEA配置，和PyCharm有所不同。PyCharm中的Python SDK配置，位置在Preferences，Project: project_name。</p><p>Python项目Debug的配置方法，参考<a href="https://www.voidking.com/dev-pycharm-debug/">《PyCharm调试》</a>。不同的是，如果Debug Configurations窗口点击加号，第一眼看不到Python，那么Python在Other层级下。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上，IDEA就成了一个全能IDE，可以开发Java、Golang和Python。如果需要支持其他语言，同样的方法，查找并安装插件即可。<br>Goland和PyCharm可以卸载了，nice。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;突然发现，自己安装了三款 JetBrains 的产品：IDEA、GoLand和PyCharm。这三款软件大小差不多，长得差不多，用起来也差不多。唯一的差别，就是自己在使用不同的编程语言写代码时，需要在它们之间来回切换。&lt;br&gt;能不能，只保留其中一款呢？一个IDE，所有编程语言通用，或者至少能够保证Java、Golang、Python通用。&lt;br&gt;这个需求是合理的，而且是很简单的配置就可以实现的，本文就来总结一下IDEA配置开发Golang和Python的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
      <category term="java" scheme="https://www.voidking.com/tags/java/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
</feed>
