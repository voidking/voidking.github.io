<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习的郝</title>
  
  <subtitle>好好学习，天天向上！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.voidking.com/"/>
  <updated>2021-08-22T07:00:00.000Z</updated>
  <id>https://www.voidking.com/</id>
  
  <author>
    <name>好好学习的郝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo环境搭建2021年8月版</title>
    <link href="https://www.voidking.com/dev-hexo-build-environment-2021-08/"/>
    <id>https://www.voidking.com/dev-hexo-build-environment-2021-08/</id>
    <published>2021-08-21T13:00:00.000Z</published>
    <updated>2021-08-22T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>15年的时候，写了一篇<a href="http://www.voidking.com/dev-hexo-build-environment/">《Hexo环境搭建》</a>，记录了hexo的详细安装部署步骤。18年的时候，写了一篇<a href="https://www.voidking.com/dev-hexo-build-environment-2018-05/">《Hexo环境搭建2018年5月版》</a>，对安装方法和步骤进行了更新。转眼又过了三年，今天再整理一版hexo环境搭建的流程，与时俱进。</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>系统环境：MACOS</p><p>安装brew、git、nvm、node，具体安装方法可以参考<a href="https://www.voidking.com/hobby-macos-settings/">《MacOS设置》</a>。</p><p>其中，node版本选择 v12.22.5</p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>1、切换国内源<br><code>npm config set registry=&quot;https://registry.npm.taobao.org&quot;</code></p><p>2、安装hexo</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install -g hexo</span></span><br><span class="line"><span class="attr">which</span> <span class="string">hexo</span></span><br></pre></td></tr></table></figure><p>3、初始化<br>新建hexo目录，并安装依赖包。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">init hexo</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install --force</span></span><br></pre></td></tr></table></figure><p>4、测试<br><code>hexo g</code>，<code>hexo s</code>，然后查看 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><p><code>npm install hexo-generator-feed --save</code>，</p><p>注意，后面的参数<code>--save</code>绝对不能省，否则该插件信息不会写入package.json。<br><code>hexo clean</code>，<code>hexo g</code>，查看public文件夹，可以看到atom.xml文件。</p><h2 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>如果报错：gyp: No Xcode or CLT version detected!<br>可以忽略它，也可以通过重装xcode-select解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --print-path</span><br><span class="line">sudo rm -r -f /Library/Developer/CommandLineTools</span><br><span class="line">sudo xcode-select --install</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p><code>hexo clean</code>，<code>hexo g</code>，查看public文件夹，可以看到sitemap.xml和baidusitemap.xml文件。<br>sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。具体参考<a href="http://www.voidking.com/dev-hexo-sitemap/">《hexo生成sitemap》</a>。</p><h2 id="支持本地搜索"><a href="#支持本地搜索" class="headerlink" title="支持本地搜索"></a>支持本地搜索</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>需要配合<code>_config.yml</code>配置和主题配置，详情参考<a href="https://www.voidking.com/dev-hexo-theme-next/">《Hexo更换主题为Next》</a>。</p><h2 id="支持git部署"><a href="#支持git部署" class="headerlink" title="支持git部署"></a>支持git部署</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>进入hexo/themes目录，下载自己维护的next主题<br><code>git clone https://github.com/voidking/hexo-theme-next.git next</code></p><p>该主题的更多个性化设置，可以参考<a href="https://www.voidking.com/dev-hexo-theme-next/">《Hexo更换主题为Next》</a>。</p><h1 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="config.yml配置"></a>config.yml配置</h1><p>hexo目录中的_config.yml修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">好好学习的郝</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">好好学习，天天向上！</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">学而不思则罔，思而不学则殆！</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">好好学习的郝</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://www.voidking.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'*.html'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">yearly:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">monthly:</span> <span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">category_generator:</span> </span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># local search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">striptags</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment"># github and gitee</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://voidking.com/voidking/voidking.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><h2 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h2><p>1、在<a href="https://github.com/" target="_blank" rel="noopener">github</a>上注册一个帐号。</p><p>2、新建一个项目，和帐号名相同。</p><p>3、项目启动Pages服务。</p><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>1、生成本地代码<br><code>hexo g</code></p><p>2、本地测试<br><code>hexo s</code>，然后访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>3、发布到github<br><code>hexo d</code></p><p>4、线上测试<br><a href="http://voidking.github.io" target="_blank" rel="noopener">http://voidking.github.io</a></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>1、申请域名。</p><p>2、域名解析添加CNAME记录指向<code>voidking.github.io</code>。</p><p>3、voidking.github.io项目中添加CNAME文件，绑定域名。</p><p>4、测试访问。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上，hexo安装部署完成。有些步骤写的比较简单，不理解的可以自行谷歌百度。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;15年的时候，写了一篇&lt;a href=&quot;http://www.voidking.com/dev-hexo-build-environment/&quot;&gt;《Hexo环境搭建》&lt;/a&gt;，记录了hexo的详细安装部署步骤。18年的时候，写了一篇&lt;a href=&quot;https://www.voidking.com/dev-hexo-build-environment-2018-05/&quot;&gt;《Hexo环境搭建2018年5月版》&lt;/a&gt;，对安装方法和步骤进行了更新。转眼又过了三年，今天再整理一版hexo环境搭建的流程，与时俱进。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="node" scheme="https://www.voidking.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI失效</title>
    <link href="https://www.voidking.com/dev-hexo-travis-ci-not-work-anymore/"/>
    <id>https://www.voidking.com/dev-hexo-travis-ci-not-work-anymore/</id>
    <published>2021-08-08T09:30:00.000Z</published>
    <updated>2021-08-08T09:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>2021年8月8日，趁着周末空闲修改了一些文章，然后发了新版。但是，发现网站没有更新。<br>看看邮件，没有收到travis ci的邮件，再仔细想想，貌似好久没有收到travis ci的邮件了。<br>登录<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>查看构建记录，好家伙，上次构建还是5月份的！问题大了！</p><p>到底是怎么回事？Travis CI有bug不能用了？GitHub封杀了Travis CI？Travis CI规则改了，开源项目也有构建次数限制？…不知道具体什么原因，本文我们就来排查一下。</p><a id="more"></a><h1 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h1><p>1、登录<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a></p><p>2、点击 voidking/hexo-deploy 项目，点击右上角 More options，点击 Trigger build 进行手动触发构建<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/options.png?imageView2/0/w/700" alt=""></p><p>3、Branch 保持默认 master ，CUSTOM COMMIT MESSAGE 输入随意内容，CUSTOM CONFIG 不填<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/trigger.png?imageView2/0/w/600" alt=""></p><p>4、点击 Trigger custom build，就看到了具体的报错了<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/error.png?imageView2/0/w/700" alt=""><br>弹框提示 Oh no! You tried to trigger a build for voidking/hexo-deploy but the request was rejected.<br>Requests Tab页提示 Could not authorize build request for voidking/hexo-deploy.<br>从5月7日至今，一直是这个错误。</p><h1 id="猜想和验证"><a href="#猜想和验证" class="headerlink" title="猜想和验证"></a>猜想和验证</h1><h2 id="Travis-CI授权过期了？"><a href="#Travis-CI授权过期了？" class="headerlink" title="Travis CI授权过期了？"></a>Travis CI授权过期了？</h2><p>根据报错信息，很容易联想到授权过期，因为之前还好好的，突然不能用了。</p><p>1、进入GitHub <a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>页面，配置Travis CI。<br>2、检查了一遍，并没有授权过期一说，没有什么问题。<br>3、保险起见，调整了一下 Repository access ，保存。<br>然而问题并没有解决，说明不是授权过期问题。</p><h2 id="缺少-travis-yml-？"><a href="#缺少-travis-yml-？" class="headerlink" title="缺少 .travis.yml ？"></a>缺少 .travis.yml ？</h2><p><a href="https://travis-ci.community/t/oh-no-you-tried-to-trigger-a-build-for-orgname-project-but-the-request-was-rejected/10657" target="_blank" rel="noopener">Travis CI论坛</a>上有人是因为缺少 .travis.yml 文件导致。</p><blockquote><p>In your case, it’s due to a missing .travis.yml.</p></blockquote><p>怀疑自己也是误删了 .travis.yml 文件，但是检查了一遍，并没有误删。</p><h2 id="需要换免费版？"><a href="#需要换免费版？" class="headerlink" title="需要换免费版？"></a>需要换免费版？</h2><p><a href="https://travis-ci.community/t/oh-no-you-tried-to-trigger-a-build-for-orgname-project-but-the-request-was-rejected/10657" target="_blank" rel="noopener">Travis CI论坛</a>上还有人没有找到原因，最终换了Github Actions。</p><blockquote><p>I kept struggling on this, and finally left <a href="https://travis-ci.com/" target="_blank" rel="noopener">travis.com</a> for <a href="https://docs.github.com/en/actions/" target="_blank" rel="noopener">Github Actions</a> :persevere: Now I can build &amp; deploy again </p></blockquote><p>如果非换不可的话，我打算换成<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI免费版</a>，毕竟更加熟悉。但是工作量很大，很多地方都需要重新配置。我不信需要这么麻烦！</p><h2 id="需要加入组织？"><a href="#需要加入组织？" class="headerlink" title="需要加入组织？"></a>需要加入组织？</h2><p><a href="https://stackoverflow.com/questions/41034694/travis-could-not-authorize-build-request/41078031" target="_blank" rel="noopener">stackoverflow</a>上有人说需要为组织选择一个plan，莫非现在必须要加入组织才能使用Travis CI？</p><blockquote><p>It’s also worth mentioning that this happens if you do not have a plan selected for your organization. First, you need to select a plan (Travis does not automatically select the free plan for you). Then, you can trigger a build and see if things work.</p></blockquote><blockquote><p>If that does not work, you’re likely out of builds and will need to upgrade the account.</p></blockquote><p>于是，创建了一个<a href="https://github.com/settings/organizations" target="_blank" rel="noopener">Organizations</a>：<a href="https://github.com/begoodcoder" target="_blank" rel="noopener">begoodcoder</a>。<br>然而创建组织后并没有解决问题。PS：个人感觉组织和个人账号的区别，主要是组织可以创建团队。</p><h2 id="Plan-Plan-Plan"><a href="#Plan-Plan-Plan" class="headerlink" title="Plan! Plan! Plan!"></a>Plan! Plan! Plan!</h2><p><a href="https://stackoverflow.com/questions/41034694/travis-could-not-authorize-build-request/41078031" target="_blank" rel="noopener">stackoverflow</a>上有多个优质回答提到了Plan，这个Plan是个啥？</p><blockquote><p>‘Could not authorize build request …’ usually occurs due to</p><ol><li>Has not activated either a free plan or a paid plan.</li><li>Expiration of the subscription.</li><li>Ran out of free trial build credits available for private repositories.<br>Travis CI is always-free only for public repositories. The free plan also provides 10,000 build credits try out building private repositories. Read updated info on <a href="https://docs.travis-ci.com/user/billing-faq" target="_blank" rel="noopener">Billing FAQ</a>.</li></ol></blockquote><p>1、Travis CI右上角点击账号，选择<a href="https://travis-ci.com/account/repositories" target="_blank" rel="noopener">Settings</a></p><p>2、点击页面上的<a href="https://travis-ci.com/account/plan" target="_blank" rel="noopener">Plan</a><br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/plan.png?imageView2/0/w/700" alt=""></p><p>3、选择<a href="https://travis-ci.com/account/plan?billingStep=1" target="_blank" rel="noopener">Free plan</a><br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/select.png?imageView2/0/w/700" alt=""></p><p>4、再次手动触发配送，成功！<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci-not-work-anymore/success.png?imageView2/0/w/700" alt=""></p><p>以上，Travis CI失效的问题就定位并解决了，需要选择一个Plan！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;2021年8月8日，趁着周末空闲修改了一些文章，然后发了新版。但是，发现网站没有更新。&lt;br&gt;看看邮件，没有收到travis ci的邮件，再仔细想想，貌似好久没有收到travis ci的邮件了。&lt;br&gt;登录&lt;a href=&quot;https://travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis CI&lt;/a&gt;查看构建记录，好家伙，上次构建还是5月份的！问题大了！&lt;/p&gt;
&lt;p&gt;到底是怎么回事？Travis CI有bug不能用了？GitHub封杀了Travis CI？Travis CI规则改了，开源项目也有构建次数限制？…不知道具体什么原因，本文我们就来排查一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
      <category term="CICD" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/CICD/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="cicd" scheme="https://www.voidking.com/tags/cicd/"/>
    
  </entry>
  
  <entry>
    <title>使用Python操作Excel表格</title>
    <link href="https://www.voidking.com/dev-python-excel/"/>
    <id>https://www.voidking.com/dev-python-excel/</id>
    <published>2021-08-07T00:00:00.000Z</published>
    <updated>2021-08-07T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近疫情又变得严重，多地都推迟了开学，改为上网课。这样一来，老师们就需要每次上完课后统计学生的出勤情况，包括未上课的同学和上课时间不足40分钟的同学。</p><p>为了方便我们家谭老师的统计工作，决定趁周末写一个脚本，把人工统计变成自动统计。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>1、选择excel读写模块，经过简单比较决定选择 xlrd 和 xlwt 。<br>2、已知学生没有重名，因此全体学生姓名作为集合A，上课学生作为集合B，上课满40分钟学生作为集合C。未上课学生为A-B，上课时间不足40分钟的学生为A-C-(A-B)。<br>3、因为两个班级需要分开统计，因此使用学生姓名作为dict的key，班级作为dict的value。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>1、安装依赖</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install xlrd==<span class="number">1.2</span><span class="number">.0</span></span><br><span class="line">pip3 install xlwt</span><br></pre></td></tr></table></figure><p>之所以指定xlrd的版本，是因为更高的版本不支持读取xlsx格式的表格。</p><p>2、代码实现<br><a href="https://github.com/voidking/scripts/tree/main/python3.9/count-skip-stu" target="_blank" rel="noopener">统计缺勤学生</a></p><p>3、代码执行<br><code>./main.py xxx.xlsx</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近疫情又变得严重，多地都推迟了开学，改为上网课。这样一来，老师们就需要每次上完课后统计学生的出勤情况，包括未上课的同学和上课时间不足40分钟的同学。&lt;/p&gt;
&lt;p&gt;为了方便我们家谭老师的统计工作，决定趁周末写一个脚本，把人工统计变成自动统计。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>修改 MP3 的 ID3Tags</title>
    <link href="https://www.voidking.com/dev-modify-mp3-id3tags/"/>
    <id>https://www.voidking.com/dev-modify-mp3-id3tags/</id>
    <published>2021-05-05T04:00:00.000Z</published>
    <updated>2021-05-05T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ID3Tags是啥？"><a href="#ID3Tags是啥？" class="headerlink" title="ID3Tags是啥？"></a>ID3Tags是啥？</h1><p>ID3Tags，简称 ID3 ，表示MP3文件曲目标签。<br>ID3位于一个mp3文件的开头或末尾的若干字节内，附加了关于该mp3的歌手，标题，专辑名称，年代，风格等信息，该信息就被称为ID3信息，ID3信息分为两个版本，v1和v2版。<br>其中v1版的ID3在mp3文件的末尾128字节，以TAG三个字符开头，后面跟上歌曲信息。v2版一般位于mp3的开头，可以存储歌词，该专辑的图片等大容量的信息。</p><p>ID3全称是啥？没有找到，懂得的小伙伴感谢留言告知。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>使用python第三方库，查看mp3当前id3tags，修改id3tags并保存。<br>找到了两个不错的python第三方库：</p><ul><li><a href="https://eyed3.readthedocs.io/en/latest/" target="_blank" rel="noopener">eyeD3 document</a></li><li><a href="https://mutagen.readthedocs.io/en/latest/" target="_blank" rel="noopener">Mutagen document</a></li></ul><p>这里选择eyeD3，因为使用更简单。<br>使用到的参数和方法，参考<a href="https://eyed3.readthedocs.io/en/latest/eyed3.id3.html#module-eyed3.id3.tag" target="_blank" rel="noopener">eyed3.id3</a>。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="安装eyeD3"><a href="#安装eyeD3" class="headerlink" title="安装eyeD3"></a>安装eyeD3</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> -<span class="keyword">m</span> pip install eyed3 -i http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple/</span><br></pre></td></tr></table></figure><h2 id="命令行查看id3"><a href="#命令行查看id3" class="headerlink" title="命令行查看id3"></a>命令行查看id3</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eyeD3</span> <span class="string">-h</span></span><br><span class="line"><span class="attr">eyeD3</span> <span class="string">song.mp3</span></span><br></pre></td></tr></table></figure><h2 id="脚本查看id3"><a href="#脚本查看id3" class="headerlink" title="脚本查看id3"></a>脚本查看id3</h2><p>使用python脚本查看所有mp3的id3信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> eyed3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_audio_paths</span><span class="params">(dir_path)</span>:</span></span><br><span class="line">    audio_paths = []</span><br><span class="line">    <span class="keyword">for</span> dirs, dirnames, files <span class="keyword">in</span> os.walk(dir_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">'.mp3'</span>):</span><br><span class="line">                audio_paths.append(dirs+<span class="string">'/'</span>+file)</span><br><span class="line">    <span class="keyword">return</span> audio_paths</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_id3</span><span class="params">(audio_path)</span>:</span></span><br><span class="line">    <span class="comment"># load 和 save 时会打印出 Invalid date: ???????:36903863 ，可忽略</span></span><br><span class="line">    audio = eyed3.load(audio_path)</span><br><span class="line">    audio_name = audio_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> audio.tag:</span><br><span class="line">        print(<span class="string">'------ '</span> + audio_name + <span class="string">' ------'</span>)</span><br><span class="line">        print(<span class="string">'不存在id3'</span>)</span><br><span class="line">        print(<span class="string">'------ '</span> + <span class="string">'------'</span> + <span class="string">' ------'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'------ '</span> + audio_name + <span class="string">' ------'</span>)</span><br><span class="line">        <span class="keyword">if</span> audio.tag.title:</span><br><span class="line">            print(<span class="string">'title: '</span> + audio.tag.title)</span><br><span class="line">        <span class="keyword">if</span> audio.tag.artist:</span><br><span class="line">            print(<span class="string">'artist: '</span> + audio.tag.artist)</span><br><span class="line">        print(<span class="string">'------ '</span> + <span class="string">'------'</span> + <span class="string">' ------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    audio_paths = get_audio_paths(<span class="string">'./mp3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示id3信息</span></span><br><span class="line">    <span class="keyword">for</span> audio_path <span class="keyword">in</span> audio_paths:</span><br><span class="line">        show_id3(audio_path)</span><br></pre></td></tr></table></figure><h2 id="脚本修改id3"><a href="#脚本修改id3" class="headerlink" title="脚本修改id3"></a>脚本修改id3</h2><p>需求：已有200个mp3文件，id3信息都是广告。现在想要批量清除mp3文件现有的id3，然后根据文件名修改title，根据真实作者修改artist，根据真实封面修改封面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_id3</span><span class="params">(audio_path, title, artist ,img_path)</span>:</span></span><br><span class="line">    audio = eyed3.load(audio_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> audio.tag:</span><br><span class="line">        audio.initTag()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        audio.tag.clear()</span><br><span class="line">    audio.tag.title = title</span><br><span class="line">    audio.tag.artist = artist</span><br><span class="line">    audio.tag.images.set(<span class="number">3</span>, open(img_path,<span class="string">'rb'</span>).read(), <span class="string">'image/jpeg'</span>)</span><br><span class="line">    audio.tag.save()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    audio_paths = get_audio_paths(<span class="string">'./mp3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改id3信息</span></span><br><span class="line">    <span class="keyword">for</span> audio_path <span class="keyword">in</span> audio_paths:</span><br><span class="line">        title = audio_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        artist = <span class="string">'钱文忠'</span></span><br><span class="line">        img_path = <span class="string">'./img.png'</span> <span class="comment"># 200x200</span></span><br><span class="line">        modify_id3(audio_path, title, artist ,img_path)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ID3Tags是啥？&quot;&gt;&lt;a href=&quot;#ID3Tags是啥？&quot; class=&quot;headerlink&quot; title=&quot;ID3Tags是啥？&quot;&gt;&lt;/a&gt;ID3Tags是啥？&lt;/h1&gt;&lt;p&gt;ID3Tags，简称 ID3 ，表示MP3文件曲目标签。&lt;br&gt;ID3位于一个mp3文件的开头或末尾的若干字节内，附加了关于该mp3的歌手，标题，专辑名称，年代，风格等信息，该信息就被称为ID3信息，ID3信息分为两个版本，v1和v2版。&lt;br&gt;其中v1版的ID3在mp3文件的末尾128字节，以TAG三个字符开头，后面跟上歌曲信息。v2版一般位于mp3的开头，可以存储歌词，该专辑的图片等大容量的信息。&lt;/p&gt;
&lt;p&gt;ID3全称是啥？没有找到，懂得的小伙伴感谢留言告知。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next主题显示文章更新时间</title>
    <link href="https://www.voidking.com/dev-hexo-next-update-time/"/>
    <id>https://www.voidking.com/dev-hexo-next-update-time/</id>
    <published>2021-05-01T01:00:00.000Z</published>
    <updated>2021-05-01T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><a href="https://www.voidking.com/dev-hexo-theme-next/">《Hexo更换主题为Next》</a>一文中，关闭了文章的更新时间。因为next主题默认是使用markdown文件的修改时间作为更新时间，这个时间是不符合预期的。比如我换了电脑，clone下来markdown文件，写完后发布，那么所有文章的更新时间都会变成当前时间，这个就不符合预期，就不对。</p><p>但是，文章更新时间确实是有意义的，读者能够通过更新时间推断出一篇文章的有效性。比如很多工具和技术昨天可以用，文章写的没毛病，但是也许今天就不能用了。</p><p>本文就来研究一下，怎样让next主题显示符合预期的、准确的更新时间。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先，我们知道next主题是支持显示更新时间的，只不过显示的更新时间不对。那么，能不能显示对的更新时间呢？看代码。</p><p>1、<code>_config.yml</code>，其中关于更新时间的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2、<code>layout/_macro/post.swig</code>，其中关于更新时间的部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.post_meta.updated_at.enable and datetime_diff %&#125;</span><br><span class="line">  &#123;%- set display_updated = not theme.post_meta.updated_at.another_day or theme.post_meta.updated_at.another_day and date_diff %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if display_updated or not theme.post_meta.created_at %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-calendar-check-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>&#123;&#123; __('post.edited') &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">time</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.modified') + __('symbol.colon') + full_date(post.updated) &#125;&#125;"</span> <span class="attr">itemprop</span>=<span class="string">"dateModified"</span> <span class="attr">datetime</span>=<span class="string">"&#123;&#123; moment(post.updated).format() &#125;&#125;"</span>&gt;</span>&#123;&#123; date(post.updated) &#125;&#125;<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>由上面的代码我们可以得知：</p><ul><li>只要在文章头部yaml定义中添加 updated 字段，就可以显示我们自己定义的更新时间，而不是文件的修改时间。</li><li>如果开启了 <code>post_meta.updated_at.another_day</code> ，当 date 和 updated 日期相同时，只会显示发布时间。</li></ul><p>因此，我们现在有两个思路来实现next主题显示符合预期的更新时间。<br>思路一：开启 <code>post_meta.updated_at.enable</code>，然后给所有的md文件添加 updated 字段。<br>思路二：开启 <code>post_meta.updated_at.enable</code>，修改 post.swig ，令没有 updated 字段的md文件只显示发布时间，有 updated 字段的md文件显示发布时间和更新时间。</p><p>这里选择思路一，因为实现的逻辑最简单，而且小编的shell脚本用的还不错。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="开启更新时间显示"><a href="#开启更新时间显示" class="headerlink" title="开启更新时间显示"></a>开启更新时间显示</h2><p><code>_config.yml</code>，开启更新时间显示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="添加updated字段"><a href="#添加updated字段" class="headerlink" title="添加updated字段"></a>添加updated字段</h2><p>1、准备脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">dir=<span class="string">"_posts"</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$&#123;dir&#125;</span> | grep <span class="string">'.md'</span>`;<span class="keyword">do</span></span><br><span class="line">    content=$(cat <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;file&#125;</span>| head -n 10 | grep <span class="string">'date: '</span>)</span><br><span class="line">    datestr=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$content</span>"</span> | awk <span class="string">'&#123;print $2" "$3&#125;'</span>)</span><br><span class="line">    newcontent=<span class="string">"updated: "</span><span class="variable">$datestr</span></span><br><span class="line">    sed -i <span class="string">"/<span class="variable">$content</span>/a\\<span class="variable">$newcontent</span>"</span> <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;file&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>2、执行脚本<br>把脚本放到 source 目录下，然后执行脚本 <code>bash modify.sh</code><br>备注：需要linux环境，mac环境的sed命令和linux环境的sed命令有差异。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-theme-next/&quot;&gt;《Hexo更换主题为Next》&lt;/a&gt;一文中，关闭了文章的更新时间。因为next主题默认是使用markdown文件的修改时间作为更新时间，这个时间是不符合预期的。比如我换了电脑，clone下来markdown文件，写完后发布，那么所有文章的更新时间都会变成当前时间，这个就不符合预期，就不对。&lt;/p&gt;
&lt;p&gt;但是，文章更新时间确实是有意义的，读者能够通过更新时间推断出一篇文章的有效性。比如很多工具和技术昨天可以用，文章写的没毛病，但是也许今天就不能用了。&lt;/p&gt;
&lt;p&gt;本文就来研究一下，怎样让next主题显示符合预期的、准确的更新时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI部署项目到服务器</title>
    <link href="https://www.voidking.com/dev-travis-ci-deploy-to-server/"/>
    <id>https://www.voidking.com/dev-travis-ci-deploy-to-server/</id>
    <published>2021-04-11T08:00:00.000Z</published>
    <updated>2021-08-22T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-hexo-travis-ci/">《Hexo配置Travis CI自动发布》</a>一文中，我们学习了使用travis-ci构建发布hexo项目的方法。</p><p>因为项目的特殊性，所以发布时只是把代码push到了git仓库，并没有把代码发布到我们自己的服务。本文，我们就来学习一下怎样通过travis-ci，把项目发布到我们自己的服务器。</p><p>需求：<br>已知hexo项目部署在github，百度抓取不到github的内容，因此我们想要在自己的服务器也部署一份代码，国内的流量打到自己的服务器。实现国内流量 -&gt; 阿里云服务器，国外流量 -&gt; github pages。<br>配置 hexo-deploy ，在发布时会同时发布静态页面到 <a href="https://github.com/voidking/voidking.github.io.git" target="_blank" rel="noopener">voidking.github.io</a> 和 <a href="https://gitee.com/voidking/voidking.git" target="_blank" rel="noopener">voidking</a>。<br>阿里云服务器上有项目 /opt/nginx/work/voidking ，项目仓库为 <a href="https://gitee.com/voidking/voidking.git" target="_blank" rel="noopener">voidking</a>。<br>现在想要实现的是，当使用 hexo-deploy 之后，阿里云服务器上的代码能够自动更新。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>给 voidking.github.io 项目配置travis-ci，当静态页面更新完成后，在阿里云服务器上执行 git pull。<br>中间需要解决的主要问题是： travis-ci 访问阿里云服务器的权限问题。</p><p>另外，因为 voidking.github.io 项目是线上项目，所以我们创建一个在github上和travis-ci上分别创建一个 travis-test 项目，用来测试travis-ci的配置。</p><h1 id="配置travis-ci"><a href="#配置travis-ci" class="headerlink" title="配置travis-ci"></a>配置travis-ci</h1><h2 id="服务器密钥配置"><a href="#服务器密钥配置" class="headerlink" title="服务器密钥配置"></a>服务器密钥配置</h2><p>1、创建一个用户专门用来更新代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m voidking -s /bin/bash</span><br><span class="line">passwd voidking</span><br><span class="line">chown voidking -R /opt/nginx/work/</span><br></pre></td></tr></table></figure><p>2、生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su voidking</span><br><span class="line">cd ~</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>执行完之后，.ssh目录下生成了 id_rsa 和 id_rsa.pub。</p><p>3、使密钥生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALI_IP="8.136.13.58"</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub voidking@$&#123;ALI_IP&#125;</span><br><span class="line">ssh voidking@$&#123;ALI_IP&#125;</span><br></pre></td></tr></table></figure><h2 id="安装travis-client"><a href="#安装travis-client" class="headerlink" title="安装travis client"></a>安装travis client</h2><p>直接安装travis破坏服务器环境，因此最好使用Docker安装travis。<br>1、运行travis容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull ruby:slim</span><br><span class="line">docker run --name travis -it -d ruby:slim /bin/bash</span><br><span class="line">docker exec -it travis /bin/bash</span><br></pre></td></tr></table></figure><p>2、容器内安装travis client</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span></span><br><span class="line">gem install travis</span><br><span class="line">travis -h</span><br></pre></td></tr></table></figure><h2 id="travis-ci密钥配置"><a href="#travis-ci密钥配置" class="headerlink" title="travis-ci密钥配置"></a>travis-ci密钥配置</h2><p>1、拷贝密钥到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/voidking/.ssh/id_rsa travis:/tmp</span><br><span class="line">docker exec -it travis /bin/bash</span><br></pre></td></tr></table></figure><p>2、登录travis-ci</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">travis login --com --github-token xxxxxx</span><br></pre></td></tr></table></figure><p>3、对id_rsa加密，生成id_rsa.enc；同时生成服务端解密命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch .travis.yml</span><br><span class="line">travis encrypt-file id_rsa --add --com --repo=voidking/travis-test</span><br></pre></td></tr></table></figure><p>详情参考<a href="https://docs.travis-ci.com/user/encrypting-files" target="_blank" rel="noopener">Encrypting Files</a>。</p><p>执行完命令，会生成加密文件 id_rsa.enc，.travis.yml 中会被写入解密命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K <span class="variable">$encrypted_f217180e22ee_key</span> -iv <span class="variable">$encrypted_f217180e22ee_iv</span> -<span class="keyword">in</span> id_rsa.<span class="keyword">enc</span> -<span class="keyword">out</span> id_rsa -<span class="keyword">d</span></span><br></pre></td></tr></table></figure><p>并且，变量 <code>encrypted_f217180e22ee_key</code> 和 <code>encrypted_f217180e22ee_iv</code> 会填入travis-ci上travis-test项目中的环境变量配置中。</p><h2 id="travis-yml配置"><a href="#travis-yml配置" class="headerlink" title="travis.yml配置"></a>travis.yml配置</h2><p>1、访问<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI Pro</a>，找到 travis-test 项目，Settings，在Environment Variables一栏填入Name为GITEE_TOKEN，VALUE为gitee的access token。</p><p>2、在github上 travis-test 项目中放入 id_rsa.enc</p><p>3、在github上 travis-test 项目中创建 .travis.yml，内容为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">3.6</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># build main branch only</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ALI_IP:</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GIT_USER:</span> <span class="string">voidking</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GITEE_PAGES_REPO:</span> <span class="string">gitee.com/voidking/voidking.git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_f217180e22ee_key</span> <span class="string">-iv</span> <span class="string">$encrypted_f217180e22ee_iv</span> <span class="string">-in</span> <span class="string">id_rsa.enc</span> <span class="string">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="string">-d</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh</span> <span class="string">voidking@$&#123;ALI_IP&#125;</span> <span class="string">"cd /opt/nginx/work/voidking/ &amp;&amp; git pull --force --quiet \"https://$&#123;GIT_USER&#125;:$&#123;GITEE_TOKEN&#125;@$&#123;GITEE_PAGES_REPO&#125;\" master:master"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">"deploy success"</span></span><br></pre></td></tr></table></figure><p>4、提交代码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commmit -m <span class="string">"添加travis.yml"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>5、验证<br>打开<a href="https://travis-ci.com/github/voidking/travis-test" target="_blank" rel="noopener">travis voidking/travis-test</a> ，可以看到脚本已经成功执行。<br><img src="http://cdn.voidking.com/@/imgs/travis-ci-deploy-to-server/success.png?imageView2/0/w/800" alt=""></p><p>登录阿里云服务器，git log查看代码版本，确实也已经更新到了最新版。nice！</p><p>最后，同样的步骤配置到 voidking.github.io 项目上即可。</p><h1 id="配置travis-ci简化版"><a href="#配置travis-ci简化版" class="headerlink" title="配置travis-ci简化版"></a>配置travis-ci简化版</h1><p>上面的流程，安全性较高，但是整个流程很麻烦，有没有更简单的办法？必须是有的。<br>方法一：安装sshpass，直接使用密码登录服务器执行命令。<br>方法二：把私钥作为参数配置到travis-ci，使用时写入到文件中。</p><p>本节中我们研究一下方法二的配置方法。</p><h2 id="服务器密钥配置-1"><a href="#服务器密钥配置-1" class="headerlink" title="服务器密钥配置"></a>服务器密钥配置</h2><p>1、创建一个用户专门用来更新代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m voidking -s /bin/bash</span><br><span class="line">passwd voidking</span><br><span class="line">chown voidking -R /opt/nginx/work/</span><br></pre></td></tr></table></figure><p>2、生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su voidking</span><br><span class="line">cd ~</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>执行完之后，.ssh目录下生成了 id_rsa 和 id_rsa.pub。</p><p>3、使密钥生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALI_IP="8.136.13.58"</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub voidking@$&#123;ALI_IP&#125;</span><br><span class="line">ssh voidking@$&#123;ALI_IP&#125;</span><br></pre></td></tr></table></figure><h2 id="travis-ci密钥配置-1"><a href="#travis-ci密钥配置-1" class="headerlink" title="travis-ci密钥配置"></a>travis-ci密钥配置</h2><p>1、加密私钥<br><code>cat .ssh/id_rsa | base64 | tr -d &#39;\n&#39;</code></p><p>2、访问<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI Pro</a>，找到 travis-test 项目，Settings，Environment Variables。创建两组环境变量：</p><ul><li>Name为<code>GITEE_TOKEN</code>，VALUE为gitee的access token。</li><li>Name为<code>ID_RSA</code>，VALUE为加密后的私钥。</li></ul><h2 id="travis-yml配置-1"><a href="#travis-yml配置-1" class="headerlink" title="travis.yml配置"></a>travis.yml配置</h2><p>1、在github上 travis-test 项目中创建 .travis.yml，内容为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">3.6</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># build main branch only</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ALI_IP:</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GIT_USER:</span> <span class="string">voidking</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GITEE_PAGES_REPO:</span> <span class="string">gitee.com/voidking/voidking.git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">$&#123;ID_RSA&#125;</span> <span class="string">|</span> <span class="string">base64</span> <span class="string">-d</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh</span> <span class="string">voidking@$&#123;ALI_IP&#125;</span> <span class="string">"cd /opt/nginx/work/voidking/ &amp;&amp; git pull --force --quiet \"https://$&#123;GIT_USER&#125;:$&#123;GITEE_TOKEN&#125;@$&#123;GITEE_PAGES_REPO&#125;\" master:master"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">"deploy success"</span></span><br></pre></td></tr></table></figure><p>2、提交代码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commmit -m <span class="string">"简化travis.yml"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>3、验证<br>打开<a href="https://travis-ci.com/github/voidking/travis-test" target="_blank" rel="noopener">travis voidking/travis-test</a> ，查看脚本执行日志。<br>登录阿里云服务器，git log查看代码版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-travis-ci/&quot;&gt;《Hexo配置Travis CI自动发布》&lt;/a&gt;一文中，我们学习了使用travis-ci构建发布hexo项目的方法。&lt;/p&gt;
&lt;p&gt;因为项目的特殊性，所以发布时只是把代码push到了git仓库，并没有把代码发布到我们自己的服务。本文，我们就来学习一下怎样通过travis-ci，把项目发布到我们自己的服务器。&lt;/p&gt;
&lt;p&gt;需求：&lt;br&gt;已知hexo项目部署在github，百度抓取不到github的内容，因此我们想要在自己的服务器也部署一份代码，国内的流量打到自己的服务器。实现国内流量 -&amp;gt; 阿里云服务器，国外流量 -&amp;gt; github pages。&lt;br&gt;配置 hexo-deploy ，在发布时会同时发布静态页面到 &lt;a href=&quot;https://github.com/voidking/voidking.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking.github.io&lt;/a&gt; 和 &lt;a href=&quot;https://gitee.com/voidking/voidking.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking&lt;/a&gt;。&lt;br&gt;阿里云服务器上有项目 /opt/nginx/work/voidking ，项目仓库为 &lt;a href=&quot;https://gitee.com/voidking/voidking.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking&lt;/a&gt;。&lt;br&gt;现在想要实现的是，当使用 hexo-deploy 之后，阿里云服务器上的代码能够自动更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
      <category term="CICD" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/CICD/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="cicd" scheme="https://www.voidking.com/tags/cicd/"/>
    
  </entry>
  
  <entry>
    <title>怎样给文件、变量和函数命名？</title>
    <link href="https://www.voidking.com/dev-how-to-name-better/"/>
    <id>https://www.voidking.com/dev-how-to-name-better/</id>
    <published>2021-03-07T12:00:00.000Z</published>
    <updated>2021-08-01T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用user_tool.py还是user_utils.py？使用name还是username？使用user_add还是add_user？使用get_user_by_name还是get_users_by_name？等等等等，在编程活动中，我们经常会产生各种关于命名的纠结。<br>给文件、函数、变量命名是一件很难的事，但是也是有方法的。本文中，我们就来学习一下文件、变量和函数命名的方法。</p><p>参考文档：</p><ul><li><a href="https://www.cnblogs.com/dolphin0520/p/10567879.html" target="_blank" rel="noopener">工程实践：给函数取一个”好”的名字</a></li><li><a href="https://github.com/zh-google-styleguide/zh-google-styleguide" target="_blank" rel="noopener">Google 开源项目风格指南 (中文版)</a></li><li><a href="https://leohxj.gitbooks.io/a-programmer-prepares/content/programmer-basic/naming.html" target="_blank" rel="noopener">命名规范</a></li></ul><h1 id="命名方法"><a href="#命名方法" class="headerlink" title="命名方法"></a>命名方法</h1><p>要领：一看就懂，保持一致。</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>由于Windows, OSX下文件名不区分大小写(linux是区分的)，所以命名建议还是以全部小写为主。<br>连字符可以使用中划线、下划线或者省略，关键是要统一。</p><p>目录建议连字符使用中划线，比如: my-project-name。<br>有复数的情况使用复数命名法，比如: scripts, styles, images和data-modules。<br>文件建议连字符使用下划线，比如：user_test.py。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量命名常用的有两种方式:<br>下划线命名法，比如: my_variable<br>驼峰式命名法，比如: myVariale</p><p>python语言建议使用下划线命名法。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数命名常用的有两种方式:<br>下划线命名法，比如: get_user_by_name<br>驼峰式命名法，比如: getUserByName</p><p>python语言建议使用下划线命名法。不同于变量命名的是，函数名称要使用动词开头，并且尽可能准确。</p><h1 id="常用动词表"><a href="#常用动词表" class="headerlink" title="常用动词表"></a>常用动词表</h1><p>动词选取要精准。通常来说，动词决定了一个函数要采取什么”动作”。动词取的好，一个函数名字已经成功了80%。</p><p>常用动词表：</p><table><thead><tr><th align="left">类别</th><th align="left">单词</th></tr></thead><tbody><tr><td align="left">添加/插入/创建/初始化/加载</td><td align="left">add、append、insert、create、initialize、load</td></tr><tr><td align="left">删除/销毁</td><td align="left">delete、remove、destroy、drop</td></tr><tr><td align="left">打开/开始/启动</td><td align="left">open、start</td></tr><tr><td align="left">关闭/停止</td><td align="left">close、stop</td></tr><tr><td align="left">获取/读取/查找/查询</td><td align="left">get、fetch、acquire、read、search、find、query</td></tr><tr><td align="left">设置/重置/放入/写入/释放/刷新</td><td align="left">set、reset、put、write、release、refresh</td></tr><tr><td align="left">发送/推送</td><td align="left">send、push</td></tr><tr><td align="left">接收/拉取</td><td align="left">receive、pull</td></tr><tr><td align="left">提交/撤销/取消</td><td align="left">submit、cancel</td></tr><tr><td align="left">收集/采集/选取/选择</td><td align="left">collect、pick、select</td></tr><tr><td align="left">提取/解析</td><td align="left">sub、extract、parse</td></tr><tr><td align="left">编码/解码</td><td align="left">encode、decode</td></tr><tr><td align="left">填充/打包/压缩</td><td align="left">fill、pack、compress</td></tr><tr><td align="left">清空/拆包/解压</td><td align="left">flush、clear、unpack、decompress</td></tr><tr><td align="left">增加/减少</td><td align="left">increase、decrease、reduce</td></tr><tr><td align="left">分隔/拼接</td><td align="left">split、join、concat</td></tr><tr><td align="left">过滤/校验/检测</td><td align="left">filter、valid、check</td></tr></tbody></table><h1 id="常用领域词"><a href="#常用领域词" class="headerlink" title="常用领域词"></a>常用领域词</h1><p>名词使用领域词汇。举个例子：集合的容量通常用capacity、集合实际元素个数用size、字符串长度用length，这种就遵循大家的使用习惯，不要用size去形如字符串的长度。</p><p>再比如，假如使用到建造者模式，那么通常会用build作为函数名字，这个时候就不要另辟蹊径，用create来作为函数名字，使用大家约定俗成的命名习惯更容易让你的代码被别人读懂。</p><p>常用名词表：</p><table><thead><tr><th align="left">类别</th><th align="left">单词</th></tr></thead><tbody><tr><td align="left">容量/大小/长度</td><td align="left">capacity、size、length</td></tr><tr><td align="left">实例/上下文</td><td align="left">instance、context</td></tr><tr><td align="left">配置</td><td align="left">config、settings</td></tr><tr><td align="left">头部/前面/前一个/第一个</td><td align="left">header、front、previous、first</td></tr><tr><td align="left">尾部/后面/后一个/最后一个</td><td align="left">tail、back、next、last</td></tr><tr><td align="left">区间/区域/某一部分/范围/规模</td><td align="left">range、interval、region、area、section、scope、scale</td></tr><tr><td align="left">缓存/缓冲/会话</td><td align="left">cache、buffer、session</td></tr><tr><td align="left">本地/局部/全局</td><td align="left">local、global</td></tr><tr><td align="left">成员/元素</td><td align="left">member、element</td></tr><tr><td align="left">菜单/列表</td><td align="left">menu、list</td></tr><tr><td align="left">源/目标</td><td align="left">source、destination、target</td></tr></tbody></table><h1 id="常用缩写表"><a href="#常用缩写表" class="headerlink" title="常用缩写表"></a>常用缩写表</h1><p>1、本缩写表是《编码命名规范》的附录。</p><p>2、本缩写表中列出的都是通用性缩写，不提供标准缩写，如：Win9x、COM 等。</p><p>3、使用本缩写表里的缩写时，请对其进行必要的注释说明。</p><p>4、除少数情况以外，大部分缩写与大小写无关。</p><a id="more"></a><table><thead><tr><th align="center">缩写</th><th align="center">全称</th></tr></thead><tbody><tr><td align="center">addr</td><td align="center">Address</td></tr><tr><td align="center">adm</td><td align="center">Administrator</td></tr><tr><td align="center">app</td><td align="center">Application</td></tr><tr><td align="center">arg</td><td align="center">Argument</td></tr><tr><td align="center">asm</td><td align="center">assemble</td></tr><tr><td align="center">asyn</td><td align="center">asynchronization</td></tr><tr><td align="center">avg</td><td align="center">average</td></tr><tr><td align="center">DB</td><td align="center">Database</td></tr><tr><td align="center">bk</td><td align="center">back</td></tr><tr><td align="center">bmp</td><td align="center">Bitmap</td></tr><tr><td align="center">btn</td><td align="center">Button</td></tr><tr><td align="center">buf</td><td align="center">Buffer</td></tr><tr><td align="center">calc</td><td align="center">Calculate</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">chg</td><td align="center">Change</td></tr><tr><td align="center">clk</td><td align="center">Click</td></tr><tr><td align="center">clr</td><td align="center">color</td></tr><tr><td align="center">cmd</td><td align="center">Command</td></tr><tr><td align="center">cmp</td><td align="center">Compare</td></tr><tr><td align="center">col</td><td align="center">Column</td></tr><tr><td align="center">coord</td><td align="center">coordinates</td></tr><tr><td align="center">cpy</td><td align="center">copy</td></tr><tr><td align="center">ctl/ctrl</td><td align="center">Control</td></tr><tr><td align="center">cur</td><td align="center">Current</td></tr><tr><td align="center">cyl</td><td align="center">Cylinder</td></tr><tr><td align="center">dbg</td><td align="center">Debug</td></tr><tr><td align="center">dbl</td><td align="center">Double</td></tr><tr><td align="center">dec</td><td align="center">Decrease</td></tr><tr><td align="center">def</td><td align="center">default</td></tr><tr><td align="center">del</td><td align="center">Delete</td></tr><tr><td align="center">dest/dst</td><td align="center">Destination</td></tr><tr><td align="center">dev</td><td align="center">Device</td></tr><tr><td align="center">dict</td><td align="center">dictionary</td></tr><tr><td align="center">diff</td><td align="center">different</td></tr><tr><td align="center">dir</td><td align="center">directory</td></tr><tr><td align="center">disp</td><td align="center">Display</td></tr><tr><td align="center">div</td><td align="center">Divide</td></tr><tr><td align="center">dlg</td><td align="center">Dialog</td></tr><tr><td align="center">doc</td><td align="center">Document</td></tr><tr><td align="center">drv</td><td align="center">Driver</td></tr><tr><td align="center">dyna</td><td align="center">Dynamic</td></tr><tr><td align="center">env</td><td align="center">Environment</td></tr><tr><td align="center">err</td><td align="center">error</td></tr><tr><td align="center">ex/ext</td><td align="center">Extend</td></tr><tr><td align="center">exec</td><td align="center">execute</td></tr><tr><td align="center">flg</td><td align="center">flag</td></tr><tr><td align="center">frm</td><td align="center">Frame</td></tr><tr><td align="center">func/fn</td><td align="center">Function</td></tr><tr><td align="center">grp</td><td align="center">group</td></tr><tr><td align="center">horz</td><td align="center">Horizontal</td></tr><tr><td align="center">idx/ndx</td><td align="center">Index</td></tr><tr><td align="center">img</td><td align="center">Image</td></tr><tr><td align="center">impl</td><td align="center">Implement</td></tr><tr><td align="center">inc</td><td align="center">Increase</td></tr><tr><td align="center">info</td><td align="center">Information</td></tr><tr><td align="center">init</td><td align="center">Initial/Initialize/Initialization</td></tr><tr><td align="center">ins</td><td align="center">Insert</td></tr><tr><td align="center">inst</td><td align="center">Instance</td></tr><tr><td align="center">INT/intr</td><td align="center">Interrupt</td></tr><tr><td align="center">len</td><td align="center">Length</td></tr><tr><td align="center">lib</td><td align="center">Library</td></tr><tr><td align="center">lnk</td><td align="center">Link</td></tr><tr><td align="center">log</td><td align="center">logical</td></tr><tr><td align="center">lst</td><td align="center">List</td></tr><tr><td align="center">max</td><td align="center">maximum</td></tr><tr><td align="center">mem</td><td align="center">Memory</td></tr><tr><td align="center">mgr/man</td><td align="center">Manage/Manager</td></tr><tr><td align="center">mid</td><td align="center">middle</td></tr><tr><td align="center">min</td><td align="center">minimum</td></tr><tr><td align="center">msg</td><td align="center">Message</td></tr><tr><td align="center">mul</td><td align="center">Multiply</td></tr><tr><td align="center">num</td><td align="center">Number</td></tr><tr><td align="center">obj</td><td align="center">Object</td></tr><tr><td align="center">ofs</td><td align="center">Offset</td></tr><tr><td align="center">org</td><td align="center">Origin</td></tr><tr><td align="center">param</td><td align="center">Parameter</td></tr><tr><td align="center">pic</td><td align="center">picture</td></tr><tr><td align="center">pkg</td><td align="center">package</td></tr><tr><td align="center">pnt/pt</td><td align="center">Point</td></tr><tr><td align="center">pos</td><td align="center">Position</td></tr><tr><td align="center">pre/prev</td><td align="center">previous</td></tr><tr><td align="center">prg</td><td align="center">program</td></tr><tr><td align="center">prn</td><td align="center">Print</td></tr><tr><td align="center">proc</td><td align="center">Process</td></tr><tr><td align="center">prop</td><td align="center">Properties</td></tr><tr><td align="center">psw</td><td align="center">Password</td></tr><tr><td align="center">ptr</td><td align="center">Pointer</td></tr><tr><td align="center">pub</td><td align="center">Public</td></tr><tr><td align="center">rc</td><td align="center">rect</td></tr><tr><td align="center">ref</td><td align="center">Reference</td></tr><tr><td align="center">reg</td><td align="center">Register</td></tr><tr><td align="center">req</td><td align="center">request</td></tr><tr><td align="center">res</td><td align="center">Resource</td></tr><tr><td align="center">ret</td><td align="center">return</td></tr><tr><td align="center">rgn</td><td align="center">region</td></tr><tr><td align="center">scr</td><td align="center">screen</td></tr><tr><td align="center">sec</td><td align="center">Second</td></tr><tr><td align="center">seg</td><td align="center">Segment</td></tr><tr><td align="center">sel</td><td align="center">Select</td></tr><tr><td align="center">src</td><td align="center">Source</td></tr><tr><td align="center">std</td><td align="center">Standard</td></tr><tr><td align="center">stg</td><td align="center">Storage</td></tr><tr><td align="center">stm</td><td align="center">Stream</td></tr><tr><td align="center">str</td><td align="center">String</td></tr><tr><td align="center">sub</td><td align="center">Subtract</td></tr><tr><td align="center">sum</td><td align="center">summation</td></tr><tr><td align="center">svr</td><td align="center">Server</td></tr><tr><td align="center">sync</td><td align="center">Synchronization</td></tr><tr><td align="center">sys</td><td align="center">System</td></tr><tr><td align="center">tbl</td><td align="center">Table</td></tr><tr><td align="center">temp/tmp</td><td align="center">Temporary</td></tr><tr><td align="center">tran/trans</td><td align="center">translate/transation/transparent</td></tr><tr><td align="center">tst</td><td align="center">Test</td></tr><tr><td align="center">txt</td><td align="center">text</td></tr><tr><td align="center">unk</td><td align="center">Unknown</td></tr><tr><td align="center">upd</td><td align="center">Update</td></tr><tr><td align="center">upg</td><td align="center">Upgrade</td></tr><tr><td align="center">util</td><td align="center">Utility</td></tr><tr><td align="center">var</td><td align="center">Variable</td></tr><tr><td align="center">ver</td><td align="center">Version</td></tr><tr><td align="center">vert</td><td align="center">Vertical</td></tr><tr><td align="center">vir</td><td align="center">Virus</td></tr><tr><td align="center">wnd</td><td align="center">Window</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用user_tool.py还是user_utils.py？使用name还是username？使用user_add还是add_user？使用get_user_by_name还是get_users_by_name？等等等等，在编程活动中，我们经常会产生各种关于命名的纠结。&lt;br&gt;给文件、函数、变量命名是一件很难的事，但是也是有方法的。本文中，我们就来学习一下文件、变量和函数命名的方法。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/dolphin0520/p/10567879.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;工程实践：给函数取一个”好”的名字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zh-google-styleguide/zh-google-styleguide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google 开源项目风格指南 (中文版)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leohxj.gitbooks.io/a-programmer-prepares/content/programmer-basic/naming.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;命名规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;命名方法&quot;&gt;&lt;a href=&quot;#命名方法&quot; class=&quot;headerlink&quot; title=&quot;命名方法&quot;&gt;&lt;/a&gt;命名方法&lt;/h1&gt;&lt;p&gt;要领：一看就懂，保持一致。&lt;/p&gt;
&lt;h2 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; title=&quot;文件&quot;&gt;&lt;/a&gt;文件&lt;/h2&gt;&lt;p&gt;由于Windows, OSX下文件名不区分大小写(linux是区分的)，所以命名建议还是以全部小写为主。&lt;br&gt;连字符可以使用中划线、下划线或者省略，关键是要统一。&lt;/p&gt;
&lt;p&gt;目录建议连字符使用中划线，比如: my-project-name。&lt;br&gt;有复数的情况使用复数命名法，比如: scripts, styles, images和data-modules。&lt;br&gt;文件建议连字符使用下划线，比如：user_test.py。&lt;/p&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;变量命名常用的有两种方式:&lt;br&gt;下划线命名法，比如: my_variable&lt;br&gt;驼峰式命名法，比如: myVariale&lt;/p&gt;
&lt;p&gt;python语言建议使用下划线命名法。&lt;/p&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;函数命名常用的有两种方式:&lt;br&gt;下划线命名法，比如: get_user_by_name&lt;br&gt;驼峰式命名法，比如: getUserByName&lt;/p&gt;
&lt;p&gt;python语言建议使用下划线命名法。不同于变量命名的是，函数名称要使用动词开头，并且尽可能准确。&lt;/p&gt;
&lt;h1 id=&quot;常用动词表&quot;&gt;&lt;a href=&quot;#常用动词表&quot; class=&quot;headerlink&quot; title=&quot;常用动词表&quot;&gt;&lt;/a&gt;常用动词表&lt;/h1&gt;&lt;p&gt;动词选取要精准。通常来说，动词决定了一个函数要采取什么”动作”。动词取的好，一个函数名字已经成功了80%。&lt;/p&gt;
&lt;p&gt;常用动词表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;类别&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;单词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;添加/插入/创建/初始化/加载&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;add、append、insert、create、initialize、load&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;删除/销毁&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;delete、remove、destroy、drop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;打开/开始/启动&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;open、start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;关闭/停止&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;close、stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;获取/读取/查找/查询&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;get、fetch、acquire、read、search、find、query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;设置/重置/放入/写入/释放/刷新&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;set、reset、put、write、release、refresh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;发送/推送&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;send、push&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;接收/拉取&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;receive、pull&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;提交/撤销/取消&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;submit、cancel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;收集/采集/选取/选择&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;collect、pick、select&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;提取/解析&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;sub、extract、parse&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;编码/解码&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;encode、decode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;填充/打包/压缩&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;fill、pack、compress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;清空/拆包/解压&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;flush、clear、unpack、decompress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;增加/减少&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;increase、decrease、reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;分隔/拼接&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;split、join、concat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;过滤/校验/检测&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;filter、valid、check&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;常用领域词&quot;&gt;&lt;a href=&quot;#常用领域词&quot; class=&quot;headerlink&quot; title=&quot;常用领域词&quot;&gt;&lt;/a&gt;常用领域词&lt;/h1&gt;&lt;p&gt;名词使用领域词汇。举个例子：集合的容量通常用capacity、集合实际元素个数用size、字符串长度用length，这种就遵循大家的使用习惯，不要用size去形如字符串的长度。&lt;/p&gt;
&lt;p&gt;再比如，假如使用到建造者模式，那么通常会用build作为函数名字，这个时候就不要另辟蹊径，用create来作为函数名字，使用大家约定俗成的命名习惯更容易让你的代码被别人读懂。&lt;/p&gt;
&lt;p&gt;常用名词表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;类别&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;单词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;容量/大小/长度&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;capacity、size、length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;实例/上下文&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;instance、context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;配置&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;config、settings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;头部/前面/前一个/第一个&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;header、front、previous、first&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;尾部/后面/后一个/最后一个&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;tail、back、next、last&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;区间/区域/某一部分/范围/规模&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;range、interval、region、area、section、scope、scale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;缓存/缓冲/会话&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;cache、buffer、session&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;本地/局部/全局&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;local、global&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;成员/元素&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;member、element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;菜单/列表&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;menu、list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;源/目标&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;source、destination、target&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;常用缩写表&quot;&gt;&lt;a href=&quot;#常用缩写表&quot; class=&quot;headerlink&quot; title=&quot;常用缩写表&quot;&gt;&lt;/a&gt;常用缩写表&lt;/h1&gt;&lt;p&gt;1、本缩写表是《编码命名规范》的附录。&lt;/p&gt;
&lt;p&gt;2、本缩写表中列出的都是通用性缩写，不提供标准缩写，如：Win9x、COM 等。&lt;/p&gt;
&lt;p&gt;3、使用本缩写表里的缩写时，请对其进行必要的注释说明。&lt;/p&gt;
&lt;p&gt;4、除少数情况以外，大部分缩写与大小写无关。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
    
      <category term="转载" scheme="https://www.voidking.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo本地搜索加速</title>
    <link href="https://www.voidking.com/dev-hexo-local-search-accelerate/"/>
    <id>https://www.voidking.com/dev-hexo-local-search-accelerate/</id>
    <published>2021-02-24T13:00:00.000Z</published>
    <updated>2021-08-22T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着文章数量的增长，search.xml文件越来越大。因此在加载这个文件时，需要的时间很长，而且偶尔会出现加载不出来的情况。</p><p>有没有什么办法能够加快加载速度呢？必须是有的，本文就来研究一下。</p><p><a href="https://www.voidking.com/dev-hexo-gulp/">《Hexo使用Gulp压缩静态资源》</a>一文中，提到search.xml大小为3.5M。今天又看了一下，文件大小变成了4.3M（加载时会压缩传输，大小约为1.3M）。从文中的实验可以得出结论，在文件大小方面，没有什么优化的空间了。</p><p>再想优化，就得从网络方面入手：CDN加速。主要参考<a href="https://zhuanlan.zhihu.com/p/76951130" target="_blank" rel="noopener">jsDelivr+Github 使用方法</a>。</p><p>更多Hexo相关内容，参考<a href="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/">Hexo系列文章</a>。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>修改 search.xml 的文件链接，改成cdn的地址。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>1、测试jsdelivr链接，search.xml的cdn地址为<br><a href="https://cdn.jsdelivr.net/gh/voidking/voidking.github.io/search.xml" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/voidking/voidking.github.io/search.xml</a></p><p>2、编辑 next/source/js/local-search.js ，如下修改：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const path = CONFIG.root + searchPath;</span></span><br><span class="line"><span class="keyword">const</span> jsdelivr = <span class="symbol">'https</span>:<span class="comment">//cdn.jsdelivr.net/gh/'</span></span><br><span class="line"><span class="keyword">const</span> userRepo = <span class="symbol">'voidking</span>/voidking.github.io/'</span><br><span class="line"><span class="keyword">const</span> path = jsdelivr + userRepo + searchPath;</span><br></pre></td></tr></table></figure><p>3、本地测试，提交代码，使用修改后的主题进行部署</p><p>实测加载速度飞快，4.3M的search.xml能够稳定在2秒内加载完毕，完美。</p><h1 id="提高通用性"><a href="#提高通用性" class="headerlink" title="提高通用性"></a>提高通用性</h1><p>1、cdn的配置放在 <code>_config.yml</code> 文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Use CDN to accelerate the speed of loading search.xml</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># url: //cdn.jsdelivr.net/gh/&lt;username&gt;/&lt;username&gt;.github.io/search.xml</span></span><br><span class="line">    <span class="attr">url:</span></span><br></pre></td></tr></table></figure><p>2、编辑 next/source/js/local-search.js ，如下修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = CONFIG.root + searchPath;</span><br><span class="line"><span class="comment">// Use CDN to accelerate the speed of loading search.xml</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'cdn'</span> <span class="keyword">in</span> CONFIG.localsearch &amp;&amp; CONFIG.localsearch.cdn.enable === <span class="literal">true</span> &amp;&amp; CONFIG.localsearch.cdn.url !== <span class="literal">null</span>)&#123;</span><br><span class="line">  path = CONFIG.localsearch.cdn.url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;随着文章数量的增长，search.xml文件越来越大。因此在加载这个文件时，需要的时间很长，而且偶尔会出现加载不出来的情况。&lt;/p&gt;
&lt;p&gt;有没有什么办法能够加快加载速度呢？必须是有的，本文就来研究一下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-gulp/&quot;&gt;《Hexo使用Gulp压缩静态资源》&lt;/a&gt;一文中，提到search.xml大小为3.5M。今天又看了一下，文件大小变成了4.3M（加载时会压缩传输，大小约为1.3M）。从文中的实验可以得出结论，在文件大小方面，没有什么优化的空间了。&lt;/p&gt;
&lt;p&gt;再想优化，就得从网络方面入手：CDN加速。主要参考&lt;a href=&quot;https://zhuanlan.zhihu.com/p/76951130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jsDelivr+Github 使用方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;更多Hexo相关内容，参考&lt;a href=&quot;https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/&quot;&gt;Hexo系列文章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown编辑器</title>
    <link href="https://www.voidking.com/dev-markdown-editor/"/>
    <id>https://www.voidking.com/dev-markdown-editor/</id>
    <published>2021-02-13T12:00:00.000Z</published>
    <updated>2021-02-13T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假设现在要写一篇markdown格式文章，使用什么编辑器比较好？答：<a href="https://www.sublimetext.com/" target="_blank" rel="noopener">sublime</a>或者<a href="https://typora.io/" target="_blank" rel="noopener">typora</a>。</p><p>假设现在要把一篇markdown格式文章导出成pdf文档，使用什么编辑器比较好？答：typora。</p><p>假设现在要把一篇markdown格式文章发布成微信公众号文章，使用什么编辑器比较好？答：<a href="https://github.com/lyricat/wechat-format" target="_blank" rel="noopener">wechat-format</a>。</p><p>本文主要介绍三款 markdown 编辑器，分别是 sublime、typora和wechat-format。<br>此外，还会介绍几个在线markdown编辑器，测试和预览都很方便。</p><a id="more"></a><h1 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h1><p>.md 结尾的文件，在使用 sublime 进行编辑时会自动语法高亮。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/markdown.png?imageView2/0/w/800" alt=""><br>之所以推荐sublime，是因为这个编辑器是个万能的编辑器，而且非常轻量。<br>使用了六年了，依然情有独钟。</p><h1 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>typora是近两年崛起的markdown编辑器神器。<br>传统的markdown编辑器，左边是编辑器，右边是预览。typora另辟蹊径，没有左右分开，而是把编辑和预览结合在一起，随时切换（command+/），更可以在预览时进行编辑。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora1.png?imageView2/0/w/800" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora2.png?imageView2/0/w/800" alt=""></p><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>typora提供各种主题，更是支持用户自定义主题，简单好用。下面我们按照自己的需求来定制主题，熟悉一下自定义主题的流程。</p><p>已知需求为：</p><ul><li>github主题自己很喜欢，但是标题字号太大，想要改小一点。</li><li>标题在显示的时候自动编号。</li></ul><p>1、Typora，偏好设置，外观，打开主题文件夹<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/folder.png?imageView2/0/w/800" alt=""></p><p>2、备份github.css为github.css.bak</p><p>3、编辑github.css，修改字号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.225</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.15em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.43</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.05em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h5</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、编辑github.css，给标题前添加自动编号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 标题自动编号 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">counter-reset</span>: h1counter; &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">counter-reset</span>: h2counter; &#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123; <span class="attribute">counter-reset</span>: h3counter; &#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">counter-reset</span>: h4counter; &#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123; <span class="attribute">counter-reset</span>: h5counter; &#125;</span><br><span class="line"><span class="selector-tag">h5</span> &#123; <span class="attribute">counter-reset</span>: h6counter; &#125;</span><br><span class="line"><span class="selector-tag">h6</span> &#123; &#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h1counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h2counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h3counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h4counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h5counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h5counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h6counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h5counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h6counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、重启typora<br>可见标题字号变小了，同时添加了编号。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora3.png?imageView2/0/w/800" alt=""><br>但是，如果直接复制粘贴内容到微信公众号，这些标题编号不会被复制。而且，换行效果也没有了。<br>因此，从typora直接复制粘贴到微信公众号，不是一个好的方案。</p><h2 id="导出pdf"><a href="#导出pdf" class="headerlink" title="导出pdf"></a>导出pdf</h2><p>文件，导出，PDF。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora2pdf.png?imageView2/0/w/800" alt=""><br>如上，typora导出的pdf文档，简直完美。</p><h1 id="wechat-format"><a href="#wechat-format" class="headerlink" title="wechat-format"></a>wechat-format</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>wechat-format最大的优点是：适应微信公众号。比如，微信不支持外链，wechat-format生成的预览会包含 reference。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format1.png?imageView2/0/h/500" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format2.png?imageView2/0/h/500" alt=""><br>但是，标题居中效果不是我想要的，标题也没有自动编号，所以也需要自定义一下。</p><h2 id="自定义主题-1"><a href="#自定义主题-1" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>下载wechat-format源码，主要修改：</p><ul><li>src/assets/scripts/themes/default.js</li><li>src/assets/scripts/renderers/wx-renderer.js</li><li>src/assets/css/app.css</li></ul><p>修改后的代码参考 <a href="https://github.com/voidking/wechat-format/tree/root" target="_blank" rel="noopener">wechat-format</a>，最终效果如下<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format3.png?imageView2/0/h/500" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format4.png?imageView2/0/h/500" alt=""></p><h2 id="失败的尝试"><a href="#失败的尝试" class="headerlink" title="失败的尝试"></a>失败的尝试</h2><p>但是，修改完成之后，复制粘贴到微信公众号，这些标题编号依然不会被复制。<br>那么，怎样才能复制到这些编号？答：使这些编号变成元素，而不是样式。所以，需要使用js给页面添加编号元素。<br>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.cnblogs.com/qiudeqing/p/3229583.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">number</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> headings;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.querySelectorAll)</span><br><span class="line">        headings = <span class="built_in">document</span>.querySelectorAll(<span class="string">"h1,h2,h3,h4,h5,h6"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        headings = findHeadings(<span class="built_in">document</span>.body, []);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findHeadings</span>(<span class="params">root, sects</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> c = root.firstChild; c != <span class="literal">null</span>; c = c.nextSibling) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.nodeType !== <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (c.tagName.length == <span class="number">2</span> &amp;&amp; c.tagName.charAt(<span class="number">0</span>) == <span class="string">"H"</span>)</span><br><span class="line">                sects.push(c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                findHeadings(c, sects);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sects;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sectionNumbers = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> h = <span class="number">0</span>; h &lt; headings.length; h++) &#123;</span><br><span class="line">        <span class="keyword">var</span> heading = headings[h];</span><br><span class="line">        <span class="keyword">var</span> level = <span class="built_in">parseInt</span>(heading.tagName.charAt(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(level) || level &lt; <span class="number">1</span> || level &gt; <span class="number">6</span>) <span class="keyword">continue</span>;</span><br><span class="line">        sectionNumbers[level<span class="number">-1</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = level; i &lt; <span class="number">6</span>; i++) sectionNumbers[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> sectionNumber = sectionNumbers.slice(<span class="number">0</span>,level).join(<span class="string">"."</span>) + <span class="string">". "</span>;</span><br><span class="line">        <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">        span.className = <span class="string">"TOCSectNum"</span>;</span><br><span class="line">        span.innerHTML = sectionNumber;</span><br><span class="line">        heading.insertBefore(span, heading.firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，想要把这个代码应用到wechat-format，是有难度的，假期搞了一天，最终效果不理想，暂时放弃。<br>思路：修改 src/assets/scripts/editor.js ，把number函数改写到这个文件里。中间会用到dom转str和str转dom，代码附上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/DOMParser</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/XMLSerializer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trans</span>(<span class="params">str</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> parser = <span class="keyword">new</span> DOMParser();</span><br><span class="line">    <span class="keyword">var</span> doc=parser.parseFromString(str, <span class="string">"text/xml"</span>);</span><br><span class="line">    doc = number(doc);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line">    <span class="keyword">return</span> s.serializeToString(doc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在线markdown编辑器"><a href="#在线markdown编辑器" class="headerlink" title="在线markdown编辑器"></a>在线markdown编辑器</h1><h2 id="mdnice"><a href="#mdnice" class="headerlink" title="mdnice"></a>mdnice</h2><p><a href="https://www.mdnice.com/" target="_blank" rel="noopener">Markdown Nice</a>是一个支持自定义样式的 Markdown 编辑器，支持导出成微信公众号文章和知乎文章。</p><p>值得一提的是，mdnice导出的微信公众号文章，排版非常nice，比 wechat-format 还要美观。<br>尝试了自定义样式，添加了标题编号，同样无法复制到微信公众号。</p><h2 id="openwrite"><a href="#openwrite" class="headerlink" title="openwrite"></a>openwrite</h2><p><a href="https://openwrite.cn/" target="_blank" rel="noopener">OpenWrite</a>是一个博客群发平台，支持一键发文到微信公众号、知乎、头条、博客园、CSDN等平台。其中一项功能是Markdown格式文章导出微信公众号预览。</p><h2 id="Cmd-Markdown"><a href="#Cmd-Markdown" class="headerlink" title="Cmd Markdown"></a>Cmd Markdown</h2><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown</a>是一个用了很多年的在线markdown编辑器，稳定靠谱，支持高亮代码块、LaTeX 公式、流程图。</p><h2 id="马克飞象"><a href="#马克飞象" class="headerlink" title="马克飞象"></a>马克飞象</h2><p><a href="https://maxiang.io/#" target="_blank" rel="noopener">马克飞象</a>是一款专为印象笔记（Evernote）打造的Markdown编辑器，支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传。马克飞象同时提供桌面客户端以及离线Chrome App，支持移动端 Web。</p><h2 id="StackEdit"><a href="#StackEdit" class="headerlink" title="StackEdit"></a>StackEdit</h2><p><a href="https://stackedit.io/app#" target="_blank" rel="noopener">StackEdit</a>支持google登录，发布文章到web（github、gitlab、wordpress等），支持高亮代码块、LaTeX 公式、流程图。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;假设现在要写一篇markdown格式文章，使用什么编辑器比较好？答：&lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime&lt;/a&gt;或者&lt;a href=&quot;https://typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;typora&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;假设现在要把一篇markdown格式文章导出成pdf文档，使用什么编辑器比较好？答：typora。&lt;/p&gt;
&lt;p&gt;假设现在要把一篇markdown格式文章发布成微信公众号文章，使用什么编辑器比较好？答：&lt;a href=&quot;https://github.com/lyricat/wechat-format&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wechat-format&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文主要介绍三款 markdown 编辑器，分别是 sublime、typora和wechat-format。&lt;br&gt;此外，还会介绍几个在线markdown编辑器，测试和预览都很方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="markdown" scheme="https://www.voidking.com/tags/markdown/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="sublime" scheme="https://www.voidking.com/tags/sublime/"/>
    
      <category term="typora" scheme="https://www.voidking.com/tags/typora/"/>
    
      <category term="wechat-format" scheme="https://www.voidking.com/tags/wechat-format/"/>
    
  </entry>
  
  <entry>
    <title>Shell和Python互相调用</title>
    <link href="https://www.voidking.com/dev-shell-python/"/>
    <id>https://www.voidking.com/dev-shell-python/</id>
    <published>2021-01-13T13:00:00.000Z</published>
    <updated>2021-01-13T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在linux上，最常用的编程语言是shell，其次是python。而这两种语言，很多时候需要配合使用。本文就研究一下这两种语言互相调用的方法。</p><p>参考文档：</p><ul><li><a href="https://www.voidking.com/dev-shell-script-program-1/">《Shell脚本编程》</a></li><li><a href="https://www.voidking.com/dev-python-start/">《Python基础》</a></li></ul><a id="more"></a><h1 id="shell调用python"><a href="#shell调用python" class="headerlink" title="shell调用python"></a>shell调用python</h1><h2 id="调用python脚本"><a href="#调用python脚本" class="headerlink" title="调用python脚本"></a>调用python脚本</h2><p>shell调用python脚本，直接调用即可，例如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> main.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><h2 id="调用python模块"><a href="#调用python模块" class="headerlink" title="调用python模块"></a>调用python模块</h2><p>举个简单的例子，我们想要对curl获取的结果进行json格式化。<br>假设安装了jq，可以使用jq命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span> <span class="string">| jq</span></span><br></pre></td></tr></table></figure><p>假设没有安装jq，那我们可以使用python的 json.tool 模块：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span> <span class="string">| python -m json.tool</span></span><br></pre></td></tr></table></figure><h2 id="调用python函数"><a href="#调用python函数" class="headerlink" title="调用python函数"></a>调用python函数</h2><p>1、test.py 内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#scriptname:test.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helloworld</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"helloworld"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> helloworld()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"haojin"</span>,<span class="number">100</span>,<span class="string">"beijing"</span></span><br></pre></td></tr></table></figure><p>2、shell中调用 test.py 中的方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python -c 'import test;print test.helloworld<span class="literal">()</span>'</span><br><span class="line">python -c 'import test;test.echo<span class="literal">()</span>'</span><br><span class="line"></span><br><span class="line">res=<span class="constructor">$(<span class="params">python</span> -<span class="params">c</span> '<span class="params">import</span> <span class="params">test</span>;<span class="params">print</span> <span class="params">test</span>.<span class="params">get_user</span>()</span>')</span><br><span class="line">name=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f1</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>,$<span class="operator">/</span><span class="operator">/</span>' | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>^(<span class="operator">/</span><span class="operator">/</span>' | <span class="params">sed</span> <span class="string">"s/\'//g"</span>)</span></span><br><span class="line">score=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f2</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>,$<span class="operator">/</span><span class="operator">/</span>')</span></span><br><span class="line">loc=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f3</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>)</span>$<span class="comment">//' | sed "s/\'//g")</span></span><br></pre></td></tr></table></figure><h1 id="python调用shell"><a href="#python调用shell" class="headerlink" title="python调用shell"></a>python调用shell</h1><h2 id="调用shell命令"><a href="#调用shell命令" class="headerlink" title="调用shell命令"></a>调用shell命令</h2><p>main.py内容为</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">val = <span class="built_in">os</span>.system(<span class="string">'ls -al'</span>)</span><br><span class="line"><span class="built_in">print</span> val</span><br></pre></td></tr></table></figure><p>其中，val的值是exit code。</p><p>执行main.py，<code>python main.py</code></p><h2 id="调用shell脚本"><a href="#调用shell脚本" class="headerlink" title="调用shell脚本"></a>调用shell脚本</h2><p>1、main.sh 内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>2、python 调用 main.sh</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line">val = <span class="built_in">os</span>.system(<span class="string">'sh main.sh'</span>)</span><br><span class="line"><span class="built_in">print</span> val</span><br></pre></td></tr></table></figure><h2 id="获取shell指令的结果"><a href="#获取shell指令的结果" class="headerlink" title="获取shell指令的结果"></a>获取shell指令的结果</h2><p>例子：获取echo命令结果。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">res = <span class="built_in">os</span>.<span class="built_in">popen</span>(<span class="string">'echo "hello"'</span>)</span><br><span class="line"><span class="built_in">print</span> res.<span class="built_in">read</span>()</span><br><span class="line">res.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>高级例子：获取curl命令的返回结果，转化成dict。<br>1、main.sh 内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span></span><br></pre></td></tr></table></figure><p>2、python 调用 main.sh</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="title">res</span> = os.popen('sh main.sh')</span><br><span class="line"><span class="class"><span class="keyword">data</span> = json.loads(<span class="title">res</span>.<span class="title">read</span>())</span></span><br><span class="line"><span class="title">res</span>.close()</span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['number']</span></span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['string']</span></span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['array'][0]['foo']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在linux上，最常用的编程语言是shell，其次是python。而这两种语言，很多时候需要配合使用。本文就研究一下这两种语言互相调用的方法。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.voidking.com/dev-shell-script-program-1/&quot;&gt;《Shell脚本编程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.voidking.com/dev-python-start/&quot;&gt;《Python基础》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
      <category term="shell" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/shell/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="linux" scheme="https://www.voidking.com/tags/linux/"/>
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置Jupyter</title>
    <link href="https://www.voidking.com/dev-docker-jupyter/"/>
    <id>https://www.voidking.com/dev-docker-jupyter/</id>
    <published>2021-01-03T12:00:00.000Z</published>
    <updated>2021-08-08T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-jupyter-notebook/">《Jupyter notebook》</a>一文中学习了jupyter的使用，本文学习一下怎样使用docker安装jupyter，并且配置访问密码。</p><p>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.130。</p><a id="more"></a><h1 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/jupyter/base-notebook/" target="_blank" rel="noopener">Jupyter - Docker Official Images</a>。</p><p>2、下载jupyter镜像（以6.1.1为例）<br><code>docker pull jupyter/base-notebook:notebook-5.7.8</code></p><p>注意不要使用6.x.x，存在页面无法显示扩展插件的bug，详情参考<a href="https://discourse.jupyter.org/t/jupyter-nbextensions-configurator-not-shown/7294" target="_blank" rel="noopener">Jupyter nbextensions_configurator not shown</a>。</p><p>3、创建配置目录</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/jupyter/jovyan</span><br><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/jupyter/jovyan/.jupyter</span><br><span class="line">chmod <span class="number">777</span> -R /<span class="keyword">opt</span>/jupyter/jovyan</span><br></pre></td></tr></table></figure><p>4、启动jupyter服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-jupyter -d \</span><br><span class="line">-p <span class="number">8888</span>:<span class="number">8888</span> \</span><br><span class="line">-v /opt/jupyter/jovyan:/home/jovyan \</span><br><span class="line">jupyter/base-notebook:notebook<span class="number">-5.7</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><p>以上命令：</p><ul><li>命名容器为vk-jupyter，后台运行</li><li>映射宿主机8888端口到容器的8888端口</li><li>挂载宿主机目录/opt/jupyter/jovyan到容器目录/home/jovyan</li></ul><p>更多启动命令参数可以参考<a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Jupyter Docker Stacks</a>。</p><p>5、验证安装<br><code>docker ps</code>，jupyter启动正常的话就可以看到vk-jupyter容器。</p><p>浏览器访问 <a href="http://192.168.56.130:8888" target="_blank" rel="noopener">http://192.168.56.130:8888</a> ，可以看到Jupyter登录页面。</p><p>6、登录<br><code>docker exec -it vk-jupyter jupyter notebook list</code><br>可以查看到登录需要的token，使用token即可登录进入jupyter编辑页面。</p><h1 id="配置jupyter"><a href="#配置jupyter" class="headerlink" title="配置jupyter"></a>配置jupyter</h1><p>1、设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-jupyter jupyter notebook password</span><br><span class="line">docker restart vk-jupyter</span><br></pre></td></tr></table></figure><p>2、使用密码<br>浏览器访问 <a href="http://192.168.56.130:8888" target="_blank" rel="noopener">http://192.168.56.130:8888</a><br>此时使用自己设置的密码就可以访问jupyter了。</p><p>3、根目录<br>jupyter编辑器的默认根目录为 /home/jovyan ，对应宿主机目录 /opt/jupyter/jovyan ，创建的目录和文件都去这个路径下面去找。</p><p>4、安装ipywidgets 如果不安装ipywidgets，页面加载 /nbextensions/widgets/notebook/js/extension.js 文件时会报错404。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-<span class="keyword">jupyter </span>pip <span class="keyword">install </span>ipywidgets</span><br></pre></td></tr></table></figure><h1 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h1><p>jupyter 使用了 websocket 协议，所以需要配置支持 websocket。<br>如果不配置的话，通过域名访问时会报错无法连接内核，也就无法运行python脚本。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> jupyter.voidking.com;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">location</span> /&#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://172.17.12.85:8888;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># WebSocket support</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jupyter小技巧"><a href="#jupyter小技巧" class="headerlink" title="jupyter小技巧"></a>jupyter小技巧</h1><h2 id="执行bash"><a href="#执行bash" class="headerlink" title="执行bash"></a>执行bash</h2><p>在代码框里输入叹号+bash命令，即可执行bash，例如：<br><code>!ls -l</code></p><h2 id="登录进容器"><a href="#登录进容器" class="headerlink" title="登录进容器"></a>登录进容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-jupyter /bin/bash</span><br><span class="line">docker exec --user root -it vk-jupyter /bin/bash</span><br></pre></td></tr></table></figure><h2 id="安装常用命令"><a href="#安装常用命令" class="headerlink" title="安装常用命令"></a>安装常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec --user root -it vk-jupyter /bin/bash</span><br><span class="line">apt update</span><br><span class="line">apt install curl</span><br><span class="line">apt install unzip</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>Jupyter Notebook 扩展插件（nbextensions）是一些 JavaScript 模块，我们可以使用插件强化 Notebook 的功能。扩展插件本质上修改了 Jupyter UI，以实现更强大的功能。<br>1、界面添加 Nbextensions</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-<span class="keyword">jupyter </span>conda <span class="keyword">install </span>-c conda-forge <span class="keyword">jupyter_nbextensions_configurator</span></span><br><span class="line">#docker exec -it vk-jupyter pip install jupyter_nbextensions_configurator -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</span><br><span class="line">docker exec -it vk-<span class="keyword">jupyter </span><span class="keyword">jupyter </span>nbextensions_configurator enable --user</span><br><span class="line">docker exec -it vk-<span class="keyword">jupyter </span><span class="keyword">jupyter </span>nbextension list</span><br><span class="line">docker restart vk-<span class="keyword">jupyter</span></span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-jupyter/nbext.png?imageView2/0/w/600" alt=""></p><p>2、安装常用扩展集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-jupyter pip install jupyter_contrib_nbextensions -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</span><br><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> -it vk-jupyter conda install -c conda-forge jupyter_contrib_nbextensions</span></span><br><span class="line">docker exec -it vk-jupyter jupyter contrib nbextension install --user</span><br><span class="line">docker exec -it vk-jupyter jupyter nbextension list</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-jupyter/contrib.png?imageView2/0/w/600" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-jupyter-notebook/&quot;&gt;《Jupyter notebook》&lt;/a&gt;一文中学习了jupyter的使用，本文学习一下怎样使用docker安装jupyter，并且配置访问密码。&lt;/p&gt;
&lt;p&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.130。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用IDEA合并代码的个人实践</title>
    <link href="https://www.voidking.com/dev-idea-git-merge-code/"/>
    <id>https://www.voidking.com/dev-idea-git-merge-code/</id>
    <published>2020-09-11T00:00:00.000Z</published>
    <updated>2020-09-11T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>团队合作开发，肯定会涉及到代码合并的问题。<br>以前在代码合并的时候，喜欢使用beyond compare。同一个项目拷贝两份，一个保持最新代码，一个用于开发，开发完成后使用beyond compare把开发代码合并到最新代码。然后push到远程分支，提一个MR。<br>后来发现，使用IDEA配合Git命令来合并代码，简直完美。本文就来记录一下这种方法，供大家参考。</p><p>已知项目名为 voidking，有很多分支，其中 pre 分支用来发布服务到预发环境，master分支用来发布服务到生产环境。代码合并后，创建pre或者prod开头的tag，触发CICD。</p><a id="more"></a><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>1、在github或者gitlab新建一个issue，描述清楚问题或者功能。<br>2、针对这个issue，创建一个分支。这个分支会以issue的标题命名，前面加上issue的编号。假设生成的branch为 3-add-new-feat 。<br>3、拉取最新代码后，本地创建自己的分支<br><code>git checkout -b haojin</code></p><p>4、一顿复制粘贴，功能完成，commit自己的代码。</p><h1 id="pre分支代码合并"><a href="#pre分支代码合并" class="headerlink" title="pre分支代码合并"></a>pre分支代码合并</h1><p>到了代码合并的步骤，表演开始。</p><p>1、拉取最新代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>2、创建mergepre分支</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span>mergepre origin/pre</span><br></pre></td></tr></table></figure><p>3、使用IDEA合并代码<br>点击界面右下角Git Branches，选择 haojin 分支，Show Diff with Working Tree。<br>根据自己的修改，合并代码到当前的mergepre分支，修改完成后commit代码。</p><p>4、push代码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> HEAD:haojin --force</span><br></pre></td></tr></table></figure><p>需要注意的是，这里我们把mergepre的分支push到了远程的haojin分支，并没有push到 3-add-new-feat 。这是因为，3-add-new-feat这个分支我们留着，代码合并到master分支时使用。</p><p>点击出现的链接，或者在gitlab上的haojin分支点击创建MR，进入创建MR的页面。</p><p>5、选择要合并到的分支为 pre ，可以看到代码的变更，再次检查。</p><p>6、检查没问题的话，提交MR即可。</p><h1 id="master分支代码合并"><a href="#master分支代码合并" class="headerlink" title="master分支代码合并"></a>master分支代码合并</h1><p>以上，假设我们已经合并了自己的代码到 pre 分支。并且在预发环境发版验证通过，没有问题。接下来就可以合并代码到 master 分支了。</p><p>1、拉取最新代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>2、创建mergeprod分支</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span>mergeprod</span><br></pre></td></tr></table></figure><p>3、使用IDEA合并代码<br>点击界面右下角Git Branches，选择 haojin 分支，Show Diff with Working Tree。<br>根据自己的修改，合并代码到当前的mergeprod分支，修改完成后commit代码。</p><p>4、push代码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> HEAD:<span class="number">3</span>-add-<span class="built_in">new</span>-feat</span><br></pre></td></tr></table></figure><p>点击出现的链接，或者在gitlab上的haojin分支点击创建MR，进入创建MR的页面。</p><p>5、选择要合并到的分支为 master ，可以看到代码的变更，再次检查。</p><p>6、检查没问题的话，提交MR即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;团队合作开发，肯定会涉及到代码合并的问题。&lt;br&gt;以前在代码合并的时候，喜欢使用beyond compare。同一个项目拷贝两份，一个保持最新代码，一个用于开发，开发完成后使用beyond compare把开发代码合并到最新代码。然后push到远程分支，提一个MR。&lt;br&gt;后来发现，使用IDEA配合Git命令来合并代码，简直完美。本文就来记录一下这种方法，供大家参考。&lt;/p&gt;
&lt;p&gt;已知项目名为 voidking，有很多分支，其中 pre 分支用来发布服务到预发环境，master分支用来发布服务到生产环境。代码合并后，创建pre或者prod开头的tag，触发CICD。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/git/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="git" scheme="https://www.voidking.com/tags/git/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Go语言开发的小技巧</title>
    <link href="https://www.voidking.com/dev-golang-skills/"/>
    <id>https://www.voidking.com/dev-golang-skills/</id>
    <published>2020-09-10T12:00:00.000Z</published>
    <updated>2020-09-10T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学到了一些Go语言开发时的小技巧，做下记录。</p><h1 id="提高下载速度"><a href="#提高下载速度" class="headerlink" title="提高下载速度"></a>提高下载速度</h1><p>方法一：科学上网</p><p>方法二：配置代理，详情参考<a href="https://www.voidking.com/dev-golang-gpm/">《Golang包管理工具》</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export GOPROXY=https://goproxy.cn</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPROXY</span>=https://goproxy.io</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GO111MODULE</span>=on</span><br><span class="line">go <span class="builtin-name">get</span> -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure><p>方法三：使用gopm</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go <span class="builtin-name">get</span> -v github.com/gpmgo/gopm</span><br><span class="line">gopm <span class="builtin-name">get</span> -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="编译安装软件"><a href="#编译安装软件" class="headerlink" title="编译安装软件"></a>编译安装软件</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/g</span>oimports</span><br><span class="line">go install golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/g</span>oimports</span><br></pre></td></tr></table></figure><h1 id="自动格式化"><a href="#自动格式化" class="headerlink" title="自动格式化"></a>自动格式化</h1><p>Golang希望统一代码风格，因此推出了gofmt工具。gofmt可以格式化单个文件，也可以格式化整个目录下的所有go文件。<br>除了gofmt工具，go语言中还有一个go fmt命令，该命令是gofmt的简单封装。</p><p>在IDEA中，怎样使用gofmt呢？<br>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索File，找到File Watchers插件并安装。<br>3、Tools，File Watchers，添加或修改gofmt模版。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> type：Go</span><br><span class="line">Scope：Project <span class="keyword">files</span></span><br><span class="line">Program：/usr/local/go/bin/gofmt</span><br><span class="line">Arguments：-l -w -s <span class="symbol">$</span>FilePath<span class="symbol">$</span></span><br><span class="line">Output paths to refresh：<span class="symbol">$</span>FilePath<span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>4、勾选Enabled。</p><p>保存源码时，就会执行代码格式化了。</p><h1 id="自动引入依赖包"><a href="#自动引入依赖包" class="headerlink" title="自动引入依赖包"></a>自动引入依赖包</h1><p>参考上一节自动格式化，配置 goimports ，自动引入依赖包。</p><h1 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h1><p>如果对一个包或者函数不熟悉，可以使用go doc命令查看文档。比如：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="meta">doc</span> http.ListenAndServe</span><br></pre></td></tr></table></figure><p>如果想要看一个项目的帮助文档，可以使用godoc工具启动一个文档服务器。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -v golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/</span>godoc</span><br><span class="line">godoc -<span class="string">http :</span><span class="number">6060</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>Debugging Sucks! Testing Rocks!<br>Go语言支持三种测试：单元测试、性能测试和http测试，下面分别来看一下。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>Go语言单元测试函数以Test为前缀，详情参考<a href="https://books.studygolang.com/gopl-zh/ch11/ch11-02.html" target="_blank" rel="noopener">测试函数</a>。</p><p>实际开发中推荐使用表格驱动测试，就是把测试数据和测试逻辑分开。比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestShortFilename</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">        in       <span class="keyword">string</span></span><br><span class="line">        expected <span class="keyword">string</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;<span class="string">"???"</span>, <span class="string">"???"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"hello/filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"main/hello/filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        actual := getShortFilename(tt.in)</span><br><span class="line">        <span class="keyword">if</span> strings.Compare(actual, tt.expected) != <span class="number">0</span> &#123;</span><br><span class="line">            t.Fail()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IDEA中查看代码覆盖率：<br>在单元测试函数左边，会出现一个三角箭头，点击它，选择 Run ‘Testxxx’ with Coverage，即可看到代码覆盖率。绿线代表覆盖到了，红线代表没有覆盖到。</p><p>也可以使用命令查看代码覆盖率：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go test <span class="attribute">-coverprofile</span>=c.out</span><br><span class="line">go<span class="built_in"> tool </span>cover</span><br><span class="line">go<span class="built_in"> tool </span>cover <span class="attribute">html</span>=c.out</span><br></pre></td></tr></table></figure><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>1、编写性能测试函数，以Benchmark为前缀，详情参考<a href="https://books.studygolang.com/gopl-zh/ch11/ch11-04.html" target="_blank" rel="noopener">基准测试</a>。</p><p>2、运行基准测试</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">go</span> test -<span class="keyword">bench </span>.</span><br></pre></td></tr></table></figure><p>3、详细分析（文本）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go test bench . -cpuprofile cpu.out</span><br><span class="line">go<span class="built_in"> tool </span>pprof -text <span class="attribute">-nodecount</span>=10 ./cpu.test cpu.out</span><br></pre></td></tr></table></figure><p>4、详细分析（图表）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go<span class="built_in"> tool </span>pprof cpu.out</span><br><span class="line">web</span><br></pre></td></tr></table></figure><p>PS：需要安装<a href="http://www.graphviz.org/" target="_blank" rel="noopener">graphviz</a>，以便生成图表。</p><h2 id="http测试"><a href="#http测试" class="headerlink" title="http测试"></a>http测试</h2><p>Go语言的http测试使用 net/http/httptest 包，测试方法可以分为两种：一种是使用假的Request/Response，速度快，测试粒度小，适用于测试函数和方法；另外一种是启动http服务器，速度慢，代码覆盖量更大，适用于测试和模拟后端接口。</p><p>先说第一种，使用假的Request/Response：<br>1、已知函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="constructor">HelloHandler(<span class="params">w</span> <span class="params">http</span>.ResponseWriter, <span class="params">r</span> <span class="operator">*</span><span class="params">http</span>.Request)</span> &#123;</span><br><span class="line">w.<span class="constructor">Write([]<span class="params">byte</span>(<span class="string">"hello world"</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloHandler</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">req := httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://www.voidking.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">HelloHandler(w, req)</span><br><span class="line">bytes, _ := ioutil.ReadAll(w.Result().Body)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(bytes) != <span class="string">"hello world"</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"expected hello world, but got"</span>, <span class="keyword">string</span>(bytes))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行测试<br><code>go test -v .</code></p><p>再说第二种，启动http服务器。<br>1、已知函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="constructor">HelloHandler(<span class="params">w</span> <span class="params">http</span>.ResponseWriter, <span class="params">r</span> <span class="operator">*</span><span class="params">http</span>.Request)</span> &#123;</span><br><span class="line">w.<span class="constructor">Write([]<span class="params">byte</span>(<span class="string">"hello world"</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloHandler</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ts := httptest.NewServer(http.HandlerFunc(HelloHandler))</span><br><span class="line"><span class="keyword">defer</span> ts.Close()</span><br><span class="line"> </span><br><span class="line">res, err := http.Get(ts.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">bytes, err := ioutil.ReadAll(res.Body)</span><br><span class="line">res.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(bytes) != <span class="string">"hello world"</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"expected hello world, but got"</span>, <span class="keyword">string</span>(bytes))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行测试<br><code>go test -v .</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近学到了一些Go语言开发时的小技巧，做下记录。&lt;/p&gt;
&lt;h1 id=&quot;提高下载速度&quot;&gt;&lt;a href=&quot;#提高下载速度&quot; class=&quot;headerlink&quot; title=&quot;提高下载速度&quot;&gt;&lt;/a&gt;提高下载速度&lt;/h1&gt;&lt;p&gt;方法一：科学上网&lt;/p&gt;
&lt;p&gt;方法二：配置代理，详情参考&lt;a href=&quot;https://www.voidking.com/dev-golang-gpm/&quot;&gt;《Golang包管理工具》&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# export GOPROXY=https://goproxy.cn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;GOPROXY&lt;/span&gt;=https://goproxy.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;GO111MODULE&lt;/span&gt;=on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v golang.org/x/tools/cmd/goimports&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;方法三：使用gopm&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v github.com/gpmgo/gopm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gopm &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v golang.org/x/tools/cmd/goimports&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="golang" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/golang/"/>
    
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>使用IDEA开发Golang和Python</title>
    <link href="https://www.voidking.com/dev-idea-golang-python/"/>
    <id>https://www.voidking.com/dev-idea-golang-python/</id>
    <published>2020-09-09T12:00:00.000Z</published>
    <updated>2020-09-09T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>突然发现，自己安装了三款 JetBrains 的产品：IDEA、GoLand和PyCharm。这三款软件大小差不多，长得差不多，用起来也差不多。唯一的差别，就是自己在使用不同的编程语言写代码时，需要在它们之间来回切换。<br>能不能，只保留其中一款呢？一个IDE，所有编程语言通用，或者至少能够保证Java、Golang、Python通用。<br>这个需求是合理的，而且是很简单的配置就可以实现的，本文就来总结一下IDEA配置开发Golang和Python的方法。</p><a id="more"></a><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>IDEA本身就是适用于Java开发的，具体配置方法可以参考<a href="https://www.voidking.com/dev-idea-config/">《IDEA的常用配置》</a>和<a href="https://www.voidking.com/dev-idea-maven-javaweb/">《使用IDEA新建Maven JavaWeb项目》</a>。</p><p>此外，IDEA还支持Android开发，可以参考<a href="https://www.voidking.com/dev-android-as/">《Android开发——Android Studio》</a>进行配置。</p><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><p>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索Go，找到Go插件并安装。<br>This plugin extends IntelliJ platform with Go-specific coding assistance and tool integrations, and has everything you could find in GoLand.<br>3、重启IDEA。菜单栏，IntelliJ IDEA，Preferences…。<br>4、Languages &amp; Frameworks，Go。<br>5、配置好GOROOT和GOPATH。</p><p>上面的IDEA配置，和Goland几乎相同，然后就可以像Goland一样开发Go语言程序了。</p><p>Go项目Debug的配置方法，参考<a href="https://www.voidking.com/dev-beego-start-2/">《beego入门篇——下》</a>中的调试一节。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>配置方法参考<a href="https://www.jetbrains.com/help/idea/configuring-python-sdk.html" target="_blank" rel="noopener">Configure a Python SDK</a>。</p><p>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索Python，找到Python插件并安装。<br>The Python plug-in provides smart editing for Python scripts. The feature set of the plugin corresponds to PyCharm IDE Professional Edition.<br>3、重启IDEA。菜单栏，File，Project Structure…。<br>4、Platform Settings，加号，Add Python SDK…。<br>5、Project Settings，Project SDK，选择新添加的Python SDK。</p><p>上面的IDEA配置，和PyCharm有所不同。PyCharm中的Python SDK配置，位置在Preferences，Project: project_name。</p><p>Python项目Debug的配置方法，参考<a href="https://www.voidking.com/dev-pycharm-debug/">《PyCharm调试》</a>。不同的是，如果Debug Configurations窗口点击加号，第一眼看不到Python，那么Python在Other层级下。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上，IDEA就成了一个全能IDE，可以开发Java、Golang和Python。如果需要支持其他语言，同样的方法，查找并安装插件即可。<br>Goland和PyCharm可以卸载了，nice。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;突然发现，自己安装了三款 JetBrains 的产品：IDEA、GoLand和PyCharm。这三款软件大小差不多，长得差不多，用起来也差不多。唯一的差别，就是自己在使用不同的编程语言写代码时，需要在它们之间来回切换。&lt;br&gt;能不能，只保留其中一款呢？一个IDE，所有编程语言通用，或者至少能够保证Java、Golang、Python通用。&lt;br&gt;这个需求是合理的，而且是很简单的配置就可以实现的，本文就来总结一下IDEA配置开发Golang和Python的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
      <category term="java" scheme="https://www.voidking.com/tags/java/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>更好的 git commit message</title>
    <link href="https://www.voidking.com/dev-git-commit-message/"/>
    <id>https://www.voidking.com/dev-git-commit-message/</id>
    <published>2020-07-30T12:00:00.000Z</published>
    <updated>2020-07-30T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="还可以更好"><a href="#还可以更好" class="headerlink" title="还可以更好"></a>还可以更好</h1><p>使用git很多年，也提交了很多代码，自以为使用习惯良好。因为每次提交代码，我都会在git commit message中说明清楚修改的内容。但是，偶然间读到一些关于commit message的文章，才发现还有很多进步的空间。</p><p>本文就来学习一下编写更高质量的提交信息，主要参考 <a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南</a>、<a href="https://juejin.im/post/6844903606815064077" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a> 和 <a href="https://www.conventionalcommits.org/" target="_blank" rel="noopener">Conventional Commits</a>。</p><a id="more"></a><h1 id="约定式提交"><a href="#约定式提交" class="headerlink" title="约定式提交"></a>约定式提交</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>约定式提交规范是一种基于提交消息的轻量级约定。它提供了一组用于创建清晰的提交历史的简单规则；这使得编写基于规范的自动化工具变得更容易。 这个约定与 <a href="http://semver.org/" target="_blank" rel="noopener">SemVer</a> 相吻合， 在提交信息中描述新特性、bug 修复和破坏性变更。</p><p>约定式提交优点：</p><ul><li>自动化生成 CHANGELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度。</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>提交说明的结构如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;<span class="selector-attr">[可选的作用域]</span>: &lt;描述&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[可选的正文]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[可选的脚注]</span></span><br></pre></td></tr></table></figure><p>提交方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "</span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> &lt;类型&gt;[可选的作用域]: &lt;描述&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> [可选的正文]</span></span><br><span class="line"><span class="meta">dquote&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> [可选的脚注]</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> <span class="string">"</span></span></span><br></pre></td></tr></table></figure><p>提交说明包含了下面的结构化元素，以向类库使用者表明其意图：</p><table><thead><tr><th>类型</th><th align="left">描述</th></tr></thead><tbody><tr><td>fix</td><td align="left">在代码库中修复了一个 bug（这和语义化版本中的 PATCH 相对应）。</td></tr><tr><td>feat</td><td align="left">在代码库中新增了一个功能（这和语义化版本中的 MINOR 相对应）。</td></tr><tr><td>docs</td><td align="left">文档相关的改动。</td></tr><tr><td>refactor</td><td align="left">重构</td></tr><tr><td>improvement</td><td align="left">性能提升</td></tr><tr><td>test</td><td align="left">测试用例修改</td></tr><tr><td>style</td><td align="left">代码格式修改, 注意不是 css 修改</td></tr><tr><td>chore</td><td align="left">其他修改, 比如构建流程, 依赖管理。</td></tr><tr><td>Close</td><td align="left">在可选的正文或脚注的起始位置，关闭issue</td></tr><tr><td>BREAKING CHANGE</td><td align="left">在可选的正文或脚注的起始位置，表示引入了破坏性 API 变更（这和语义化版本中的 MAJOR 相对应）。 破坏性变更可以是任意类型提交的一部分。</td></tr></tbody></table><p>以上类型都是可选的，其他类型也被允许，根据需要定义项目的提交规范就好。并且在语义化版本中没有隐式的影响（除非他们包含 BREAKING CHANGE）。<br>可以为提交类型添加一个围在圆括号内的作用域，以为其提供额外的上下文信息。例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">feat</span><span class="params">(parser)</span></span>: adds ability to parse arrays.</span><br></pre></td></tr></table></figure><p>可以在类型/作用域前缀之后，<code>:</code> 之前，附加 <code>!</code> 字符，以进一步提醒注意破坏性变更。当有 <code>!</code> 前缀时，正文或脚注内必须包含 BREAKING CHANGE: description</p><p>约定式提交和 SemVer 的关联：fix 类型提交应当对应到 PATCH 版本。feat 类型提交应该对应到 MINOR 版本。带有 BREAKING CHANGE 的提交不管类型如何，都应该对应到 MAJOR 版本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/yargs/yargs" target="_blank" rel="noopener">yargs</a>：广受欢迎的命令行参数解析器。</li><li><a href="https://github.com/istanbuljs/istanbuljs" target="_blank" rel="noopener">istanbuljs</a>：一套为 JavaScript 测试生成测试覆盖率的开源工具和类库。</li><li><a href="https://github.com/dmfay/massive-js" target="_blank" rel="noopener">massive.js</a>：一个用于 Node 和 PostgreSQL 的数据访问类库。</li><li><a href="https://github.com/electron/electron" target="_blank" rel="noopener">electron</a>：用 JavaScript、HTML 和 CSS 构建跨平台应用。</li><li><a href="https://github.com/LeDDGroup/scroll-utility" target="_blank" rel="noopener">scroll-utility</a>：一个居中元素和平滑动画的滚屏工具包实例。</li><li><a href="https://github.com/BlazeUI/blaze" target="_blank" rel="noopener">Blaze UI</a>：无框架开源 UI 套件。</li><li><a href="https://github.com/monicahq/monica" target="_blank" rel="noopener">Monica</a>：一个开源的人际关系管理系统。</li><li><a href="https://mhy.js.org/" target="_blank" rel="noopener">mhy</a>：一个零配置、开箱即用的、多用途工具箱与开发环境。</li><li><a href="https://github.com/lamartire/sharec" target="_blank" rel="noopener">sharec</a>：一个用于模板和配置文件版本化的极简工具。</li></ul><h1 id="提交帮助工具"><a href="#提交帮助工具" class="headerlink" title="提交帮助工具"></a>提交帮助工具</h1><h2 id="git-commit提示"><a href="#git-commit提示" class="headerlink" title="git commit提示"></a>git commit提示</h2><p>1、修改 <code>~/.gitconfig</code> ，添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[commit]</span></span><br><span class="line"><span class="attr">template</span> = ~/.gitmessage</span><br></pre></td></tr></table></figure><p>2、新建 <code>~/.gitmessage</code> ，内容为</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># head: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span><br><span class="line"><span class="meta"># - type: feat, fix, docs, style, refactor, test, chore</span></span><br><span class="line"><span class="meta"># - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)</span></span><br><span class="line"><span class="meta"># - subject: start with verb (such as 'change'), 50-character line</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># body: 72-character wrapped. This should answer:</span></span><br><span class="line"><span class="meta"># * Why was this change necessary?</span></span><br><span class="line"><span class="meta"># * How does it address the problem?</span></span><br><span class="line"><span class="meta"># * Are there any side effects?</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># footer: </span></span><br><span class="line"><span class="meta"># - Include a link to the ticket, if any.</span></span><br><span class="line"><span class="meta"># - BREAKING CHANGE</span></span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure><p>3、使用提示<br><code>git commit</code></p><h2 id="commitizen"><a href="#commitizen" class="headerlink" title="commitizen"></a>commitizen</h2><p>参考 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;还可以更好&quot;&gt;&lt;a href=&quot;#还可以更好&quot; class=&quot;headerlink&quot; title=&quot;还可以更好&quot;&gt;&lt;/a&gt;还可以更好&lt;/h1&gt;&lt;p&gt;使用git很多年，也提交了很多代码，自以为使用习惯良好。因为每次提交代码，我都会在git commit message中说明清楚修改的内容。但是，偶然间读到一些关于commit message的文章，才发现还有很多进步的空间。&lt;/p&gt;
&lt;p&gt;本文就来学习一下编写更高质量的提交信息，主要参考 &lt;a href=&quot;https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Commit message 和 Change log 编写指南&lt;/a&gt;、&lt;a href=&quot;https://juejin.im/post/6844903606815064077&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;优雅的提交你的 Git Commit Message&lt;/a&gt; 和 &lt;a href=&quot;https://www.conventionalcommits.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Conventional Commits&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/git/"/>
    
    
      <category term="git" scheme="https://www.voidking.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>K8S中的网络策略</title>
    <link href="https://www.voidking.com/dev-k8s-network-policy/"/>
    <id>https://www.voidking.com/dev-k8s-network-policy/</id>
    <published>2020-07-29T12:00:00.000Z</published>
    <updated>2020-07-29T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="怎样限制Pod中的网络流量？"><a href="#怎样限制Pod中的网络流量？" class="headerlink" title="怎样限制Pod中的网络流量？"></a>怎样限制Pod中的网络流量？</h1><p>已知pod名为 webapp ，label为 <code>name=webapp</code> 。现在想要模拟无法访问数据库，限制它的流量，禁止它访问 10.0.0.0/24 网段的所有3306端口，该怎么实现？</p><p>方法一：使用NetworkPolicy限流<br>方法二：开启pod特权模式，在pod内部使用iptables限流<br>方法三：登录pod所在宿主机，在pod所在ns中使用iptables限流</p><a id="more"></a><h1 id="NetworkPolicy"><a href="#NetworkPolicy" class="headerlink" title="NetworkPolicy"></a>NetworkPolicy</h1><p>网络策略（NetworkPolicy）是一种关于 Pod 间及与其他网络端点间所允许的通信规则的规范。<br>NetworkPolicy 资源使用 标签 选择 Pod，并定义选定 Pod 所允许的通信规则。</p><p>网络策略通过网络插件来实现。要使用网络策略，用户必须使用支持 NetworkPolicy 的网络解决方案。创建一个资源对象，而没有控制器来使它生效的话，是没有任何作用的。</p><p>默认情况下，Pod 是非隔离的，它们接受任何来源的流量。<br>Pod 可以通过相关的网络策略进行隔离。一旦命名空间中有网络策略选择了特定的 Pod，该 Pod 会拒绝网络策略所不允许的连接。 (命名空间下其他未被网络策略所选择的 Pod 会继续接收所有的流量)<br>网络策略不会冲突，它们是附加的。如果任何一个或多个策略选择了一个 Pod, 则该 Pod 受限于这些策略的 ingress/egress 规则的并集。因此评估的顺序并不会影响策略的结果。</p><p>更多内容参考<a href="https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/" target="_blank" rel="noopener">网络策略</a>和<a href="https://community.qingcloud.com/assets/uploads/files/1567145042807-networkpolicy%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.pdf" target="_blank" rel="noopener">NetworkPolicy最佳实践</a>。</p><p>基础规则：</p><ul><li>如果 Pod 没有被 NetworkPolicy 匹配到，那么它的流量是被允许的 </li><li>如果 Pod 被 NetworkPolicy 匹配到，但是没有出口/入口规则被匹配到，那么它的出口/入口流量是被禁止的</li><li>只能指定规则来允许流量通行，而不能直接禁止流量通行</li><li>NetworkPolicy 中的 Rule 之间的匹配逻辑是 OR</li><li>NetworkPolicy 默认的作用域是 Pod 所在的 Namespace</li></ul><p>1、创建np.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-network-policy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">policyTypes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Egress</span></span><br><span class="line">  <span class="attr">ingress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ipBlock:</span></span><br><span class="line">        <span class="attr">cidr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">        <span class="attr">except:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure><p>这种实现方式，其实有一个问题，就是限流时不止限制了3306端口，还限制了 10.0.0.0/24 网段的所有端口。<br>能不能只限制 10.0.0.0/24 网段的 3306 端口呢？理论上可以实现，然而我不会。。。</p><p>2、执行限流</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f <span class="built_in">np</span>.yaml</span><br></pre></td></tr></table></figure><p>3、解除限流</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">delete</span> -f <span class="built_in">np</span>.yaml</span><br></pre></td></tr></table></figure><h1 id="pod特权模式限流"><a href="#pod特权模式限流" class="headerlink" title="pod特权模式限流"></a>pod特权模式限流</h1><p>1、在pod定义中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">securityContext:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#runAsUser: 0</span></span><br></pre></td></tr></table></figure><p>2、在pod内部执行限流</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A <span class="keyword">OUTPUT</span> -p tcp --dport <span class="number">3306</span> -j <span class="built_in">DROP</span></span><br></pre></td></tr></table></figure><p>3、解除限流</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t<span class="built_in"> nat </span>-nL --line-number</span><br><span class="line">iptables -D OUTPUT 1</span><br></pre></td></tr></table></figure><h1 id="宿主机限流"><a href="#宿主机限流" class="headerlink" title="宿主机限流"></a>宿主机限流</h1><p>1、登录宿主机</p><p>2、查找容器pid</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">ps</span> | <span class="keyword">grep</span> webapp</span><br><span class="line">docker inspect <span class="symbol">&lt;container_id&gt;</span> | <span class="keyword">grep</span> pid -i</span><br></pre></td></tr></table></figure><p>3、执行限流</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter -<span class="built_in">t</span> &lt;pid&gt; -<span class="built_in">n</span> iptables -A OUTPUT -p tcp --dport <span class="number">3306</span> -j DROP</span><br></pre></td></tr></table></figure><p>4、解除限流</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nsenter -t &lt;pid&gt; -n iptables -t<span class="built_in"> nat </span>-nL --line-number</span><br><span class="line">nsenter -t 8993 -n iptables -D OUTPUT 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;怎样限制Pod中的网络流量？&quot;&gt;&lt;a href=&quot;#怎样限制Pod中的网络流量？&quot; class=&quot;headerlink&quot; title=&quot;怎样限制Pod中的网络流量？&quot;&gt;&lt;/a&gt;怎样限制Pod中的网络流量？&lt;/h1&gt;&lt;p&gt;已知pod名为 webapp ，label为 &lt;code&gt;name=webapp&lt;/code&gt; 。现在想要模拟无法访问数据库，限制它的流量，禁止它访问 10.0.0.0/24 网段的所有3306端口，该怎么实现？&lt;/p&gt;
&lt;p&gt;方法一：使用NetworkPolicy限流&lt;br&gt;方法二：开启pod特权模式，在pod内部使用iptables限流&lt;br&gt;方法三：登录pod所在宿主机，在pod所在ns中使用iptables限流&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="网络" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="网络" scheme="https://www.voidking.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>jq命令的安装使用</title>
    <link href="https://www.voidking.com/dev-jq-command/"/>
    <id>https://www.voidking.com/dev-jq-command/</id>
    <published>2020-07-21T12:00:00.000Z</published>
    <updated>2021-07-27T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jq命令简介"><a href="#jq命令简介" class="headerlink" title="jq命令简介"></a>jq命令简介</h1><p>jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。</p><p>更多内容，参考 <a href="https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html" target="_blank" rel="noopener">命令行 JSON 处理工具 jq 的使用介绍</a>。</p><a id="more"></a><h1 id="安装jq"><a href="#安装jq" class="headerlink" title="安装jq"></a>安装jq</h1><p>1、macos</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span><span class="keyword">jq</span></span><br></pre></td></tr></table></figure><p>2、linux</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/stedolan/</span>jq<span class="regexp">/releases/</span>download<span class="regexp">/jq-1.6/</span>jq-linux64</span><br><span class="line">chmod a+x jq-linux64 &amp;&amp; mv jq-linux64 <span class="regexp">/usr/</span>bin<span class="regexp">/jq</span></span><br></pre></td></tr></table></figure><p>3、centos</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span></span><br><span class="line">yum <span class="keyword">install</span> jq</span><br></pre></td></tr></table></figure><p>4、ubuntu</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apt</span> <span class="string">update</span></span><br><span class="line"><span class="attr">apt</span> <span class="string">install -y jq</span></span><br></pre></td></tr></table></figure><h1 id="jq表达式"><a href="#jq表达式" class="headerlink" title="jq表达式"></a>jq表达式</h1><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq .</span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq <span class="string">.name</span></span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq -r <span class="string">.name</span></span><br></pre></td></tr></table></figure><p>用户在使用jq时，需要使用jq支持的语法来构建表达式(filters)并将其传给jq。jq根据语法规则解析表达式，并应用在输入的JSON数据上从而得到需要的结果。</p><p>上面例子中的 <code>.</code> 和 <code>.name</code> 就是表达式。<br><code>.</code> 符号表示对表达式输入的整个JSON对象的引用，<code>.name</code>和<code>.name?</code>表示获取JSON对象的属性。当输入不是JSON对象或数组时，带着问号的方式不会抛出异常。</p><p>选项的含义查看jq帮助即可，比如-r表示输出raw格式内容。</p><h2 id="串行操作"><a href="#串行操作" class="headerlink" title="串行操作"></a>串行操作</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq <span class="string">.name.firstname</span></span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq '<span class="string">.name</span> | <span class="string">.firstname</span>'</span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq '<span class="string">.name</span> | <span class="string">.firstname</span>,<span class="string">.lastname</span>'</span><br><span class="line"><span class="keyword">echo</span> '[&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;,&#123;<span class="string">"firstname"</span>:<span class="string">"Hao"</span>,<span class="string">"lastname"</span>:<span class="string">"Jin"</span>&#125;]' | jq '.[] | <span class="string">.firstname</span>,<span class="string">.lastname</span>' | sed -n <span class="string">"N;s/\n/ /p"</span></span><br></pre></td></tr></table></figure><p>jq表达式支持串行化操作。一个复杂的表达式可以由多个简单的表达式组成，以管道符号 <code>|</code> 分割，串行化执行。管道前面表达式的输出，是管道后面表达式的输入。</p><p>逗号 <code>,</code> 表示对同一个输入应用多个表达式。</p><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq .</span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[0:2]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[0,1]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[].name'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[] | .name'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[] | .["</span>name<span class="string">"]'</span></span><br></pre></td></tr></table></figure><p>jq 提供三种基础表达式来操作数组：<br>迭代器操作<code>.[]</code>，该表达式的输入可以是数组或者JSON对象，输出的是基于数组元素或者JSON对象属性值的迭代器（iterator）。<br>访问特定元素的操作<code>.[index]</code>或<code>.[&quot;attributename&quot;]</code>。用来访问数组元素或者JSON对象的属性值，输出是单个值。<br>数组切片操作<code>.[startindex:endindex]&#39;</code>，其行为类似于 python 语言中数组切片操作。</p><p>一个表达式产生的结果是迭代器时，迭代器的每一个值会分别作为的输入，传给后面的表达式。</p><h1 id="jq运算"><a href="#jq运算" class="headerlink" title="jq运算"></a>jq运算</h1><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.num*3'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.num/3'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str+"</span><span class="number">3</span><span class="string">"'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str*3'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str/"</span><span class="number">4</span><span class="string">"'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.+[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.-[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;]'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.+&#123;"</span>name<span class="string">":&#123;"</span>nickname<span class="string">":"</span>Hankin<span class="string">"&#125;&#125;'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.*&#123;"</span>name<span class="string">":&#123;"</span>nickname<span class="string">":"</span>Hankin<span class="string">"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.name.nickname//"</span>Hankin<span class="string">"'</span></span><br><span class="line"></span><br><span class="line">jq -n <span class="string">'([1,2]|.[])+([4,6]|.[])'</span></span><br></pre></td></tr></table></figure><p>jq 内部支持的数据类型有：数字，字符串，数组和对象(object)。</p><p>数字运算：jq支持加减乘除(/)和求余(%)运算。<br>字符串运算：jq 提供字符串的连接、复制、分割运算。<br>数组运算：并集、差集运算。<br>对象运算：合并。<br>比较运算：jq 内部支持的比较运算，规则与js基本相同。<br>逻辑运算: and/or/not。在 jq 逻辑运算中，除了 false 和 null 外，其余的任何值都等同于 true。<br>默认值运算符：双斜杠。<br>迭代器运算：每一个元素拿出来分别运算。</p><h1 id="jq函数"><a href="#jq函数" class="headerlink" title="jq函数"></a>jq函数</h1><p>jq 支持函数。在使用 jq 函数时，我们应该注意区分两个概念：输入和参数。输入可能是整个表达式的输入数据也可能是表达式别的部分的输出。而参数和函数一起构成新的filter来处理输入。<br>和其他编程语言不同的是，在调用函数时，多个参数之间以分号分隔。jq通过内置函数提供了数据处理时常用的操作，例如：删除、映射，过滤、路径操作等。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'del(.name.firstname)'</span></span><br></pre></td></tr></table></figure><p>删除不需要的元素。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo '[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]'| jq -r 'map(.+<span class="number">1</span>)'</span><br></pre></td></tr></table></figure><p>在数据处理过程中，我们经常需要将数据从一种形式转换成另外一种形式，或者改变数据的值。<br>jq提供了两个内置映射函数来实现这种转换：map 和 map_values。其中，map处理的对象是数组，而map_values则处理对象属性的值。map 函数的参数为 filter 表达式。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo '[1,2,3,4]'| jq -r 'map(<span class="keyword">select</span>(.&gt;<span class="number">2</span>))<span class="string">'</span></span><br><span class="line"><span class="string">echo '</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="string">'| jq -r '</span>.[]|<span class="keyword">select</span>(.&gt;<span class="number">2</span>)<span class="string">'</span></span><br><span class="line"><span class="string">echo '</span>[&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>,<span class="string">"age"</span>: <span class="number">18</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"haojin"</span>,<span class="string">"age"</span>: <span class="number">28</span>&#125;]<span class="string">' | jq '</span>.[]|<span class="keyword">select</span>(.name==<span class="string">"haojin"</span>)<span class="string">'</span></span><br></pre></td></tr></table></figure><p>jq中有两种类型的选择过滤操作。<br>第一种是基于数据类型的过滤，如表达式<code>.[]|arrays</code>的结果只包含数组。可以用来过滤的类型过滤器有：arrays, objects, iterables, booleans, numbers, normals, finites, strings, nulls, values, scalars。<br>第二种是select函数。select接受一个条件表达式作为参数。其输入可以是迭代器，或者和map函数配合使用来处理数组。当输入中的某个元素使select参数中的条件表达式结果为真时，则在结果中保留该元素，否则不保留该元素。</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>jq中的path是指从根到某个叶子属性的访问路径。<br>在jq中有两种表示路径的方式：数组表示法和属性表示法。<br>属性表示法类似于我们在filter中访问某个属性值的方式，如<code>.a.b</code>。<br>数组表示法是将路径中的每一部分表示为数组的一个元素。<br>jq提供了一个内置函数path用来实现路径从属性表示法到数组表示法的转换。</p><p>jq还提供了函数用来读取路径的值（getpath）, 设置路径的值（setpath）和删除路径（del）。<br>不过这三个函数对路径的处理并不一致。其中getpath和setpath只接受数组表示法的路径，而del函数只能正确处理属性表示法的路径。</p><p>jq还提供了一个函数paths用来枚举可能存在的路径。在没有参数的情况下，paths函数将输出JSON数据中所有可能的路径。paths函数可以接受一个过滤器，来只输出满足条件的路径。</p><p>jq中提供了一系列的函数用来判断某个元素或者属性是否存在于输入数据中。其中函数has和in用来判断JSON对象或数组是否包含特定的属性或索引。函数contains和inside用来判断参数是否完全包含在输入数据中。对于不同的数据类型，判断是否完全包含的规则不同。对于字符串，如果A是B的子字符串，则认为A完全包含于B。对于对象类型，如果对象A的所有属性在对象B中都能找到且值相同，则认为A完全包含于B。</p><h2 id="数组函数"><a href="#数组函数" class="headerlink" title="数组函数"></a>数组函数</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jq -nr '[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>]|<span class="type">flatten</span>'</span><br><span class="line">jq -nr '[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]|<span class="type">reverse</span>'</span><br><span class="line">jq -nr '[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]|<span class="type">sort</span>'</span><br><span class="line">jq -nr '[&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"a"</span>:<span class="number">2</span>&#125;]|<span class="type">sort_by</span>(.a)'</span><br><span class="line">jq -nr '<span class="string">"abcb"</span>|<span class="type">indices</span>(<span class="string">"b"</span>)'</span><br><span class="line">jq -nr '[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]|<span class="type">indices</span>(<span class="number">3</span>)'</span><br></pre></td></tr></table></figure><p>jq 提供内置函数用于完成数组的扁平化（flatten），反序（reverse），排序（sort、sort_by），比较（min、min_by、max、max_by）和查找（indices、index、rindex）。其中indices函数的输入数据可以是数组，也可以是字符串。和 index函数不同的是，其结果是一个包含所有参数在输入数据中位置的数组。</p><h1 id="jq高级特性"><a href="#jq高级特性" class="headerlink" title="jq高级特性"></a>jq高级特性</h1><p>变量、Reduce、自定义函数和模块等。未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jq命令简介&quot;&gt;&lt;a href=&quot;#jq命令简介&quot; class=&quot;headerlink&quot; title=&quot;jq命令简介&quot;&gt;&lt;/a&gt;jq命令简介&lt;/h1&gt;&lt;p&gt;jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。&lt;/p&gt;
&lt;p&gt;更多内容，参考 &lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;命令行 JSON 处理工具 jq 的使用介绍&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="linux" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/linux/"/>
    
    
      <category term="linux" scheme="https://www.voidking.com/tags/linux/"/>
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Docker Swarm</title>
    <link href="https://www.voidking.com/dev-docker-swarm/"/>
    <id>https://www.voidking.com/dev-docker-swarm/</id>
    <published>2020-07-10T12:00:00.000Z</published>
    <updated>2020-07-10T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Swarm简介"><a href="#Docker-Swarm简介" class="headerlink" title="Docker Swarm简介"></a>Docker Swarm简介</h1><p>Docker Swarm是一个Docker集群调度管理工具。相比于Kubernetes，Swarm内置于Docker，更加轻量，更加简单方便；相应的，就没有Kubernetes那么多强大的特性。</p><p>本文搭建使用Swarm，主要参考<a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener">Swarm mode overview</a> 和 <a href="https://zhuanlan.zhihu.com/p/105420094" target="_blank" rel="noopener">docker swarm（一） 入门 – 搭建一个简单的swarm集群</a>。</p><p>已有两个安装好Docker的机器（swarm-manager和swarm-worker），IP分别为 192.168.56.104 和 192.168.56.105 ，两台主机的hosts都添加：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168.56.104</span> swarm-manager</span><br><span class="line"><span class="number">192.168.56.105</span> swarm-worker</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Swarm集群搭建"><a href="#Swarm集群搭建" class="headerlink" title="Swarm集群搭建"></a>Swarm集群搭建</h1><h2 id="manager-node"><a href="#manager-node" class="headerlink" title="manager node"></a>manager node</h2><p><strong>在swarm-manager节点：</strong></p><p>1、创建swarm manager</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span></span><br></pre></td></tr></table></figure><p>这一步会生成join命令，复制记录一下。</p><p>2、验证安装</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">inf</span>o</span><br><span class="line">docker <span class="keyword">node</span> <span class="title">ls</span></span><br></pre></td></tr></table></figure><p>3、关闭防火墙，方便其他主机加入成为worker</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld</span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></table></figure><h2 id="worker-node"><a href="#worker-node" class="headerlink" title="worker node"></a>worker node</h2><p><strong>在swarm-worker节点：</strong><br>1、关闭防火墙，方便manager调用</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld</span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>2、加入swarm成为worker</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN<span class="number">-1</span><span class="number">-21</span>v9lvwrzapfzdzhq4js6xbtyasak4hdcdhz9p13fch23zdbn9-bneduvi9fi4ba05eywhqbe94z <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span>:<span class="number">2377</span></span><br></pre></td></tr></table></figure><p>PS：脱离swarm<br><code>docker swarm leave</code></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><code>docker node ls</code>，查看节点状态。<br><img src="http://cdn.voidking.com/@/imgs/docker-swarm/nodels.jpg?imageView2/0/w/800" alt=""></p><h1 id="使用Swarm"><a href="#使用Swarm" class="headerlink" title="使用Swarm"></a>使用Swarm</h1><p>1、部署一个服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>create \</span><br><span class="line"><span class="attribute">--name</span>=vk-nginx \</span><br><span class="line">--publish <span class="attribute">published</span>=80,target=80 \</span><br><span class="line">--replicas 1  \</span><br><span class="line">voidking/nginx:v1.0</span><br></pre></td></tr></table></figure><p>2、查看服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>ls</span><br><span class="line">docker inspect vk-nginx</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/servicels.jpg?imageView2/0/w/800" alt=""></p><p>3、访问服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span></span><br><span class="line">curl <span class="number">192.168</span><span class="number">.56</span><span class="number">.105</span></span><br></pre></td></tr></table></figure><p>如果此时有一个ip是curl不通的，那么说明有问题，因为所有节点都应该添加端口映射关系。</p><p>4、服务扩容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>scale <span class="attribute">vk-nginx</span>=4</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/scale.jpg?imageView2/0/w/600" alt=""></p><p>5、查看服务在节点的分布</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>ps vk-nginx</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/serviceps.jpg?imageView2/0/w/800" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-Swarm简介&quot;&gt;&lt;a href=&quot;#Docker-Swarm简介&quot; class=&quot;headerlink&quot; title=&quot;Docker Swarm简介&quot;&gt;&lt;/a&gt;Docker Swarm简介&lt;/h1&gt;&lt;p&gt;Docker Swarm是一个Docker集群调度管理工具。相比于Kubernetes，Swarm内置于Docker，更加轻量，更加简单方便；相应的，就没有Kubernetes那么多强大的特性。&lt;/p&gt;
&lt;p&gt;本文搭建使用Swarm，主要参考&lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swarm mode overview&lt;/a&gt; 和 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/105420094&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker swarm（一） 入门 – 搭建一个简单的swarm集群&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;已有两个安装好Docker的机器（swarm-manager和swarm-worker），IP分别为 192.168.56.104 和 192.168.56.105 ，两台主机的hosts都添加：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;192.168.56.104&lt;/span&gt; swarm-manager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;192.168.56.105&lt;/span&gt; swarm-worker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="swarm" scheme="https://www.voidking.com/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>youtube、youku、爱奇艺等视频平台下载方法</title>
    <link href="https://www.voidking.com/hobby-video-download/"/>
    <id>https://www.voidking.com/hobby-video-download/</id>
    <published>2020-07-04T03:00:00.000Z</published>
    <updated>2020-07-04T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频下载的痛点"><a href="#视频下载的痛点" class="headerlink" title="视频下载的痛点"></a>视频下载的痛点</h1><p>很多时候，我们在youtube、youku、爱奇艺、腾讯视频、bilibili等视频平台看到了喜欢的视频，想要下载到本地，但是无法下载，要么必须要客户端才能下载。<br>好不容易下载到本地，对于不同平台下载的视频，还必须使用不同的客户端进行播放。<br>如果想要作为教学视频放到PPT中，还必须进行转码，不同平台还得寻找不同的转码方法。</p><p>太难了，好在一些前辈帮我们解决了这些问题，并且开发出了很多好用的工具。本文中，重点推荐两款个人在用的视频下载工具：<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a>和<a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a>。</p><a id="more"></a><h1 id="youtube-dl"><a href="#youtube-dl" class="headerlink" title="youtube-dl"></a>youtube-dl</h1><p>1、访问<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a>，下载需要的版本，这里以macos版本为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl</span><br><span class="line">sudo chmod a+rx /usr/local/bin/youtube-dl</span><br><span class="line"><span class="meta">#</span><span class="bash"> or </span></span><br><span class="line">brew install youtube-dl</span><br></pre></td></tr></table></figure><p>2、查看视频支持的下载格式，下载视频</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -F http://v.youku.com/v_show/id_XODQzMTQ4NDQ=.html</span><br><span class="line">youtube-dl -f mp4 http://v.youku.com/v_show/id_XODQzMTQ4NDQ=.html</span><br></pre></td></tr></table></figure><h1 id="you-get"><a href="#you-get" class="headerlink" title="you-get"></a>you-get</h1><p>1、访问<a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a>，下载需要的版本，这里以macos版本为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install you-get</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">brew install you-get</span><br></pre></td></tr></table></figure><p>2、查看视频支持的下载格式，下载视频</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">you-get -i http:<span class="regexp">//</span>v.youku.com<span class="regexp">/v_show/i</span>d_XODQzMTQ4NDQ=.html</span><br><span class="line">you-get http:<span class="regexp">//</span>v.youku.com<span class="regexp">/v_show/i</span>d_XODQzMTQ4NDQ=.html</span><br><span class="line"><span class="comment">#you-get --itag=18 'https://www.youtube.com/watch?v=jNQXAC9IVRw'</span></span><br></pre></td></tr></table></figure><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>这两个软件功能上没有太大差别，下载速度也没有太大差别。<br>youtube-dl更加轻量，安装也要比you-get快的多（you-get依赖一堆软件）。<br>对于同一个视频，这两个软件支持的下载格式有所不同，比如上面的例子中，youtube-dl支持mp4格式，you-get支持flv格式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视频下载的痛点&quot;&gt;&lt;a href=&quot;#视频下载的痛点&quot; class=&quot;headerlink&quot; title=&quot;视频下载的痛点&quot;&gt;&lt;/a&gt;视频下载的痛点&lt;/h1&gt;&lt;p&gt;很多时候，我们在youtube、youku、爱奇艺、腾讯视频、bilibili等视频平台看到了喜欢的视频，想要下载到本地，但是无法下载，要么必须要客户端才能下载。&lt;br&gt;好不容易下载到本地，对于不同平台下载的视频，还必须使用不同的客户端进行播放。&lt;br&gt;如果想要作为教学视频放到PPT中，还必须进行转码，不同平台还得寻找不同的转码方法。&lt;/p&gt;
&lt;p&gt;太难了，好在一些前辈帮我们解决了这些问题，并且开发出了很多好用的工具。本文中，重点推荐两款个人在用的视频下载工具：&lt;a href=&quot;https://github.com/ytdl-org/youtube-dl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;youtube-dl&lt;/a&gt;和&lt;a href=&quot;https://github.com/soimort/you-get&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;you-get&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="下载" scheme="https://www.voidking.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Helm入门篇</title>
    <link href="https://www.voidking.com/dev-helm-start/"/>
    <id>https://www.voidking.com/dev-helm-start/</id>
    <published>2020-06-30T12:00:00.000Z</published>
    <updated>2020-06-30T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Helm简介"><a href="#Helm简介" class="headerlink" title="Helm简介"></a>Helm简介</h1><blockquote><p><a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a> is the best way to find, share, and use software built for Kubernetes.</p></blockquote><p>helm是k8s的包管理工具，就像yum之于centos，apt之于ubuntu。不同的是，yum管理的是软件包，helm管理的是配置好的k8s资源包。这种配置好的k8s资源包，按照chart的包格式进行包装。以下是wordpress的chart包结构：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wordpress/</span><br><span class="line">  Chart.yaml          <span class="comment"># A YAML file containing information about the chart</span></span><br><span class="line">  LICENSE             <span class="comment"># OPTIONAL: A plain text file containing the license for the chart</span></span><br><span class="line">  README.md           <span class="comment"># OPTIONAL: A human-readable README file</span></span><br><span class="line">  requirements.yaml   <span class="comment"># OPTIONAL: A YAML file listing dependencies for the chart</span></span><br><span class="line">  values.yaml         <span class="comment"># The default configuration values for this chart</span></span><br><span class="line">  charts/             <span class="comment"># A directory containing any charts upon which this chart depends.</span></span><br><span class="line">  templates/          <span class="comment"># A directory of templates that, when combined with values,</span></span><br><span class="line">                      <span class="comment"># will generate valid Kubernetes manifest files.</span></span><br><span class="line">  templates/NOTES.txt <span class="comment"># OPTIONAL: A plain text file containing short usage notes</span></span><br></pre></td></tr></table></figure><p>Helm2包括两个组件：客户端（Helm Client）和服务端（Tiller）。Helm发送指令给Tiller(gRPC协议)，Tiller主要用于管理各种应用发布的版本，并且与k8s进行交互。<br>不过，在 Helm3 中 Tiller 被移除掉了，Helm直接与k8s进行交互，版本相关的数据存储在k8s中。</p><p>更多内容，参考<a href="https://github.com/helm/helm" target="_blank" rel="noopener">helm/helm</a>、<a href="https://mp.weixin.qq.com/s/uWdPB4LvmMmvUX2ioKwbww?spm=a2c6h.12873639.0.0.67905225zuo8Vs" target="_blank" rel="noopener">Helm 从入门到实践 | 从 0 开始制作一个 Helm Charts</a>、<a href="https://whmzsu.github.io/helm-doc-zh-cn/chart/charts-zh_cn.html" target="_blank" rel="noopener">Helm用户与开发者指南</a>。</p><a id="more"></a><h1 id="体验Helm"><a href="#体验Helm" class="headerlink" title="体验Helm"></a>体验Helm</h1><p>越来越喜欢用<a href="https://www.katacoda.com/" target="_blank" rel="noopener">katacoda</a>来学习新技能，Helm也可以在上面通过实践学习。</p><ul><li><a href="https://www.katacoda.com/javajon/courses/kubernetes-pipelines/helm" target="_blank" rel="noopener">Helm Package Manager - BY JAVAJON</a></li><li><a href="https://www.katacoda.com/courses/kubernetes/helm-package-manager" target="_blank" rel="noopener">Helm Package Manager - BY KATACODA</a></li></ul><h1 id="安装Helm"><a href="#安装Helm" class="headerlink" title="安装Helm"></a>安装Helm</h1><p>参考 <a href="https://helm.sh/docs/intro/install/" target="_blank" rel="noopener">Installing Helm</a>，安装helm。</p><h2 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>helm</span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>1、查找需要的<a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener">release版本</a></p><p>2、下载并安装</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">wget</span> https://<span class="meta">get</span>.helm.sh/helm-<span class="built_in">v3</span>.<span class="number">2</span>.<span class="number">4</span>-linux-amd64.tar.gz</span><br><span class="line"><span class="symbol">tar</span> -xzvf helm-<span class="built_in">v2</span>.<span class="number">16</span>.<span class="number">9</span>-linux-amd64.tar.gz</span><br><span class="line"><span class="symbol">mv</span> linux-amd64/helm /usr/local/<span class="keyword">bin/helm</span></span><br><span class="line"><span class="keyword">helm </span>version</span><br></pre></td></tr></table></figure><h1 id="使用Helm"><a href="#使用Helm" class="headerlink" title="使用Helm"></a>使用Helm</h1><p>使用条件：安装配置k8s集群；配置kubectl，可以访问k8s；安装helm。</p><p>查看帮助：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">helm</span> <span class="string">-h</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">get -h</span></span><br></pre></td></tr></table></figure><p>1、初始化Chart仓库</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># helm repo <span class="built_in">add</span> stable http<span class="variable">s:</span>//kubernetes-charts.storage.googleapis.<span class="keyword">com</span>/</span><br><span class="line"># helm repo <span class="built_in">remove</span> stable</span><br><span class="line">helm repo <span class="built_in">add</span> stable http<span class="variable">s:</span>//kubernetes.oss-<span class="keyword">cn</span>-hangzhou.aliyuncs.<span class="keyword">com</span>/charts</span><br><span class="line">helm repo <span class="keyword">list</span></span><br></pre></td></tr></table></figure><p>2、查看可以安装的charts<br><code>helm search repo stable</code></p><p>3、在k8s集群安装mysql</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm repo <span class="keyword">update</span></span><br><span class="line">helm <span class="keyword">show</span> chart <span class="keyword">stable</span>/mysql</span><br><span class="line">helm <span class="keyword">show</span> <span class="keyword">all</span> <span class="keyword">stable</span>/mysql</span><br><span class="line">helm install <span class="keyword">stable</span>/mysql <span class="comment">--generate-name</span></span><br></pre></td></tr></table></figure><p>4、卸载mysql</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">helm</span> <span class="string">ls</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">uninstall smiling-penguin</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">status smiling-penguin</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Helm简介&quot;&gt;&lt;a href=&quot;#Helm简介&quot; class=&quot;headerlink&quot; title=&quot;Helm简介&quot;&gt;&lt;/a&gt;Helm简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm&lt;/a&gt; is the best way to find, share, and use software built for Kubernetes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;helm是k8s的包管理工具，就像yum之于centos，apt之于ubuntu。不同的是，yum管理的是软件包，helm管理的是配置好的k8s资源包。这种配置好的k8s资源包，按照chart的包格式进行包装。以下是wordpress的chart包结构：&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wordpress/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Chart.yaml          &lt;span class=&quot;comment&quot;&gt;# A YAML file containing information about the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LICENSE             &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A plain text file containing the license for the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  README.md           &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A human-readable README file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  requirements.yaml   &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A YAML file listing dependencies for the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  values.yaml         &lt;span class=&quot;comment&quot;&gt;# The default configuration values for this chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  charts/             &lt;span class=&quot;comment&quot;&gt;# A directory containing any charts upon which this chart depends.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  templates/          &lt;span class=&quot;comment&quot;&gt;# A directory of templates that, when combined with values,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;comment&quot;&gt;# will generate valid Kubernetes manifest files.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  templates/NOTES.txt &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A plain text file containing short usage notes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Helm2包括两个组件：客户端（Helm Client）和服务端（Tiller）。Helm发送指令给Tiller(gRPC协议)，Tiller主要用于管理各种应用发布的版本，并且与k8s进行交互。&lt;br&gt;不过，在 Helm3 中 Tiller 被移除掉了，Helm直接与k8s进行交互，版本相关的数据存储在k8s中。&lt;/p&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://github.com/helm/helm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;helm/helm&lt;/a&gt;、&lt;a href=&quot;https://mp.weixin.qq.com/s/uWdPB4LvmMmvUX2ioKwbww?spm=a2c6h.12873639.0.0.67905225zuo8Vs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm 从入门到实践 | 从 0 开始制作一个 Helm Charts&lt;/a&gt;、&lt;a href=&quot;https://whmzsu.github.io/helm-doc-zh-cn/chart/charts-zh_cn.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm用户与开发者指南&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="helm" scheme="https://www.voidking.com/tags/helm/"/>
    
  </entry>
  
</feed>
