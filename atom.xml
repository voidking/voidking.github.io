<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习的郝</title>
  
  <subtitle>好好学习，天天向上！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.voidking.com/"/>
  <updated>2020-05-31T06:00:55.995Z</updated>
  <id>https://www.voidking.com/</id>
  
  <author>
    <name>VoidKing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dockerfile中的CMD和ENTRYPOINT</title>
    <link href="https://www.voidking.com/dev-dockerfile-cmd-entrypoint/"/>
    <id>https://www.voidking.com/dev-dockerfile-cmd-entrypoint/</id>
    <published>2020-04-28T10:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Dockerfile中的CMD和ENTRYPOINT有什么区别？<br>docker run时默认执行什么命令，怎样覆盖默认命令？<br>pod定义中的args和command字段有什么作用？<br>本文，我们来回答一下这些问题。主要参考<a href="https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/" target="_blank" rel="noopener">Docker RUN vs CMD vs ENTRYPOINT</a>和<a href="https://www.udemy.com/user/mumshad-mannambeth/" target="_blank" rel="noopener">Mumshad Mannambeth的课程</a>。</p><a id="more"></a><h1 id="指令执行方式"><a href="#指令执行方式" class="headerlink" title="指令执行方式"></a>指令执行方式</h1><p>RUN和ENTRYPOINT指令都可以有两种执行方式：shell方式和exec方式。</p><h2 id="shell方式"><a href="#shell方式" class="headerlink" title="shell方式"></a>shell方式</h2><p>shell方式格式：<br><code>&lt;instruction&gt; &lt;command&gt;</code></p><p>例子：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install python3</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Hello world"</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Hello world"</span></span></span><br></pre></td></tr></table></figure><p>当指令以shell方式执行时，它会在后台调用 <code>/bin/sh -c &lt;command&gt;</code>，并且会进行常规的shell处理。例如，Dockerfile中的以下定义：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> name voidking</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Hello, <span class="variable">$name</span>"</span></span></span><br></pre></td></tr></table></figure><p>docker run 会输出 <code>Hello, voidking</code> ，变量会被替换。</p><h2 id="exec方式"><a href="#exec方式" class="headerlink" title="exec方式"></a>exec方式</h2><p>exec方式格式：<br><code>&lt;instruction&gt; [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;, ...]</code><br>例子：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"apt-get"</span>, <span class="string">"install"</span>, <span class="string">"python3"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/echo"</span>, <span class="string">"Hello world"</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/echo"</span>, <span class="string">"Hello world"</span>]</span></span><br></pre></td></tr></table></figure><p>当指令以exec方式执行时，它将直接调用可执行文件，并且不会进行shell处理。例如，Dockerfile中的以下定义：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> name voidking</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/echo"</span>, <span class="string">"Hello, <span class="variable">$name</span>"</span>]</span></span><br></pre></td></tr></table></figure><p>docker run 会输出 <code>Hello, $name</code> ，变量不会被替换。</p><p>如果需要运行bash而不是sh，需要使用exec方式。在这种情况下，将进行常规的shell处理。例如，Dockerfile中的以下定义：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> name voidking</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"echo Hello, <span class="variable">$name</span>"</span>]</span></span><br></pre></td></tr></table></figure><p>docker run 会输出 <code>Hello, voidking</code> ，变量会被替换。</p><h1 id="CMD和ENTRYPOINT"><a href="#CMD和ENTRYPOINT" class="headerlink" title="CMD和ENTRYPOINT"></a>CMD和ENTRYPOINT</h1><h2 id="CMD定义"><a href="#CMD定义" class="headerlink" title="CMD定义"></a>CMD定义</h2><p>访问<a href="https://hub.docker.com/_/ubuntu?tab=description" target="_blank" rel="noopener">dockerhub ubuntu</a>，Supported tags and respective Dockerfile links，随便选择一个系统版本，这里选择 16.04 。点击链接，可以看到Dockerfile的定义。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># overlook all the definition</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></span><br></pre></td></tr></table></figure><p>可以看到，Dockerfile中定义了CMD为 <code>/bin/bash</code> ，也就是定义了默认命令为 <code>/bin/bash</code>。</p><p><code>docker run ubuntu:16.04</code> 会执行默认命令 <code>/bin/bash</code> 。</p><h2 id="执行特定命令"><a href="#执行特定命令" class="headerlink" title="执行特定命令"></a>执行特定命令</h2><p>我们想要执行命令，那么需要在docker run时指定命令，覆盖默认命令。<br><code>docker run ubuntu:16.04 sleep 3600</code>，会执行 <code>sleep 3600</code> 。</p><p>如果想要使这个特定命令永久生效，那么需要使用Dockerfile定义一个新的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"sleep"</span>,<span class="string">"3600"</span>]</span></span><br></pre></td></tr></table></figure><p><code>docker build -t ubuntu-sleeper .</code>，生成新的镜像。</p><p><code>docker run ubuntu-sleeper</code>，执行默认命令 <code>sleep 3600</code> 。</p><h2 id="特定参数"><a href="#特定参数" class="headerlink" title="特定参数"></a>特定参数</h2><p>如果我们想要修改sleep的时间，该怎么做？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:<span class="number">16.04</span> sleep <span class="number">3600</span></span><br><span class="line">docker run ubuntu:<span class="number">16.04</span> sleep <span class="number">1200</span></span><br></pre></td></tr></table></figure><p>sleep命令没有变，变化的只有参数，sleep是否可以省略？可以的，定义一个新的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"sleep"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"3600"</span>]</span></span><br></pre></td></tr></table></figure><p><code>docker build -t ubuntu-sleeper .</code>，生成新的镜像。</p><p><code>docker run ubuntu-sleeper</code>，执行默认命令 <code>sleep 3600</code> 。</p><p><code>docker run ubuntu-sleeper 1200</code>，执行命令 <code>sleep 1200</code> 。</p><p>那么，ENTRYPOINT里的命令是否可以被替换的呢？也是可以的。<br><code>docker run --entrypoint sleep2.0 ubuntu-sleeper 1200</code>，执行命令 <code>sleep2.0 1200</code> 。</p><p>综上，docker run会默认执行 <code>ENTRYPOINT + CMD</code>。<br>通常情况下，我们会在Dockerfile中定义ENTRYPOINT作为固定命令，定义CMD作为默认参数。</p><h1 id="args和command"><a href="#args和command" class="headerlink" title="args和command"></a>args和command</h1><p>在k8s中定义pod时，有args和command两个字段。这两个字段，分别覆盖CMD和ENTRYPOINT。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: v1</span><br><span class="line"><span class="attribute">kind</span>: Pod</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">creationTimestamp</span>: null</span><br><span class="line">  <span class="attribute">labels</span>:</span><br><span class="line">    <span class="attribute">run</span>: ubuntu</span><br><span class="line">  <span class="attribute">name</span>: ubuntu</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line">  <span class="attribute">containers</span>:</span><br><span class="line">  - <span class="attribute">image</span>: <span class="attribute">ubuntu</span>:<span class="number">16.04</span></span><br><span class="line">    <span class="attribute">name</span>: ubuntu</span><br><span class="line">    <span class="attribute">resources</span>: &#123;&#125;</span><br><span class="line">    <span class="attribute">command</span>: [<span class="string">"sleep"</span>]</span><br><span class="line">    <span class="attribute">args</span>: [<span class="string">"1200"</span>]</span><br><span class="line">  <span class="attribute">dnsPolicy</span>: ClusterFirst</span><br><span class="line">  <span class="attribute">restartPolicy</span>: Always</span><br><span class="line"><span class="attribute">status</span>: &#123;&#125;</span><br></pre></td></tr></table></figure><p>该pod启动后的执行命令为 <code>sleep 1200</code> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Dockerfile中的CMD和ENTRYPOINT有什么区别？&lt;br&gt;docker run时默认执行什么命令，怎样覆盖默认命令？&lt;br&gt;pod定义中的args和command字段有什么作用？&lt;br&gt;本文，我们来回答一下这些问题。主要参考&lt;a href=&quot;https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker RUN vs CMD vs ENTRYPOINT&lt;/a&gt;和&lt;a href=&quot;https://www.udemy.com/user/mumshad-mannambeth/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mumshad Mannambeth的课程&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>怎样做出可口的食物？</title>
    <link href="https://www.voidking.com/essay-how-to-cook-good-food/"/>
    <id>https://www.voidking.com/essay-how-to-cook-good-food/</id>
    <published>2020-04-19T19:00:00.000Z</published>
    <updated>2020-05-31T06:00:56.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记不得新冠疫情开始的具体时间，只知道今年的春节（2020年1月25日），没有出去拜年，春节期间也没有出去聚餐。然后，疫情日益严重，继湖北武汉之后，各市也开始封城。<br>复工日期一推再推，2月15日经历了两次信息登记，三次体温检测，顺利返回北京。先去社区办理观察证，小区内隔离两周，拿到出入证，还要录入人脸识别，以便进出小区。<br>3月9日年后第一次上班，需要查询近期行程，测量体温，才能进入达美中心。复工后三周休两周，直到最近，才每周上班。但是，仍然不敢在外面吃饭，因为多人用餐是最容易传播新冠的途径。</p><p>因此，厨道大兴！而小编不才也加入了自己做饭的行列，毕竟自己做才最放心。做的多了，自然不能只满足于能吃，而要追求好吃。</p><a id="more"></a><h1 id="秘诀"><a href="#秘诀" class="headerlink" title="秘诀"></a>秘诀</h1><p>用最少的调料，最简单的烹饪方法，最大程度发挥出食物本来的味道。</p><p>1、糖，是万能的，别怕，不管是任何菜式，出锅前放一丢丢，总会遇到你想要的味道。糖，不是为了让菜变得甜腻，而是作为味引，激发出足以挑拨你味蕾的口感。</p><p>2、豆瓣酱在肉类处理上，是不会犯错的存在，最简单的，放油，放豆瓣酱和肉沫，加一点点料酒去腥，就可以得到满满一碗辣肉面的肉酱，放在冰箱里吧，什么时候饿了，下碗面条浇一点这个肉酱上去，端在面前，是一碗面条吗？不，是一碗准备时间只需要5分钟的幸福。</p><p>3、蚝油在好多素菜的处理上，完全可以替代盐，而且有着盐没有的那股“鲜”味，最直接的就是花菜，尤其是干锅花菜。洗干净沥干，然后下油，放一点点花椒或者辣椒，吧花菜放进去，一滴水也不要加，感觉差不多了，放耗油+生抽，别放盐，出锅，有追求的就再放些五花肉片进去，尝尝，是不是觉得外面的干锅简直是垃圾？</p><p>4、初学者，不要想着一气呵成，很多东西是可以在烹饪过程中不断调整的，容错性巨高，特别是烹饪时间较长的菜式，例如蒸菜。大个比方：梅干菜扣肉，前面不罗嗦，就说上蒸锅开蒸之后，每隔半小时用筷子舔一下，觉得咸了赶紧吧里面的汁水逼出来一点，觉得淡了就加一勺老抽进去，觉得不够甜就放一小粒冰糖在边边，容错性巨高。</p><p>5、洋葱没有什么味道，它的全部价值在于增香。举个例子：最最最最简单的，炒鸡蛋，加一两片洋葱进去，感觉是两个菜。</p><p>6、刀工没有那么重要，现在的厨房懒人工具太多了，不要把时间浪费在练习刀工上，至少我是这么认为的，还容易受伤。</p><p>7、外面的菜口感总觉得和家里不一样，是因为外面的火，远远比家里的要旺，这个是煤气灶的硬伤，解决不了的，但也并不是没有一点办法，我个人的解决方案是，尤其在所谓的“爆炒”菜式中，会将火开至最大，然后将锅倾斜至很夸张的角度，目的是让火舌舔到锅里的油，这样就会有锅里起火的效果，温度非常之高，然后上盖子压灭，出锅。这招是我自己捣鼓出来的，有的时候实在是少油，火舌舔不到，我就在锅边边刷一点油。</p><p>8、汤类中的“鲜”，我指的是的寻常汤类，不外乎来自这四种东西——笋、肉、味精、白胡椒粉（评论提醒，还有一种，但我不经常做，就是菇类）。这也是我经常做的几道，极其方便。比如，上海菜中有一道“腌笃鲜”，冬笋、精肉、咸肉，一比一比一入锅，一大锅，熬着吧，啥也不用放，真的其他啥也不用放（姜片和料酒去腥还是必需的），1个小时后出锅，撒点葱花，冬天里简直是。。。王菲有首歌叫什么来着？天上人间是吧，诶。</p><p>再比如，我这边有个卖臭豆腐的，炸完后浸入一种汤里，巨好喝，问他怎么弄的，他摆摆手说是秘方，不外传。回家自己细细一品，转身进厨房，不说一模一样，但可以乱真——牛肉汤，味精、五香粉，酸豆角，白胡椒粉，香菜。就这么简单，还秘方不外传，啊我呸。</p><p>9、用猪油，比其他任何的大豆油或色拉油炒出来的菜，都要香，我用过一次就上瘾，唯一的缺点就是凝固点太高了（很多人评论纠正我是低？我也搞不明白了，如果普通油凝固需要零下1度，而猪油凝固零上5度，到底是谁高谁低呢？），很容易就变成膏体，冬天是需要用勺子挖的。</p><p>10、最后给个心得，其实厨艺这东西没有什么玄妙的，无非是经验而已，我一个人搁那捣鼓五六十年，出来绝对也是一等一的大师，总有个阴差阳错能让我悟到一些原本没人点拨到的TIPS，那为什么不去寻求身边的高手呢？比方，我吃番茄炒蛋，永远是淡而无味，加再多调味品都没办法拯救的哪种，结果我一朋友对我说，你说说你怎么弄的呢？说完，所有的步骤和路数都是OK的，唯一一点，出错了，炒番茄的时候没有用勺子用力压番茄，这样番茄里的酱汁就不会被压出来，也就没有办法裹在蛋上形成独特的口感了。我一听，大惊，对啊，就是这个道理。</p><p>再比方，那个薯条，我随便怎么都弄不出那种麦当劳的风味，口感一模一样，就是没有那种风味，最后问题出在，土豆切条之后需要用牛奶浸泡一晚上，没有牛奶用奶粉也可以，这样会有若有若无的奶香味道，味蕾再发达的人，别人不说，这种味道你要能领悟原材料估计得靠缘分。</p><p>你看，是不是一个很小的点拨？小到你压根不会去注意。</p><p>多问多讨教就对了。</p><p>11、最后的最后，大家都是一双手，厨艺这东西练练总会上去的，但巧妇难为无米之炊，家里的调料一定要齐全，不然就会变成我，经常戴着口罩围着围裙坐电梯到小区门口超市买缺的调料（那回头率老高了）。郫县豆瓣酱、料酒、老姜、蒜瓣、老抽（酱油）、生抽（鲜酱油）、香醋、白醋、白砂糖、老冰糖、白芝麻、小磨麻油、甜面酱、蚝油、辣椒面、五香粉、八角、桂皮、香叶、咖哩粉、白胡椒粉、鲜辣粉、花椒粉、椒盐、孜然粉、番茄酱、浓汤宝（牛肉、猪肉和老母鸡）、蜂蜜、老干妈豆豉酱。</p><p>这些调味品有共同的特征——1、保质期较长，常备着，不容易坏。2、使用频率极其频繁。3、要么不用，一旦那道菜式需要用到，而你恰恰缺少，那这道菜基本就属于做不了了，非要不可的那种。</p><h1 id="调味品"><a href="#调味品" class="headerlink" title="调味品"></a>调味品</h1><ul><li>油：大豆油即可，菜籽油更好。</li><li>盐：海盐、湖盐、井盐、岩盐，任选即可。</li><li>酱油：生抽，老抽。生抽一般用来蘸料，拌凉菜，或者是炒菜时提个鲜；老抽一般在红烧时做上色用。简单来说，拌菜炒菜用生抽，红烧用老抽。</li><li>醋：陈醋，白醋，米醋。陈醋用途最广，可以炒菜，可以凉拌，可以蘸酱，还能上色；白醋最大的用处体现在它的功能性，比如除臭除味、美肤养颜、洗涤除垢等等；米醋因为口味柔和，有着非常浓厚的香气，所以多用来凉拌。</li><li>糖：绵糖。</li><li>其他：十三香、干辣椒（小米椒）/辣椒粉、大茴香（孜然）/孜然粉、八角、花椒/花椒粉、桂皮、香叶、小茴香、芝麻、烧烤料。</li></ul><h1 id="烹饪"><a href="#烹饪" class="headerlink" title="烹饪"></a>烹饪</h1><p>万能流程：<br>1、放油，放肉，放料酒，翻炒。<br>2、放菜，翻炒。<br>3、放入调味料（最后放盐），翻炒。<br>4、根据经验，观察色泽，尝一尝，出锅。</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ul><li>APP：下厨房</li><li>保存土豆：纸箱+不透光</li><li>存肉：买来肉之后按一顿的份量切块，每块分别放入保鲜膜，冷冻。</li><li>化肉：盐+白醋</li><li>磨刀：碗底，同一个方向</li></ul><h1 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h1><p><a href="https://www.zhihu.com/question/21696230" target="_blank" rel="noopener">你是明白了哪几个基本原理之后而厨艺大增的？</a></p><p><a href="http://open.163.com/newview/movie/free?pid=MD96HFRVB&mid=MDHNHOJB3" target="_blank" rel="noopener">来自专业厨师的36个无价的烹饪技巧</a></p><p><a href="http://open.163.com/newview/movie/free?pid=MD96HFRVB&mid=MDCGPFIUS" target="_blank" rel="noopener">20个你不知道的聪明的烹饪技巧</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;记不得新冠疫情开始的具体时间，只知道今年的春节（2020年1月25日），没有出去拜年，春节期间也没有出去聚餐。然后，疫情日益严重，继湖北武汉之后，各市也开始封城。&lt;br&gt;复工日期一推再推，2月15日经历了两次信息登记，三次体温检测，顺利返回北京。先去社区办理观察证，小区内隔离两周，拿到出入证，还要录入人脸识别，以便进出小区。&lt;br&gt;3月9日年后第一次上班，需要查询近期行程，测量体温，才能进入达美中心。复工后三周休两周，直到最近，才每周上班。但是，仍然不敢在外面吃饭，因为多人用餐是最容易传播新冠的途径。&lt;/p&gt;
&lt;p&gt;因此，厨道大兴！而小编不才也加入了自己做饭的行列，毕竟自己做才最放心。做的多了，自然不能只满足于能吃，而要追求好吃。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.voidking.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>使用curl访问k8s的apiserver</title>
    <link href="https://www.voidking.com/dev-curl-k8s-api-server/"/>
    <id>https://www.voidking.com/dev-curl-k8s-api-server/</id>
    <published>2020-04-15T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s管理工具"><a href="#k8s管理工具" class="headerlink" title="k8s管理工具"></a>k8s管理工具</h1><p>普通人管理k8s集群，最常用的工具是kubectl。开发界大佬管理k8s集群，go-client也是一件顺手的工具。<br>而除了kubectl和go-client，其实还可以使用curl命令。<br>本文，我们就学习一下怎样使用curl访问k8s的apiserver，实现k8s集群的管理。主要参考<a href="https://www.codercto.com/a/89468.html" target="_blank" rel="noopener">如何使用curl访问k8s的apiserver</a>。</p><a id="more"></a><h1 id="查看pod"><a href="#查看pod" class="headerlink" title="查看pod"></a>查看pod</h1><p>需求：使用curl命令，实现 kubectl get pod 同样的效果。</p><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><p>想要使用curl命令访问apiserver，首先要获得一个具有权限的token。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> secrets <span class="comment">--all-namespaces | grep admin</span></span><br><span class="line">kubectl describe secrets admin-<span class="keyword">token</span>-vmv2c -n kube-<span class="keyword">system</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Name:</span>         <span class="string">admin-token-vmv2c</span></span><br><span class="line"><span class="attr">Namespace:</span>    <span class="string">kube-system</span></span><br><span class="line"><span class="attr">Labels:</span>       <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Annotations:  kubernetes.io/service-account.name:</span> <span class="string">admin</span></span><br><span class="line">              <span class="attr">kubernetes.io/service-account.uid:</span> <span class="string">a75b4cdc-e120-11e9-8695-00163e300424</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Type:</span>  <span class="string">kubernetes.io/service-account-token</span></span><br><span class="line"></span><br><span class="line"><span class="string">Data</span></span><br><span class="line"><span class="string">====</span></span><br><span class="line"><span class="attr">ca.crt:</span>     <span class="number">1419</span> <span class="string">bytes</span></span><br><span class="line"><span class="attr">namespace:</span>  <span class="number">11</span> <span class="string">bytes</span></span><br><span class="line"><span class="attr">token:</span>      <span class="string">xxxthisisatokenxxx</span></span><br></pre></td></tr></table></figure><p>最后一个字段就是token，那么这个token有哪些权限呢？</p><h2 id="查看token权限"><a href="#查看token权限" class="headerlink" title="查看token权限"></a>查看token权限</h2><p>根据annotations中的key value，可以看到这个secrets绑定了一个service-account(sa)，name为admin。等同于这个token绑定了一个sa，name为admin。</p><p>查看admin这个service-account的信息。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> <span class="keyword">sa</span> --<span class="keyword">all</span>-namespaces | <span class="keyword">grep</span> admin</span><br><span class="line">kubectl describe <span class="keyword">sa</span> admin -n kube-<span class="built_in">system</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Name:                admin</span><br><span class="line">Namespace:           kube-<span class="built_in">system</span></span><br><span class="line">Label<span class="variable">s:</span>              <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Annotation<span class="variable">s:</span>         kubectl.kubernetes.io/<span class="keyword">last</span>-applied-configuration:</span><br><span class="line">                       &#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"kind"</span>:<span class="string">"ServiceAccount"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"name"</span>:<span class="string">"admin"</span>,<span class="string">"namespace"</span>:<span class="string">"kube-system"</span>&#125;&#125;</span><br><span class="line">Image pull secret<span class="variable">s:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Mountable secret<span class="variable">s:</span>   admin-token-vmv2c</span><br><span class="line">Token<span class="variable">s:</span>              admin-token-vmv2c</span><br><span class="line">Event<span class="variable">s:</span>              <span class="symbol">&lt;none&gt;</span></span><br></pre></td></tr></table></figure><p>没有关于admin的权限信息，那么我们再看一下admin绑定了哪些role和clusterrole。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> rolebindings --<span class="keyword">all</span>-namespaces -oyaml | <span class="keyword">grep</span> <span class="string">"name: admin"</span> -A10 -B10</span><br><span class="line">kubectl <span class="built_in">get</span> clusterrolebindings --<span class="keyword">all</span>-namespaces -oyaml | <span class="keyword">grep</span> <span class="string">"name: admin"</span> -A10 -B10</span><br></pre></td></tr></table></figure><p>找到有用信息为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"><span class="symbol">  kind:</span> ClusterRoleBinding</span><br><span class="line"><span class="symbol">  metadata:</span></span><br><span class="line"><span class="symbol">    annotations:</span></span><br><span class="line">      kubectl.kubernetes.io/last-applied-configuration: |</span><br><span class="line">        &#123;<span class="string">"apiVersion"</span>:<span class="string">"rbac.authorization.k8s.io/v1beta1"</span>,<span class="string">"kind"</span>:<span class="string">"ClusterRoleBinding"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"name"</span>:<span class="string">"admin"</span>&#125;,<span class="string">"roleRef"</span>:&#123;<span class="string">"apiGroup"</span>:<span class="string">"rbac.authorization.k8s.io"</span>,<span class="string">"kind"</span>:<span class="string">"ClusterRole"</span>,<span class="string">"name"</span>:<span class="string">"cluster-admin"</span>&#125;,<span class="string">"subjects"</span>:[&#123;<span class="string">"kind"</span>:<span class="string">"ServiceAccount"</span>,<span class="string">"name"</span>:<span class="string">"admin"</span>,<span class="string">"namespace"</span>:<span class="string">"kube-system"</span>&#125;]&#125;</span><br><span class="line"><span class="symbol">    creationTimestamp:</span> <span class="string">"2019-09-27T12:16:37Z"</span></span><br><span class="line"><span class="symbol">    name:</span> admin</span><br><span class="line"><span class="symbol">    resourceVersion:</span> <span class="string">"1317"</span></span><br><span class="line"><span class="symbol">    selfLink:</span> <span class="meta-keyword">/apis/</span>rbac.authorization.k8s.io<span class="meta-keyword">/v1/</span>clusterrolebindings/admin</span><br><span class="line"><span class="symbol">    uid:</span> a75e1ef9-e120<span class="number">-11e9</span><span class="number">-8695</span><span class="number">-00163e300424</span></span><br><span class="line"><span class="symbol">  roleRef:</span></span><br><span class="line"><span class="symbol">    apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line"><span class="symbol">    kind:</span> ClusterRole</span><br><span class="line"><span class="symbol">    name:</span> cluster-admin</span><br><span class="line"><span class="symbol">  subjects:</span></span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line"><span class="symbol">    name:</span> admin</span><br><span class="line"><span class="symbol">    namespace:</span> kube-system</span><br></pre></td></tr></table></figure><p>可知admin绑定了一个名为cluster-admin的clusterrole，接着查看cluster-admin的权限。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe clusterrole <span class="keyword">cluster</span>-<span class="keyword">admin</span> -n kube-<span class="keyword">system</span></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Name:         cluster-admin</span><br><span class="line">Labels:       kubernetes.io/<span class="attribute">bootstrapping</span>=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources  Non-Resource URLs <span class="built_in"> Resource </span>Names  Verbs</span><br><span class="line">  ---------  -----------------  --------------  -----</span><br><span class="line">  *.*        []                 []              [*]</span><br><span class="line">             [*]                []              [*]</span><br></pre></td></tr></table></figure><p>cluster-admin这个角色拥有集群的所有权限，因此admin这个sa拥有集群的所有权限。</p><h2 id="使用token"><a href="#使用token" class="headerlink" title="使用token"></a>使用token</h2><p>1、设置token和apiserver作为变量</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TOKEN=<span class="constructor">$(<span class="params">kubectl</span> <span class="params">describe</span> <span class="params">secrets</span> $(<span class="params">kubectl</span> <span class="params">get</span> <span class="params">secrets</span> -<span class="params">n</span> <span class="params">kube</span>-<span class="params">system</span> |<span class="params">grep</span> <span class="params">admin</span> |<span class="params">cut</span> -<span class="params">f1</span> -<span class="params">d</span> ' ')</span> -n kube-system <span class="pattern-match">|grep -<span class="constructor">E</span> '^token' |cut -f2 -d':'|tr -d '\t'|tr -d ' ')</span></span><br><span class="line"><span class="pattern-match"><span class="constructor">APISERVER</span>=<span class="constructor">$(<span class="params">kubectl</span> <span class="params">config</span> <span class="params">view</span> |<span class="params">grep</span> <span class="params">server</span>|<span class="params">cut</span> -<span class="params">f</span> 2- -<span class="params">d</span> <span class="string">":"</span> | <span class="params">tr</span> -<span class="params">d</span> <span class="string">" "</span>)</span></span></span><br><span class="line"><span class="pattern-match">``` </span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">2、使用token调用apiserver</span></span><br></pre></td></tr></table></figure><p>curl -H “Authorization: Bearer $TOKEN” $APISERVER/ –insecure<br>curl -H “Authorization: Bearer $TOKEN” $APISERVER/api  –insecure<br>curl -H “Authorization: Bearer $TOKEN” $APISERVER/api/v1/namespaces/default/pods/  –insecure</p><p>```</p><p>以上，查看到了default空间下的pod信息，和 kubectl get pod 基本等同。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;k8s管理工具&quot;&gt;&lt;a href=&quot;#k8s管理工具&quot; class=&quot;headerlink&quot; title=&quot;k8s管理工具&quot;&gt;&lt;/a&gt;k8s管理工具&lt;/h1&gt;&lt;p&gt;普通人管理k8s集群，最常用的工具是kubectl。开发界大佬管理k8s集群，go-client也是一件顺手的工具。&lt;br&gt;而除了kubectl和go-client，其实还可以使用curl命令。&lt;br&gt;本文，我们就学习一下怎样使用curl访问k8s的apiserver，实现k8s集群的管理。主要参考&lt;a href=&quot;https://www.codercto.com/a/89468.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何使用curl访问k8s的apiserver&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>PS绘制抛物线</title>
    <link href="https://www.voidking.com/hobby-ps-parabola/"/>
    <id>https://www.voidking.com/hobby-ps-parabola/</id>
    <published>2020-04-12T18:00:00.000Z</published>
    <updated>2020-05-31T06:00:56.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>已有一张 draw.io 绘制出的图像如下。<br><img src="http://cdn.voidking.com/@/imgs/ps-parabola/parabola.png?imageView2/0/w/250" alt=""></p><p>现在需要在小球之间绘制平抛运动的抛物线。</p><a id="more"></a><h1 id="绘制方法"><a href="#绘制方法" class="headerlink" title="绘制方法"></a>绘制方法</h1><p>1、使用PS打开原始图像，使用 ctrl+加号 放大到合适的大小。</p><p>2、菜单栏图层，新建，图层。</p><p>3、工具栏选择钢笔工具。单击上面的小球，然后单击下面的小球并按住鼠标，向下拉伸，移动调整曲线的弧度。</p><p>4、右键曲线，建立选区，确定。或者直接 ctrl+Enter ，路径变成选区。</p><p>5、菜单栏编辑，描边，确定。<br>ctrl+D 取消选区，选中图层 Enter回车 去掉钢笔笔迹。</p><p>6、图层，只显示抛物线，工具栏选择橡皮擦工具，擦除不需要的部分。</p><p>7、图层，显示所有图层，即可看到需要的抛物线。</p><p>重复上述步骤，完成另外两条抛物线，最终结果如下图。<br><img src="http://cdn.voidking.com/@/imgs/ps-parabola/parabola.jpg?imageView2/0/w/250" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;已有一张 draw.io 绘制出的图像如下。&lt;br&gt;&lt;img src=&quot;http://cdn.voidking.com/@/imgs/ps-parabola/parabola.png?imageView2/0/w/250&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在需要在小球之间绘制平抛运动的抛物线。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="ps" scheme="https://www.voidking.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>MacOS设置</title>
    <link href="https://www.voidking.com/hobby-macos-settings/"/>
    <id>https://www.voidking.com/hobby-macos-settings/</id>
    <published>2020-04-08T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:56.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户名"><a href="#用户名" class="headerlink" title="用户名"></a>用户名</h1><p>系统偏好设置，用户与群组，点按锁按钮以进行修改。右键用户，高级选项。<br>修改账户名称为vk，这个名称是shell中显示的用户名。<br>修改全名为voidking，这个名称是mac系统显示的名称。<br>个人目录，修改为 /Users/vk ，这个目录是新的home目录。</p><p>修改完成后点击“好”，系统重启，然后整个系统恢复到出厂状态。</p><a id="more"></a><h1 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h1><p>系统偏好设置，用户与群组，更改密码。</p><h1 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h1><p>系统偏好设置，触控板，光标与点按。<br>勾选 轻点来点按，勾选 辅助点按，跟踪速度调整为喜欢的速度。 </p><h1 id="电脑名称"><a href="#电脑名称" class="headerlink" title="电脑名称"></a>电脑名称</h1><p>系统偏好设置，共享，电脑名称，编辑。</p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>1、打开shell<br>command＋space，输入“terminal”。<br>或者 Launchpad，其他，终端。<br>为了方便使用，可以把终端放到Dock。</p><p>2、个性设置<br>在home目录下创建 .bash_profile 文件，内容为：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ll</span><br><span class="line">alias ll="ls -l"</span><br><span class="line"># for color</span><br><span class="line">export CLICOLOR=1</span><br><span class="line"># <span class="symbol">\h</span>:<span class="symbol">\W</span> <span class="symbol">\u</span><span class="symbol">\$</span></span><br><span class="line">export PS1='<span class="symbol">\[</span><span class="symbol">\0</span>33[01;33m<span class="symbol">\]</span><span class="symbol">\u</span>@<span class="symbol">\h</span><span class="symbol">\[</span><span class="symbol">\0</span>33[01;31m<span class="symbol">\]</span> <span class="symbol">\W</span><span class="symbol">\$</span><span class="symbol">\[</span><span class="symbol">\0</span>33[00m<span class="symbol">\]</span> '</span><br><span class="line"># grep</span><br><span class="line">alias grep='grep --color=always'</span><br></pre></td></tr></table></figure><h1 id="开机声音"><a href="#开机声音" class="headerlink" title="开机声音"></a>开机声音</h1><p>1、关闭开机声音<br><code>sudo nvram BootAudio=%00</code></p><p>2、打开开机声音<br><code>sudo nvram BootAudio=%01</code></p><h1 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h1><p>使用mac系统的Finder，可以查看“我的所有文件”，但是这是假的，点击这个选项只能看到最近使用的一些文件。</p><p>解决办法：打开Finder，command＋逗号，出现Finder偏好设置，边栏，设备中勾选硬盘。然后在侧边栏中，就可以打开硬盘，看到所有文件了。</p><p>当然， /etc 这种文件夹是看不到的。</p><h1 id="打不开软件"><a href="#打不开软件" class="headerlink" title="打不开软件"></a>打不开软件</h1><p>从网络下载的软件，安装时提示：<br>打不开“xxx”，因为它来自身份不明的开发者。</p><p>解决办法：系统偏好设置，安全性和隐私，点锁按钮以进行更改，任何来源，允许来自任何来源。</p><h1 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h1><p>sublime破解方法：</p><p>1、<code>vim /etc/hosts</code>，添加</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> www.sublimetext.com</span><br><span class="line"><span class="number">127.0.0.1</span> license.sublimehq.com</span><br></pre></td></tr></table></figure><p>2、sublime中输入license</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----- BEGIN LICENSE -----</span><br><span class="line">Member J2TeaM</span><br><span class="line">Single User License</span><br><span class="line">EA7E<span class="number">-1011316</span></span><br><span class="line">D7DA350E <span class="number">1</span>B8B0760 <span class="number">972</span>F8B60 F3E64036</span><br><span class="line">B9B4E234 F356F38F <span class="number">0</span>AD1E3B7 <span class="number">0E9</span>C5FAD</span><br><span class="line">FA0A2ABE <span class="number">25</span>F65BD8 D51458E5 <span class="number">3923</span>CE80</span><br><span class="line"><span class="number">87428428</span> <span class="number">79079</span>A01 AA69F319 A1AF29A4</span><br><span class="line">A684C2DC <span class="number">0</span>B1583D4 <span class="number">19</span>CBD290 <span class="number">217618</span>CD</span><br><span class="line"><span class="number">5653E0</span>A0 BACE3948 BB2EE45E <span class="number">422</span>D2C87</span><br><span class="line">DD9AF44B <span class="number">99</span>C49590 D2DBDEE1 <span class="number">75860</span>FD2</span><br><span class="line"><span class="number">8</span>C8BB2AD B2ECE5A4 EFC08AF2 <span class="number">25</span>A9B864</span><br><span class="line">------ END LICENSE ------</span><br></pre></td></tr></table></figure><h1 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h1><p>brew 全称<a href="http://brew.sh/index.html" target="_blank" rel="noopener">Homebrew</a>，是Mac OSX上的软件包管理工具。</p><p>安装brew：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">bin/bash </span>-c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span></span><br></pre></td></tr></table></figure><h1 id="ssh-config"><a href="#ssh-config" class="headerlink" title="ssh config"></a>ssh config</h1><p>登录远程服务器，需要<br><code>ssh username@host -p port</code><br>在记忆这些信息是很麻烦的，因此我们需要一个简单的方法。</p><p>1、创建 .ssh/config 文件，内容为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host jumpbox</span><br><span class="line">HostName jumpbox.voidking.com</span><br><span class="line">User voidking</span><br><span class="line">Port 2345</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host bastionhost</span><br><span class="line">HostName 45.68.78.134</span><br><span class="line">User root</span><br><span class="line">Port 3456</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>2、配置authorized_keys</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/beautifulcode/ssh-<span class="keyword">copy</span>-id-<span class="keyword">for</span>-OSX/master/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br><span class="line">ssh-<span class="keyword">copy</span>-id -i ~/.ssh/id_rsa.pub jumpbox</span><br><span class="line">ssh-<span class="keyword">copy</span>-id -i ~/.ssh/id_rsa.pub bastionhost</span><br></pre></td></tr></table></figure><p>3、登录服务器 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ssh</span> <span class="string">jumpbox</span></span><br><span class="line"><span class="attr">ssh</span> <span class="string">bastionhost</span></span><br></pre></td></tr></table></figure><h1 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h1><p>1、从windows系统 C:\Windows\Fonts 目录中拷贝需要的字体。<br>2、command+shift+G，输入 <code>/Library/Fonts</code>，前往。<br>3、字体放入 Fonts 目录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户名&quot;&gt;&lt;a href=&quot;#用户名&quot; class=&quot;headerlink&quot; title=&quot;用户名&quot;&gt;&lt;/a&gt;用户名&lt;/h1&gt;&lt;p&gt;系统偏好设置，用户与群组，点按锁按钮以进行修改。右键用户，高级选项。&lt;br&gt;修改账户名称为vk，这个名称是shell中显示的用户名。&lt;br&gt;修改全名为voidking，这个名称是mac系统显示的名称。&lt;br&gt;个人目录，修改为 /Users/vk ，这个目录是新的home目录。&lt;/p&gt;
&lt;p&gt;修改完成后点击“好”，系统重启，然后整个系统恢复到出厂状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
  </entry>
  
  <entry>
    <title>安装部署K8S集群的艰难之路</title>
    <link href="https://www.voidking.com/dev-install-k8s-the-hard-way/"/>
    <id>https://www.voidking.com/dev-install-k8s-the-hard-way/</id>
    <published>2020-04-01T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-kubeadm-install-k8s/">《使用kubeadm安装部署K8S集群》</a>一文中，使用kubeadm安装部署了k8s集群。但是，kubeadm的安装方式太简单了，而cka的要求不止这么简单。因此，我们还需要学习从零开始，一个一个组件安装配置k8s集群的方法，所谓k8s the hard way。</p><p>本文的目标是在virtualbox中，搭建一个k8s集群，一个master节点，一个node01节点。</p><p>主要参考<a href="https://github.com/kelseyhightower/kubernetes-the-hard-way" target="_blank" rel="noopener">kelseyhightower/kubernetes-the-hard-way</a>和<a href="https://github.com/mmumshad/kubernetes-the-hard-way" target="_blank" rel="noopener">mmumshad/kubernetes-the-hard-way</a>。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>创建两台centos7虚拟机，master节点1C2G，node01节点1C1G</li><li>配置网络，master节点IP为192.168.56.150，node01节点的IP为192.168.56.151</li><li>配置hostname，并且把两个节点的hostname添加到/etc/hosts</li><li>安装Docker，参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a></li></ul><h1 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h1><p>1、安装kubectl</p><p>2、创建CA，给每个组件生成TLS证书<br>TLS证书包括：<br>ETCD Server Certificate<br>Kubernetes API Server Certificate<br>Controller Manager Client Certificate<br>Scheduler Client Certificate</p><p>Service Account Key Pair<br>Kube Proxy Client Certificate<br>Kubelet Client Certificates<br>Admin Client Certificate</p><p>3、给每个组件生成k8s配置文件，用于访问apiserver</p><p>4、生成数据加密配置和密钥，使集群支持静态加密</p><p>5、指定CA和TLS，在master节点启动etcd</p><p>6、指定CA和TLS，在master节点启动kube-apiserver、kube-controller-manager、kube-scheduler</p><p>7、指定CA和TLS，在node01节点启动kubelet和kube-proxy</p><p>8、指定CA和TLS，生成admin用户的配置文件，使用kubectl可以访问集群</p><p>9、部署weave，使pod可以获取到IP</p><p>10、部署coredns，使svc服务名可以使用</p><p>11、Smoke Test和End-to-End Tests</p><h1 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h1><p>操作过程太长，具体还是参考前言中的两个 kubernetes-the-hard-way 文档吧。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-kubeadm-install-k8s/&quot;&gt;《使用kubeadm安装部署K8S集群》&lt;/a&gt;一文中，使用kubeadm安装部署了k8s集群。但是，kubeadm的安装方式太简单了，而cka的要求不止这么简单。因此，我们还需要学习从零开始，一个一个组件安装配置k8s集群的方法，所谓k8s the hard way。&lt;/p&gt;
&lt;p&gt;本文的目标是在virtualbox中，搭建一个k8s集群，一个master节点，一个node01节点。&lt;/p&gt;
&lt;p&gt;主要参考&lt;a href=&quot;https://github.com/kelseyhightower/kubernetes-the-hard-way&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kelseyhightower/kubernetes-the-hard-way&lt;/a&gt;和&lt;a href=&quot;https://github.com/mmumshad/kubernetes-the-hard-way&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mmumshad/kubernetes-the-hard-way&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL入门篇</title>
    <link href="https://www.voidking.com/dev-postgresql-start/"/>
    <id>https://www.voidking.com/dev-postgresql-start/</id>
    <published>2020-03-30T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:56.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostgreSQL简介"><a href="#PostgreSQL简介" class="headerlink" title="PostgreSQL简介"></a>PostgreSQL简介</h1><blockquote><p>PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.</p></blockquote><p>更多内容参考<a href="https://www.postgresql.org/" target="_blank" rel="noopener">PostgreSQL官网</a>和<a href="https://www.postgresql.org/docs/" target="_blank" rel="noopener">PostgreSQL Documentation</a>。</p><p>Harbor中使用的数据库就是PostgreSQL，因此本文对PostgreSQL（pg）进行一个简单的学习，主要参考<a href="https://www.runoob.com/postgresql/postgresql-tutorial.html" target="_blank" rel="noopener">PostgreSQL 菜鸟教程</a>。</p><a id="more"></a><h1 id="Harbor中的pg"><a href="#Harbor中的pg" class="headerlink" title="Harbor中的pg"></a>Harbor中的pg</h1><p>1、进入pg容器<br><code>docker exec -it harbor-db /bin/bash</code></p><p>2、登录pg<br><code>psql -U postgres -h postgresql -p 5432</code><br>默认密码为 root123 ，实际密码查看harbor.yml中的配置。</p><p>3、查看帮助</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\<span class="keyword">help</span></span><br><span class="line">\<span class="keyword">help</span> <span class="keyword">select</span></span><br></pre></td></tr></table></figure><p>4、查看数据库，切换数据库，查看表</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\l</span></span><br><span class="line"><span class="string">\c</span> registry;</span><br><span class="line"><span class="string">\d</span></span><br><span class="line"><span class="string">\dt</span></span><br></pre></td></tr></table></figure><p>5、查看表结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\d registry<span class="comment">;</span></span><br><span class="line">\d replication_policy<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>6、查看表数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> registry;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> replication_policy;</span><br></pre></td></tr></table></figure><p>可以看到，查看表数据的方法和mysql完全相同。<br>实际上，pg支持标准的sql语法，因此增删查改的语法参考<a href="https://www.voidking.com/dev-mysql-command/">《MySQL常用命令》</a>即可。</p><h1 id="安装pg"><a href="#安装pg" class="headerlink" title="安装pg"></a>安装pg</h1><p>如果单独使用pg，该怎样安装？下面学习使用docker安装pg的方法。</p><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/_/postgres" target="_blank" rel="noopener">pg版本</a>。</p><p>2、下载pg镜像（以pg12.2为例）<br><code>docker pull postgres:12.2</code></p><p>3、启动pg服务</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-pg -d \</span><br><span class="line">-<span class="ruby">p <span class="number">5432</span><span class="symbol">:</span><span class="number">5432</span> \</span></span><br><span class="line"><span class="ruby">-e POSTGRES_PASSWORD=voidking \</span></span><br><span class="line"><span class="ruby">-e PGDATA=<span class="regexp">/var/lib</span><span class="regexp">/postgresql/data</span><span class="regexp">/pgdata \</span></span></span><br><span class="line"><span class="ruby">-v /opt/postgresql/<span class="symbol">data:</span>/var/lib/postgresql/data \</span></span><br><span class="line"><span class="ruby"><span class="symbol">postgres:</span><span class="number">12.2</span></span></span><br></pre></td></tr></table></figure><p>以上命令：</p><ul><li>命名容器为vk-pg，后台运行</li><li>映射宿主机5432端口到容器5432端口</li><li>设置pg数据库密码和数据存放目录</li><li>映射宿主机/opt/postgresql/data目录（不需要提前创建目录）到容器/var/lib/postgresql/data目录</li></ul><p>更高级的启动命令参考<a href="https://hub.docker.com/_/postgres?tab=description" target="_blank" rel="noopener">How to use this image</a>。</p><p>4、验证安装<br><code>docker ps</code><br>gp启动正常的话就可以看到vk-pg容器。<br>如果启动失败，可以使用<code>docker logs vk-pg</code>查看失败原因并进行解决。</p><p>使用nc命令验证：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install nc</span></span><br><span class="line"><span class="attr">nc</span> <span class="string">-v localhost 5432</span></span><br></pre></td></tr></table></figure><p>5、登录pg</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it vk-pg /bin/bash</span></span><br><span class="line"><span class="attr">psql</span> <span class="string">-U postgres</span></span><br><span class="line"><span class="attr">psql</span> <span class="string">-U postgres -h localhost -p 5432</span></span><br></pre></td></tr></table></figure><p>啊嘞，直接登录进去了，不需要密码？<br>这是因为，pg镜像在本地设置了信任身份验证，因此从容器内连接时不需要密码。</p><p>但是，如果从其他主机/容器进行连接，则需要输入密码。<br>比如在宿主机（系统为centos7）上登录pg：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">list | grep postgresql</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">install postgresql.x86_64</span></span><br><span class="line"><span class="attr">psql</span> <span class="string">-U postgres -h localhost -p 5432</span></span><br></pre></td></tr></table></figure><p>这次必须输入正确的密码才能登录。</p><p>以上，pg安装配置完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PostgreSQL简介&quot;&gt;&lt;a href=&quot;#PostgreSQL简介&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL简介&quot;&gt;&lt;/a&gt;PostgreSQL简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://www.postgresql.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PostgreSQL官网&lt;/a&gt;和&lt;a href=&quot;https://www.postgresql.org/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PostgreSQL Documentation&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Harbor中使用的数据库就是PostgreSQL，因此本文对PostgreSQL（pg）进行一个简单的学习，主要参考&lt;a href=&quot;https://www.runoob.com/postgresql/postgresql-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PostgreSQL 菜鸟教程&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="数据库" scheme="https://www.voidking.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Harbor入门篇</title>
    <link href="https://www.voidking.com/dev-harbor-start/"/>
    <id>https://www.voidking.com/dev-harbor-start/</id>
    <published>2020-03-22T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Harbor简介"><a href="#Harbor简介" class="headerlink" title="Harbor简介"></a>Harbor简介</h1><blockquote><p>Harbor is an open source container image registry that secures images with role-based access control, scans images for vulnerabilities, and signs images as trusted. As a CNCF Incubating project, Harbor delivers compliance, performance, and interoperability to help you consistently and securely manage images across cloud native compute platforms like Kubernetes and Docker.</p></blockquote><p>更多内容参考<a href="https://goharbor.io/" target="_blank" rel="noopener">Harbor官网</a>。</p><a id="more"></a><h1 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>参考<a href="https://goharbor.io/docs/1.10/install-config/installation-prereqs/" target="_blank" rel="noopener">Harbor Installation Prerequisites</a></p><p>1、硬件需求<br>硬件最小需求：2C4G40G。<br>硬件推荐需求：4C8G160G。</p><p>2、软件需求<br>Docker engine，Version 17.06.0-ce+ or higher<br>Docker Compose，Version 1.18.0 or higher<br>Openssl，Latest is preferred</p><p>3、网络端口<br>444、4443和80</p><h2 id="下载安装Harbor"><a href="#下载安装Harbor" class="headerlink" title="下载安装Harbor"></a>下载安装Harbor</h2><p>1、访问<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">Harbor releases page</a>，下载需要的harbor版本，这里选择下载 harbor-offline-installer-v1.10.1.tgz</p><p>或者使用curl命令下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -C - -O -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/goharbor/</span>harbor<span class="regexp">/releases/</span>download<span class="regexp">/v1.10.1/</span>harbor-offline-installer-v1.<span class="number">10.1</span>.tgz</span><br></pre></td></tr></table></figure><p>2、解压</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xzvf</span> <span class="selector-tag">harbor-offline-installer-v1</span><span class="selector-class">.10</span><span class="selector-class">.1</span><span class="selector-class">.tgz</span></span><br><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">harbor</span></span><br></pre></td></tr></table></figure><p>3、配置harbor.yml<br>安装前修改harbor.yaml，参考<a href="https://goharbor.io/docs/1.10/install-config/configure-yml-file/" target="_blank" rel="noopener">Configure the Harbor YML File</a>，按需要修改如下几个字段：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: harbor.voidking.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line">http:</span><br><span class="line">  #<span class="built_in"> port </span><span class="keyword">for</span> http,<span class="built_in"> default </span>is 80. <span class="keyword">If</span> https enabled, this<span class="built_in"> port </span>will redirect <span class="keyword">to</span> https port</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># https related config</span></span><br><span class="line"><span class="comment"># https:</span></span><br><span class="line">  # https<span class="built_in"> port </span><span class="keyword">for</span> harbor,<span class="built_in"> default </span>is 443</span><br><span class="line">  #port: 443</span><br><span class="line">  # The path of cert <span class="keyword">and</span> key files <span class="keyword">for</span> nginx</span><br><span class="line">  #certificate: /your/certificate/path</span><br><span class="line">  #private_key: /your/private/key/path</span><br><span class="line"></span><br><span class="line"><span class="comment"># The initial password of Harbor admin</span></span><br><span class="line"><span class="comment"># It only works in first time to install harbor</span></span><br><span class="line"><span class="comment"># Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"></span><br><span class="line"><span class="comment"># The default data volume</span></span><br><span class="line">data_volume: /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Harbor DB configuration</span></span><br><span class="line">database:</span><br><span class="line">  # The password <span class="keyword">for</span> the root<span class="built_in"> user </span>of Harbor DB. Change this before any production use.</span><br><span class="line">  password: root123</span><br><span class="line">  # The maximum number of connections <span class="keyword">in</span> the idle<span class="built_in"> connection </span>pool. <span class="keyword">If</span> it &lt;=0, <span class="literal">no</span> idle connections are retained.</span><br><span class="line">  max_idle_conns: 50</span><br><span class="line">  # The maximum number of open connections <span class="keyword">to</span> the database. <span class="keyword">If</span> it &lt;= 0, then there is <span class="literal">no</span> limit on the number of open connections.</span><br><span class="line">  # Note: the<span class="built_in"> default </span>number of connections is 100 <span class="keyword">for</span> postgres.</span><br><span class="line">  max_open_conns: 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log configurations</span></span><br><span class="line">log:</span><br><span class="line">  # options are debug, info, warning, error, fatal</span><br><span class="line">  level: info</span><br><span class="line">  # configs <span class="keyword">for</span> logs <span class="keyword">in</span> local storage</span><br><span class="line">  local:</span><br><span class="line">    # Log files are rotated log_rotate_count times before being removed. <span class="keyword">If</span> count is 0, old versions are removed rather than rotated.</span><br><span class="line">    rotate_count: 50</span><br><span class="line">    # Log files are rotated only <span class="keyword">if</span> they grow bigger than log_rotate_size bytes. <span class="keyword">If</span> size is followed by k, the size is assumed <span class="keyword">to</span> be <span class="keyword">in</span> kilobytes.</span><br><span class="line">    # <span class="keyword">If</span> the M is used, the size is <span class="keyword">in</span> megabytes, <span class="keyword">and</span> <span class="keyword">if</span> G is used, the size is <span class="keyword">in</span> gigabytes. So size 100, size 100k, size 100M <span class="keyword">and</span> size 100G</span><br><span class="line">    # are all valid.</span><br><span class="line">    rotate_size: 200M</span><br><span class="line">    # The directory on your host that store log</span><br><span class="line">    location: /var/log/harbor</span><br></pre></td></tr></table></figure><p>4、执行安装<br><code>./install.sh</code><br><img src="http://cdn.voidking.com/@/imgs/harbor-start/install.jpg?imageView2/0/w/700" alt=""><br>如果安装完成发现配置错误，可以修改配置后再次执行脚本。<br>如果报错 ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule ，那么重启docker后再次执行脚本。</p><p>至此，harbor安装完成，没有配置https。</p><h1 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h1><h2 id="浏览器验证"><a href="#浏览器验证" class="headerlink" title="浏览器验证"></a>浏览器验证</h2><p>浏览器访问 <a href="http://192.168.56.200" target="_blank" rel="noopener">http://192.168.56.200</a> ，可以看到harbor登录页面。<br>输入用户名密码，admin和Harbor12345，登录harbor控制台。<br><img src="http://cdn.voidking.com/@/imgs/harbor-start/login.jpg?imageView2/0/w/700" alt=""></p><h2 id="命令行验证"><a href="#命令行验证" class="headerlink" title="命令行验证"></a>命令行验证</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker login <span class="number">192.168</span><span class="number">.56</span><span class="number">.200</span></span><br></pre></td></tr></table></figure><p>输入用户名密码，admin和Harbor12345，登录报错：<br>Error response from daemon: Get <a href="https://192.168.56.200/v2/" target="_blank" rel="noopener">https://192.168.56.200/v2/</a>: dial tcp 192.168.56.200:443: connect: connection refused。</p><p>这是因为，docker1.3.x之后与registry交互，默认使用https协议。<br>修改/etc/docker/daemon.json，添加insecure-registries参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://mirror.ccs.tencentyun.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"http://192.168.56.200"</span>,</span><br><span class="line">    <span class="string">"http://harbor.voidking.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启docker：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker</span></span><br></pre></td></tr></table></figure><p>重新登录，成功。<br><img src="http://cdn.voidking.com/@/imgs/harbor-start/login2.jpg?imageView2/0/w/500" alt=""></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h2><p>1、停止<br><code>docker-compose down -v</code></p><p>2、修改配置<br>修改harbor.yml后，执行<code>./prepare</code></p><p>3、启动<br><code>docker-compose up -d</code></p><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull busybox:<span class="number">1.31</span></span><br><span class="line">docker tag busybox:<span class="number">1.31</span> harbor.<span class="built_in">void</span>king.com/<span class="built_in">void</span>king/busybox:<span class="number">1.31</span></span><br><span class="line">docker tag busybox:<span class="number">1.31</span> harbor.<span class="built_in">void</span>king.com/<span class="built_in">void</span>king/subpath/busybox:<span class="number">1.31</span></span><br><span class="line">docker push harbor.<span class="built_in">void</span>king.com/<span class="built_in">void</span>king/busybox:<span class="number">1.31</span></span><br></pre></td></tr></table></figure><p>报错：<br>The push refers to repository [harbor.voidking.com/voidking/busybox]<br>a6d503001157: Preparing<br>denied: requested access to the resource is denied</p><p>这是因为，需要先创建项目。在web控制台创建项目 voidking，再次上传，成功。带有subpath的镜像，同样可以上传成功。</p><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull harbor.<span class="built_in">void</span>king.com/<span class="built_in">void</span>king/busybox:<span class="number">1.31</span></span><br></pre></td></tr></table></figure><h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h1><p>如果搭建高可用harbor，比如搭建两个实例的harbor，那么需要XSRFKey保持一致，在 common/config/core/app.conf 中配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Harbor简介&quot;&gt;&lt;a href=&quot;#Harbor简介&quot; class=&quot;headerlink&quot; title=&quot;Harbor简介&quot;&gt;&lt;/a&gt;Harbor简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Harbor is an open source container image registry that secures images with role-based access control, scans images for vulnerabilities, and signs images as trusted. As a CNCF Incubating project, Harbor delivers compliance, performance, and interoperability to help you consistently and securely manage images across cloud native compute platforms like Kubernetes and Docker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://goharbor.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Harbor官网&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>K8S中的RBAC鉴权</title>
    <link href="https://www.voidking.com/dev-k8s-rbac-auth/"/>
    <id>https://www.voidking.com/dev-k8s-rbac-auth/</id>
    <published>2020-03-20T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RBAC-Authorization"><a href="#RBAC-Authorization" class="headerlink" title="RBAC Authorization"></a>RBAC Authorization</h1><blockquote><p>Role-based access control (RBAC) is a method of regulating access to computer or network resources based on the roles of individual users within your organization.</p></blockquote><p>更多内容，参考<a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/" target="_blank" rel="noopener">Using RBAC Authorization</a>。</p><p><a href="https://www.voidking.com/dev-ssl-tls/">《SSL和TLS》</a>文中，通过API签名一节，创建了新用户jane，并且给该用户的证书进行签名。现在我们有了jane.crt和jane.key，本文中会配置jane拥有一些k8s集群的管理权限。</p><a id="more"></a><h1 id="角色和绑定"><a href="#角色和绑定" class="headerlink" title="角色和绑定"></a>角色和绑定</h1><p>首先，给用户jane配置权限，使其能够创建和查看default空间下的pods。</p><h2 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h2><p>1、创建角色</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create <span class="keyword">role</span> <span class="title">--help</span></span><br><span class="line">kubectl create <span class="keyword">role</span> <span class="title">developer</span> --<span class="attr">resource=</span>pods --<span class="attr">verb=</span>list,create</span><br></pre></td></tr></table></figure><p>2、角色绑定</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> rolebinding dev-<span class="keyword">user</span>-binding --<span class="keyword">role</span>=developer --<span class="keyword">user</span>=jane</span><br></pre></td></tr></table></figure><p>3、验证权限</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl auth can-i <span class="built_in">list</span> pods <span class="comment">--as jane</span></span><br><span class="line">kubectl <span class="keyword">get</span> pods <span class="comment">--as jane</span></span><br></pre></td></tr></table></figure><p>至此，用户jane的权限配置完成。</p><h2 id="manifest实现"><a href="#manifest实现" class="headerlink" title="manifest实现"></a>manifest实现</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">developer</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">  <span class="attr">resources:</span> <span class="string">["pods"]</span></span><br><span class="line">  <span class="attr">verbs:</span> <span class="string">["list",</span> <span class="string">"create"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind: RoleBindingapiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dev-user-binding</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jane</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">developer</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.iomaster</span></span><br></pre></td></tr></table></figure><h1 id="集群角色和绑定"><a href="#集群角色和绑定" class="headerlink" title="集群角色和绑定"></a>集群角色和绑定</h1><p>以上，给jane授权，是在namespace范围内的。当我们想给jane授权cluster范围的权限时，就需要clusterroles。</p><p>比如，我们想给jane授权node相关的权限，可以如下实现。</p><h2 id="命令实现-1"><a href="#命令实现-1" class="headerlink" title="命令实现"></a>命令实现</h2><p>1、创建集群角色</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrole <span class="keyword">node</span><span class="title">-reader</span> --<span class="attr">verb=</span>get,list,watch --<span class="attr">resource=</span>nodes</span><br></pre></td></tr></table></figure><p>2、绑定集群角色</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding <span class="keyword">node</span><span class="title">-reader-binding</span> --<span class="attr">user=</span>jane --<span class="attr">clusterrole=</span><span class="keyword">node</span><span class="title">-reader</span></span><br></pre></td></tr></table></figure><h2 id="manifest实现-1"><a href="#manifest实现-1" class="headerlink" title="manifest实现"></a>manifest实现</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-reader</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-reader-binding</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-reader</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jane</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果使用clusterrole指定的资源是pods这种namespace级别的资源，该集群角色绑定给jane后会有什么效果？<br>答：jane对所有namespace中的pods资源拥有clusterrole中定义的操作权限。</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>用户jane已经拥有了需要的权限，该怎样访问k8s集群呢？答案是通过kubeconfig文件。</p><h2 id="kubeconfig"><a href="#kubeconfig" class="headerlink" title="kubeconfig"></a>kubeconfig</h2><p>1、查看配置<br><code>kubectl config view</code><br>记录当前的server地址。</p><p>2、保存ca.crt</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat .kube<span class="built_in">/config </span>| grep certificate-authority-data | awk <span class="string">'&#123;print $2&#125;'</span> | base64 --decode &gt; ca.crt</span><br></pre></td></tr></table></figure><h2 id="jane-kubeconfig"><a href="#jane-kubeconfig" class="headerlink" title="jane.kubeconfig"></a>jane.kubeconfig</h2><p>1、设置集群参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> config </span>set-cluster kubernetes \</span><br><span class="line"><span class="attribute">--server</span>=<span class="string">"https://172.17.0.69:6443"</span> \</span><br><span class="line"><span class="attribute">--certificate-authority</span>=/root/ca.crt \</span><br><span class="line"><span class="attribute">--embed-certs</span>=<span class="literal">true</span> \</span><br><span class="line"><span class="attribute">--kubeconfig</span>=jane.kubeconfig</span><br></pre></td></tr></table></figure><p>当前目录生成jane.kubeconfig文件。</p><p>2、设置客户端认证参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> config </span>set-credentials jane \</span><br><span class="line"><span class="attribute">--client-certificate</span>=/root/jane.crt \</span><br><span class="line"><span class="attribute">--client-key</span>=/root/jane.key \</span><br><span class="line"><span class="attribute">--embed-certs</span>=<span class="literal">true</span> \</span><br><span class="line"><span class="attribute">--kubeconfig</span>=jane.kubeconfig</span><br></pre></td></tr></table></figure><p>3、设置上下文参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> config </span>set-context jane@kubernetes \</span><br><span class="line"><span class="attribute">--cluster</span>=kubernetes \</span><br><span class="line"><span class="attribute">--user</span>=jane \</span><br><span class="line"><span class="attribute">--namespace</span>=default \</span><br><span class="line"><span class="attribute">--kubeconfig</span>=jane.kubeconfig</span><br></pre></td></tr></table></figure><p>4、查看配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat jane.kubeconfig</span><br><span class="line">kubectl<span class="built_in"> config </span>view --kubeconfig jane.kubeconfig</span><br></pre></td></tr></table></figure><p>5、设置默认上下文</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">KUBECONFIG</span>=/root/jane.kubeconfig</span><br><span class="line">kubectl<span class="built_in"> config </span>use-context jane@kubernetes <span class="attribute">--kubeconfig</span>=jane.kubeconfig</span><br></pre></td></tr></table></figure><p>6、权限测试<br><code>kubectl get pods</code><br>如果没有配置权限，会输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Forbidden): pods is forbidden:<span class="built_in"> User </span><span class="string">"jane"</span> cannot list<span class="built_in"> resource </span><span class="string">"pods"</span> <span class="keyword">in</span> API<span class="built_in"> group </span><span class="string">""</span> <span class="keyword">in</span> the namespace <span class="string">"default"</span></span><br></pre></td></tr></table></figure><p>如果配置好了权限，会输出pod相关信息。</p><p>但是，以上权限测试只是在minikube或者<a href="https://www.katacoda.com/courses/kubernetes/playground" target="_blank" rel="noopener">katacoda</a>平台生效。<br>如果使用<a href="https://kodekloud.com/courses/enrolled/675080" target="_blank" rel="noopener">kodekloud</a>或者阿里云k8s集群，会报错：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: You must be logged <span class="keyword">in</span> <span class="keyword">to</span> the<span class="built_in"> server </span>(Unauthorized)</span><br></pre></td></tr></table></figure><p>研究了四个多小时，才发现是平台的问题，服气了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RBAC-Authorization&quot;&gt;&lt;a href=&quot;#RBAC-Authorization&quot; class=&quot;headerlink&quot; title=&quot;RBAC Authorization&quot;&gt;&lt;/a&gt;RBAC Authorization&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Role-based access control (RBAC) is a method of regulating access to computer or network resources based on the roles of individual users within your organization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Using RBAC Authorization&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-ssl-tls/&quot;&gt;《SSL和TLS》&lt;/a&gt;文中，通过API签名一节，创建了新用户jane，并且给该用户的证书进行签名。现在我们有了jane.crt和jane.key，本文中会配置jane拥有一些k8s集群的管理权限。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>JSONPath</title>
    <link href="https://www.voidking.com/dev-jsonpath/"/>
    <id>https://www.voidking.com/dev-jsonpath/</id>
    <published>2020-03-18T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSONPath简介"><a href="#JSONPath简介" class="headerlink" title="JSONPath简介"></a>JSONPath简介</h1><blockquote><p>JSON (JavaScript Object Notation) allows for easy interchange of data, often between a program and a database.<br>JSONPath is a query language for JSON, similar to XPath for XML. </p></blockquote><p>如上，json是一种常用的数据格式，jsonpath是json的查询语言，类似于XPath和SQL。</p><a id="more"></a><h1 id="JSONPath语法"><a href="#JSONPath语法" class="headerlink" title="JSONPath语法"></a>JSONPath语法</h1><p>摘自 <a href="https://github.com/json-path/JsonPath" target="_blank" rel="noopener">json-path/JsonPath</a></p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>$</code></td><td align="left">The root element to query. This starts all path expressions.</td></tr><tr><td align="left"><code>@</code></td><td align="left">The current node being processed by a filter predicate.</td></tr><tr><td align="left"><code>*</code></td><td align="left">Wildcard. Available anywhere a name or numeric are required.</td></tr><tr><td align="left"><code>..</code></td><td align="left">Deep scan. Available anywhere a name is required.</td></tr><tr><td align="left"><code>.&lt;name&gt;</code></td><td align="left">Dot-notated child</td></tr><tr><td align="left"><code>[&#39;&lt;name&gt;&#39; (, &#39;&lt;name&gt;&#39;)]</code></td><td align="left">Bracket-notated child or children</td></tr><tr><td align="left"><code>[&lt;number&gt; (, &lt;number&gt;)]</code></td><td align="left">Array index or indexes</td></tr><tr><td align="left"><code>[start:end]</code></td><td align="left">Array slice operator</td></tr><tr><td align="left"><code>[?(&lt;expression&gt;)]</code></td><td align="left">Filter expression. Expression must evaluate to a boolean value.</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Functions can be invoked at the tail end of a path - the input to a function is the output of the path expression.<br>The function output is dictated by the function itself.</p><table><thead><tr><th align="left">Function</th><th align="left">Description</th><th>Output</th></tr></thead><tbody><tr><td align="left">min()</td><td align="left">Provides the min value of an array of numbers</td><td>Double</td></tr><tr><td align="left">max()</td><td align="left">Provides the max value of an array of numbers</td><td>Double</td></tr><tr><td align="left">avg()</td><td align="left">Provides the average value of an array of numbers</td><td>Double</td></tr><tr><td align="left">stddev()</td><td align="left">Provides the standard deviation value of an array of numbers</td><td>Double</td></tr><tr><td align="left">length()</td><td align="left">Provides the length of an array</td><td>Integer</td></tr><tr><td align="left">sum()</td><td align="left">Provides the sum value of an array of numbers</td><td>Double</td></tr></tbody></table><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>Filters are logical expressions used to filter arrays. A typical filter would be <code>[?(@.age &gt; 18)]</code> where <code>@</code> represents the current item being processed. More complex filters can be created with logical operators <code>&amp;&amp;</code> and <code>||</code>. String literals must be enclosed by single or double quotes (<code>[?(@.color == &#39;blue&#39;)]</code> or <code>[?(@.color == &quot;blue&quot;)]</code>).   </p><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">left is equal to right (note that 1 is not equal to ‘1’)</td></tr><tr><td align="left">!=</td><td align="left">left is not equal to right</td></tr><tr><td align="left">&lt;</td><td align="left">left is less than right</td></tr><tr><td align="left">&lt;=</td><td align="left">left is less or equal to right</td></tr><tr><td align="left">&gt;</td><td align="left">left is greater than right</td></tr><tr><td align="left">&gt;=</td><td align="left">left is greater than or equal to right</td></tr><tr><td align="left">=~</td><td align="left">left matches regular expression  [?(@.name =~ /foo.*?/i)]</td></tr><tr><td align="left">in</td><td align="left">left exists in right [?(@.size in [‘S’, ‘M’])]</td></tr><tr><td align="left">nin</td><td align="left">left does not exists in right</td></tr><tr><td align="left">subsetof</td><td align="left">left is a subset of right [?(@.sizes subsetof [‘S’, ‘M’, ‘L’])]</td></tr><tr><td align="left">anyof</td><td align="left">left has an intersection with right [?(@.sizes anyof [‘M’, ‘L’])]</td></tr><tr><td align="left">noneof</td><td align="left">left has no intersection with right [?(@.sizes noneof [‘M’, ‘L’])]</td></tr><tr><td align="left">size</td><td align="left">size of left (array or string) should match right</td></tr><tr><td align="left">empty</td><td align="left">left (array or string) should be empty</td></tr></tbody></table><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>Given the json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"store"</span>: &#123;</span><br><span class="line">        <span class="string">"book"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"category"</span>: <span class="string">"reference"</span>,</span><br><span class="line">                <span class="string">"author"</span>: <span class="string">"Nigel Rees"</span>,</span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"Sayings of the Century"</span>,</span><br><span class="line">                <span class="string">"price"</span>: <span class="number">8.95</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"category"</span>: <span class="string">"fiction"</span>,</span><br><span class="line">                <span class="string">"author"</span>: <span class="string">"Evelyn Waugh"</span>,</span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"Sword of Honour"</span>,</span><br><span class="line">                <span class="string">"price"</span>: <span class="number">12.99</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"category"</span>: <span class="string">"fiction"</span>,</span><br><span class="line">                <span class="string">"author"</span>: <span class="string">"Herman Melville"</span>,</span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"Moby Dick"</span>,</span><br><span class="line">                <span class="string">"isbn"</span>: <span class="string">"0-553-21311-3"</span>,</span><br><span class="line">                <span class="string">"price"</span>: <span class="number">8.99</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"category"</span>: <span class="string">"fiction"</span>,</span><br><span class="line">                <span class="string">"author"</span>: <span class="string">"J. R. R. Tolkien"</span>,</span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"The Lord of the Rings"</span>,</span><br><span class="line">                <span class="string">"isbn"</span>: <span class="string">"0-395-19395-8"</span>,</span><br><span class="line">                <span class="string">"price"</span>: <span class="number">22.99</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"bicycle"</span>: &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"red"</span>,</span><br><span class="line">            <span class="string">"price"</span>: <span class="number">19.95</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"expensive"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">JsonPath (click link to try)</th><th align="left">Result</th></tr></thead><tbody><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$.store.book[*].author" target="_blank">$.store.book[*].author</a></td><td align="left">The authors of all books</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..author" target="_blank">$..author</a></td><td align="left">All authors</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$.store.*" target="_blank">$.store.*</a></td><td align="left">All things, both books and bicycles</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$.store..price" target="_blank">$.store..price</a></td><td align="left">The price of everything</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[2]" target="_blank">$..book[2]</a></td><td align="left">The third book</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[2]" target="_blank">$..book[-2]</a></td><td align="left">The second to last book</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[0,1]" target="_blank">$..book[0,1]</a></td><td align="left">The first two books</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[:2]" target="_blank">$..book[:2]</a></td><td align="left">All books from index 0 (inclusive) until index 2 (exclusive)</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[1:2]" target="_blank">$..book[1:2]</a></td><td align="left">All books from index 1 (inclusive) until index 2 (exclusive)</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[-2:]" target="_blank">$..book[-2:]</a></td><td align="left">Last two books</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[2:]" target="_blank">$..book[2:]</a></td><td align="left">Book number two from tail</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.isbn)]" target="_blank">$..book[?(@.isbn)]</a></td><td align="left">All books with an ISBN number</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$.store.book[?(@.price < 10)]" target="_blank">$.store.book[?(@.price &lt; 10)]</a></td><td align="left">All books in store cheaper than 10</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.price <= $['expensive'])]" target="_blank">$..book[?(@.price &lt;= $[‘expensive’])]</a></td><td align="left">All books in store that are not “expensive”</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.author =~ /.*REES/i)]" target="_blank">$..book[?(@.author =~ /.*REES/i)]</a></td><td align="left">All books matching regex (ignore case)</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..*" target="_blank">$..*</a></td><td align="left">Give me every thing</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book.length()" target="_blank">$..book.length()</a></td><td align="left">The number of books</td></tr></tbody></table><h1 id="在线测试"><a href="#在线测试" class="headerlink" title="在线测试"></a>在线测试</h1><p><a href="https://jsonpath.com/" target="_blank" rel="noopener">JSONPath Online Evaluator</a></p><h1 id="kubectl-JSONPath"><a href="#kubectl-JSONPath" class="headerlink" title="kubectl + JSONPath"></a>kubectl + JSONPath</h1><p>kubelet支持JSONPath，具体参考<a href="https://kubernetes.io/zh/docs/reference/kubectl/jsonpath/" target="_blank" rel="noopener">JSONPath 支持</a>。<br>除了标准jsonpath语法外,kubernetes jsonpath模板还额外支持以下语法:</p><ul><li>用””双引号来引用JSONPath表达式中的文本</li><li>使用range和end来遍历集合</li><li>使用负数来从尾部索引集合</li></ul><p>查看node的cpu信息：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes -o=jsonpath='&#123;<span class="string">.items</span>[*]<span class="string">.metadata.name</span>&#125;'</span><br><span class="line">kubectl get nodes -o=jsonpath='&#123;<span class="string">.items</span>[*]<span class="string">.status.capacity.cpu</span>&#125;'</span><br><span class="line">kubectl get nodes -o=jsonpath='&#123;<span class="string">.items</span>[*]<span class="string">.metadata.name</span>&#125;&#123;<span class="string">.items</span>[*]<span class="string">.status.capacity.cpu</span>&#125;'</span><br><span class="line">kubectl get nodes -o=jsonpath='&#123;<span class="string">.items</span>[*]<span class="string">.metadata.name</span>&#125;&#123;<span class="string">"\n"</span>&#125;&#123;<span class="string">.items</span>[*]<span class="string">.status.capacity.cpu</span>&#125;'</span><br><span class="line">kubectl get nodes -o=jsonpath='&#123;range <span class="string">.items</span>[*]&#125;&#123;<span class="string">.metadata.name</span>&#125;&#123;<span class="string">"\t"</span>&#125;&#123;<span class="string">.status.capacity.cpu</span>&#125;&#123;end&#125;'</span><br><span class="line">kubectl get nodes -o=custom-columns=NODE<span class="function">:.metadata.name</span>,CPU<span class="function">:.status.capacity.cpu</span></span><br><span class="line">kubectl get nodes <span class="params">--sort-by=</span><span class="string">.metadata.name</span></span><br><span class="line">kubectl get nodes <span class="params">--sort-by=</span><span class="string">.status.capacity.cpu</span></span><br></pre></td></tr></table></figure><h1 id="json2yaml"><a href="#json2yaml" class="headerlink" title="json2yaml"></a>json2yaml</h1><p>json和yaml可以相互转化，这里推荐一个在线工具<a href="https://www.json2yaml.com/" target="_blank" rel="noopener">JSON to YAML</a>。</p><p>如果有python3环境，还可以使用python-json2yaml工具。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pip</span> <span class="string">install PyYAML==5.1</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">install python-json2yaml</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">a.json | json2yaml &gt; a.yaml</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">a.yaml | yaml2json</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSONPath简介&quot;&gt;&lt;a href=&quot;#JSONPath简介&quot; class=&quot;headerlink&quot; title=&quot;JSONPath简介&quot;&gt;&lt;/a&gt;JSONPath简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JSON (JavaScript Object Notation) allows for easy interchange of data, often between a program and a database.&lt;br&gt;JSONPath is a query language for JSON, similar to XPath for XML. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如上，json是一种常用的数据格式，jsonpath是json的查询语言，类似于XPath和SQL。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="json" scheme="https://www.voidking.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeadm安装部署K8S集群</title>
    <link href="https://www.voidking.com/dev-kubeadm-install-k8s/"/>
    <id>https://www.voidking.com/dev-kubeadm-install-k8s/</id>
    <published>2020-03-16T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubeadm简介"><a href="#kubeadm简介" class="headerlink" title="kubeadm简介"></a>kubeadm简介</h1><p><a href="https://www.voidking.com/dev-kubeadm-upgrade/">《使用kubeadm升级K8S集群》</a>一文中，了解了k8s集群中常见组件，并且使用kubeadm对k8s集群进行了升级。本文中，会学习使用kubeadm安装部署k8s集群。</p><blockquote><p>Kubeadm is a tool built to provide kubeadm init and kubeadm join as best-practice “fast paths” for creating Kubernetes clusters.</p></blockquote><p>更多内容，参考<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">Overview of kubeadm</a>和<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">Installing kubeadm</a>。</p><a id="more"></a><h1 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h1><p>目标：搭建一个k8s集群，包括master和node01两个节点，节点系统为ubuntu16.04.2。</p><p>1、环境准备。</p><p>2、在两个节点上安装kubeadm。</p><p>3、使用kubeadm初始化节点。</p><p>4、安装网络插件。</p><p>5、验证安装。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>1、配置主机名</p><p>2、配置IP地址</p><p>3、参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic" target="_blank" rel="noopener">Letting iptables see bridged traffic</a>，配置iptables</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ensure legacy binaries are installed</span></span><br><span class="line">sudo apt-get <span class="keyword">install</span> -y iptables arptables ebtables</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to legacy versions</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--set iptables /usr/sbin/iptables-legacy</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--set ip6tables /usr/sbin/ip6tables-legacy</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--set arptables /usr/sbin/arptables-legacy</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--set ebtables /usr/sbin/ebtables-legacy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Letting iptables see bridged traffic</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-<span class="keyword">call</span>-ip6tables = <span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-<span class="keyword">call</span>-iptables = <span class="number">1</span></span><br><span class="line">EOF</span><br><span class="line">sysctl <span class="comment">--system</span></span><br></pre></td></tr></table></figure><p>4、参考<a href="https://www.voidking.com/dev-docker-start/">Docker入门</a>，安装Docker</p><h1 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h1><p>参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">Installing kubeadm</a>。</p><p>1、确认系统版本<br><code>cat /etc/os-release</code></p><p>2、执行安装kubeadm、kubelet和kubectl（两个节点都要执行）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> &amp;&amp; sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> apt-transport-https curl</span><br><span class="line">curl -s http<span class="variable">s:</span>//packages.cloud.google.<span class="keyword">com</span>/apt/doc/apt-key.gpg | sudo apt-key <span class="built_in">add</span> -</span><br><span class="line"><span class="keyword">cat</span> &lt;&lt;EOF | sudo tee /etc/apt/sources.<span class="keyword">list</span>.d/kubernetes.<span class="keyword">list</span></span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> kubelet kubeadm kubectl</span><br><span class="line">sudo apt-<span class="keyword">mark</span> hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>3、查看kubelet版本<br><code>kubelet --version</code></p><h1 id="初始化节点"><a href="#初始化节点" class="headerlink" title="初始化节点"></a>初始化节点</h1><p>参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#installing-kubeadm-on-your-hosts" target="_blank" rel="noopener">Installing kubeadm on your hosts</a>。</p><h2 id="master"><a href="#master" class="headerlink" title="master"></a>master</h2><p>1、测试与gcr.io的连接<br><code>kubeadm config images pull</code></p><p>2、执行初始化<br><code>kubeadm init</code><br>完成后，屏幕输出会提示创建配置文件，以及添加worker node的join命令，记录下来。</p><p>3、创建配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>PS：如果忘记了添加worker node的join命令，可以重新生成。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="keyword">token</span> <span class="built_in">create</span> <span class="comment">--help</span></span><br><span class="line">kubeadm <span class="keyword">token</span> <span class="built_in">create</span> <span class="comment">--print-join-command</span></span><br></pre></td></tr></table></figure><p>生成新的join命令后，之前的join命令同样可以使用。</p><h2 id="node01"><a href="#node01" class="headerlink" title="node01"></a>node01</h2><p>1、使用join命令，添加node01节点到集群</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kubeadm</span> <span class="selector-tag">join</span> 172<span class="selector-class">.17</span><span class="selector-class">.0</span><span class="selector-class">.53</span><span class="selector-pseudo">:6443</span> <span class="selector-tag">--token</span> <span class="selector-tag">b09bi7</span><span class="selector-class">.ob6evvc11a8jt1ie</span> \</span><br><span class="line">    <span class="selector-tag">--discovery-token-ca-cert-hash</span> <span class="selector-tag">sha256</span><span class="selector-pseudo">:8abadf8f2eb81301060af3ac6002959714ccf79aaf853546445a2fd6a0265001</span></span><br></pre></td></tr></table></figure><p>2、验证结果<br>在master节点执行：<br><code>kubectl get nodes</code><br>可以看到master节点和node01节点，都是NotReady的状态。</p><h1 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h1><p>参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network" target="_blank" rel="noopener">Installing a Pod network add-on</a>，本文中选择安装weave。（以下命令都是在master节点执行。）</p><p>1、安装weave</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply <span class="operator">-f</span> <span class="string">"https://cloud.weave.works/k8s/net?k8s-version=<span class="variable">$</span>(kubectl version | base64 | tr -d '\n')"</span></span><br></pre></td></tr></table></figure><p>2、验证结果<br><code>kubectl get nodes -w</code><br>等待一会，可以看到master节点和node01节点，变化为Ready的状态，nice。</p><p>以上，k8s集群安装部署完成。</p><h1 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h1><h2 id="手动验证"><a href="#手动验证" class="headerlink" title="手动验证"></a>手动验证</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> nodes</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods --all-namespaces</span><br><span class="line">service kube-apiserver status</span><br><span class="line">service kube-controller-manager status</span><br><span class="line">service kube-scheduler status</span><br><span class="line">service kubelet status</span><br><span class="line">service kube-proxy status</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kubectl</span> <span class="string">run nginx</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">get pods</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">scale --replicas=3 deploy/nginx</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">get pods</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">expose deployment nginx --port=80 --type=NodePort</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">get service</span></span><br><span class="line"><span class="attr">curl</span> <span class="string">http://node01:31850</span></span><br></pre></td></tr></table></figure><h2 id="test-infra"><a href="#test-infra" class="headerlink" title="test-infra"></a>test-infra</h2><p>源码地址：<a href="https://github.com/kubernetes/test-infra" target="_blank" rel="noopener">kubernetes/test-infra</a></p><p>1、拉取源码<br><code>go get -u k8s.io/test-infra/kubetest</code></p><p>2、执行kubetest</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubetest <span class="attribute">--extract</span>=v1.11.3</span><br><span class="line">cd kubernetes</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KUBE_MASTER_IP</span>=<span class="string">"172.17.0.53:6443"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KUBE_MASTER</span>=kube-master</span><br><span class="line">kubetest --test <span class="attribute">--provider</span>=skeleton &gt; testout.txt</span><br><span class="line">kubetest --test <span class="attribute">--provider</span>=skeleton <span class="attribute">--test_args</span>=<span class="string">"ginkgo.focus=Secrets"</span> &gt; testout.txt</span><br><span class="line">cat testout.txt</span><br></pre></td></tr></table></figure><h2 id="Smoke-Test"><a href="#Smoke-Test" class="headerlink" title="Smoke Test"></a>Smoke Test</h2><p>按照<a href="https://github.com/mmumshad/kubernetes-the-hard-way/blob/master/docs/15-smoke-test.md" target="_blank" rel="noopener">Smoke Test</a>文档操作一遍。</p><h2 id="sonobuoy"><a href="#sonobuoy" class="headerlink" title="sonobuoy"></a>sonobuoy</h2><p>官网地址：<a href="https://sonobuoy.io/" target="_blank" rel="noopener">sonobuoy</a><br>源码地址：<a href="https://github.com/vmware-tanzu/sonobuoy" target="_blank" rel="noopener">vmware-tanzu/sonobuoy</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;kubeadm简介&quot;&gt;&lt;a href=&quot;#kubeadm简介&quot; class=&quot;headerlink&quot; title=&quot;kubeadm简介&quot;&gt;&lt;/a&gt;kubeadm简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-kubeadm-upgrade/&quot;&gt;《使用kubeadm升级K8S集群》&lt;/a&gt;一文中，了解了k8s集群中常见组件，并且使用kubeadm对k8s集群进行了升级。本文中，会学习使用kubeadm安装部署k8s集群。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubeadm is a tool built to provide kubeadm init and kubeadm join as best-practice “fast paths” for creating Kubernetes clusters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Overview of kubeadm&lt;/a&gt;和&lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installing kubeadm&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>AutoHotkey配置鼠标光标在屏幕之间瞬移</title>
    <link href="https://www.voidking.com/hobby-autohotkey-mouse-cursor-switch-between-screens/"/>
    <id>https://www.voidking.com/hobby-autohotkey-mouse-cursor-switch-between-screens/</id>
    <published>2020-03-12T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:56.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双屏幕带来的问题"><a href="#双屏幕带来的问题" class="headerlink" title="双屏幕带来的问题"></a>双屏幕带来的问题</h1><p>很多同事都会在笔记本电脑之外，再配备一个或两个屏幕，我也另外配备了一块屏幕。但是，使用双屏幕会带来两个问题：一个是窗口的切换移动不方便，另一个是鼠标的切换移动不方便。</p><p><a href="https://www.voidking.com/hobby-windows-shortcut-key/">《Windows快捷键》</a>一文中，提到了两个可以用于多个屏幕窗口操作的快捷键：<br>1、alt+tab，切换窗口。<br>2、win+shift+左右键，可以移动窗口到另一个屏幕。</p><p>窗口的问题基本解决了，但是鼠标的问题还没有解决。怎么办？很多文章说，通过“显示设置”，调整两个屏幕的相对位置，就能更加容易地在两个屏幕间移动鼠标光标。但是，这个方法只是缓解了问题，并没有解决问题，鼠标光标移动依然很麻烦。</p><p>此时，就该本文的主角 <a href="https://www.autohotkey.com/" target="_blank" rel="noopener">AutoHotkey</a> 出马了！</p><a id="more"></a><h1 id="AutoHotkey"><a href="#AutoHotkey" class="headerlink" title="AutoHotkey"></a>AutoHotkey</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>AutoHotkey is a free, open-source scripting language for Windows that allows users to easily create small to complex scripts for all kinds of tasks such as: form fillers, auto-clicking, macros, etc.</p></blockquote><p>正如官方的介绍，autohotkey是一个免费开源的脚本语言，可以帮助用户在Windows上轻松创建脚本，例如：表格填充，自动单击，宏等。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、访问<a href="https://www.autohotkey.com/" target="_blank" rel="noopener">AutoHotkey官网</a>或者<a href="https://github.com/Lexikos/AutoHotkey_L" target="_blank" rel="noopener">AutoHotkey-github</a>，下载安装包，本文中选择下载 AutoHotkey_1.1.32.00_setup.exe </p><p>2、双击安装即可</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><p>1、新建文件helloworld.ahk，内容为：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">!H::</span></span><br><span class="line"><span class="built_in">Send,</span> helloworld</span><br><span class="line"><span class="keyword">Return</span></span><br></pre></td></tr></table></figure><p>第一行定义快捷键，其中<code>!</code>代表alt，H就是H。<br>第二行Send命令，<code>,</code>后的是参数。<br>第三行Return停止后面的脚本。</p><p>2、启动脚本<br>双击helloworld.ahk，或者右键helloworld.ahk，Run Script。查看系统托盘，可以看到多了一个H的图标，这就是正在运行的脚本。</p><p>3、测试脚本<br>打开任意一个文档，按下 alt+H ，发现会自动填入 “helloworld”，nice。</p><h2 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h2><p>1、符号说明</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#Win</span></span><br><span class="line">!Alt</span><br><span class="line">^Control</span><br><span class="line">+Shift</span><br><span class="line"><span class="meta">&amp;连接两个按键(含鼠标按键)，合并成一个自定义热键</span></span><br></pre></td></tr></table></figure><p>2、常用命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Send</span> <span class="string">发送一段字符</span></span><br><span class="line"><span class="attr">SendInput</span> <span class="string">发送一段字符</span></span><br><span class="line"><span class="attr">MsgBox</span> <span class="string">弹出对话框</span></span><br><span class="line"><span class="attr">Run</span> <span class="string">运行一个软件或者打开网页</span></span><br><span class="line"><span class="attr">WinActivate</span> <span class="string">窗口激活</span></span><br><span class="line"><span class="attr">WinWaitActive</span> <span class="string">等待窗口激活</span></span><br></pre></td></tr></table></figure><p>更多内容参考<a href="https://www.autohotkey.com/docs/AutoHotkey.htm" target="_blank" rel="noopener">AutoHotkey官方文档</a>。</p><h1 id="定义快捷键"><a href="#定义快捷键" class="headerlink" title="定义快捷键"></a>定义快捷键</h1><p>利用autohotkey，可以实现自定义快捷键。</p><h2 id="双脚本"><a href="#双脚本" class="headerlink" title="双脚本"></a>双脚本</h2><p>1、新建文件 mousemove1.ahk，内容为</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">!1::</span></span><br><span class="line"><span class="built_in">CoordMode,</span> Mouse, Screen</span><br><span class="line"><span class="built_in">MouseMove,</span> (<span class="built_in">A_ScreenWidth</span> // <span class="number">2</span>), (<span class="built_in">A_ScreenHeight</span> // <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>这段脚本运行后，按下 alt+1 ，鼠标光标会跳转到屏幕1的中心。</p><p>2、新建文件 mousemove2.ahk，内容为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!2::</span><br><span class="line">CoordMode, Mouse, Screen</span><br><span class="line">MouseMove, (A_ScreenWidth + 100), 100</span><br><span class="line">return</span><br></pre></td></tr></table></figure><p>这段脚本运行后，按下 alt+2 ，鼠标光标会跳转到屏幕2的左上角的(100,100)位置。</p><p>这两个脚本配合，已经可以鼠标光标在两个屏幕间切换，nice。<br>但是，mousemove2.ahk 还有改进的空间。既然屏幕1是跳转到屏幕中间，那么屏幕2自然也是跳转到屏幕中间更好。</p><p>屏幕2的分辨率为3840x2160，因此脚本修改为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!2::</span><br><span class="line">CoordMode, Mouse, Screen</span><br><span class="line">MouseMove, (A_ScreenWidth + 1920), 1080</span><br><span class="line">return</span><br></pre></td></tr></table></figure><h2 id="单脚本"><a href="#单脚本" class="headerlink" title="单脚本"></a>单脚本</h2><p>以上，已经实现了鼠标光标在两个屏幕间的完美切换。但是，因为切换时有两个快捷键，所以切换鼠标所在屏幕时，还要想一下是切到1还是切到2，这也是一个可以改进的点。</p><p>创建文件 mousemove.ahk，内容为：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">!J::</span></span><br><span class="line"><span class="built_in">CoordMode,</span> Mouse, Screen</span><br><span class="line"><span class="built_in">MouseGetPos,</span> xpos, ypos</span><br><span class="line">if (xpos &lt;= <span class="built_in">A_ScreenWidth</span>) <span class="literal">and</span> (ypos &lt;= <span class="built_in">A_ScreenHeight</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">    MouseMove,</span> (<span class="built_in">A_ScreenWidth</span> // <span class="number">2</span>), (<span class="built_in">A_ScreenHeight</span> // <span class="number">2</span>)</span><br><span class="line">&#125;else &#123;</span><br><span class="line"><span class="built_in">MouseMove,</span> (<span class="built_in">A_ScreenWidth</span> + <span class="number">1920</span>), <span class="number">1080</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>这段脚本运行后，按下 alt+J ，可以实现鼠标光标切换到另一个屏幕的中心。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;双屏幕带来的问题&quot;&gt;&lt;a href=&quot;#双屏幕带来的问题&quot; class=&quot;headerlink&quot; title=&quot;双屏幕带来的问题&quot;&gt;&lt;/a&gt;双屏幕带来的问题&lt;/h1&gt;&lt;p&gt;很多同事都会在笔记本电脑之外，再配备一个或两个屏幕，我也另外配备了一块屏幕。但是，使用双屏幕会带来两个问题：一个是窗口的切换移动不方便，另一个是鼠标的切换移动不方便。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/hobby-windows-shortcut-key/&quot;&gt;《Windows快捷键》&lt;/a&gt;一文中，提到了两个可以用于多个屏幕窗口操作的快捷键：&lt;br&gt;1、alt+tab，切换窗口。&lt;br&gt;2、win+shift+左右键，可以移动窗口到另一个屏幕。&lt;/p&gt;
&lt;p&gt;窗口的问题基本解决了，但是鼠标的问题还没有解决。怎么办？很多文章说，通过“显示设置”，调整两个屏幕的相对位置，就能更加容易地在两个屏幕间移动鼠标光标。但是，这个方法只是缓解了问题，并没有解决问题，鼠标光标移动依然很麻烦。&lt;/p&gt;
&lt;p&gt;此时，就该本文的主角 &lt;a href=&quot;https://www.autohotkey.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AutoHotkey&lt;/a&gt; 出马了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="windows" scheme="https://www.voidking.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>SSL和TLS</title>
    <link href="https://www.voidking.com/dev-ssl-tls/"/>
    <id>https://www.voidking.com/dev-ssl-tls/</id>
    <published>2020-03-09T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:56.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSL和TLS简介"><a href="#SSL和TLS简介" class="headerlink" title="SSL和TLS简介"></a>SSL和TLS简介</h1><p><a href="https://www.voidking.com/dev-hexo-https/">《Hexo启用https加密连接》</a>和<a href="https://www.voidking.com/dev-centos7-install-gitlab/">《CentOS7安装配置GitLab》</a>中都涉及到了SSL/TLS，SSL和TLS是啥？</p><blockquote><p>传输层安全性协议（英语：Transport Layer Security，缩写：TLS）及其前身安全套接层（英语：Secure Sockets Layer，缩写：SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。<br>SSL包含记录层（Record Layer）和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用X.509认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（Session key）。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。</p></blockquote><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A" target="_blank" rel="noopener">维基百科-传输层安全性协议</a></p><a id="more"></a><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="PKI"><a href="#PKI" class="headerlink" title="PKI"></a>PKI</h2><blockquote><p>公开密钥基础建设（英语：Public Key Infrastructure，缩写：PKI），又称公开密钥基础架构、公钥基础建设、公钥基础设施、公开密码匙基础建设或公钥基础架构，是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书。<br>密码学上，公开密钥基础建设借着数字证书认证机构（CA）将用户的个人身份跟公开密钥链接在一起。对每个证书中心用户的身份必须是唯一的。链接关系通过注册和发布过程创建，取决于担保级别，链接关系可能由CA的各种软件或在人为监督下完成。PKI的确定链接关系的这一角色称为注册管理中心（Registration Authority，RA）。RA确保公开密钥和个人身份链接，可以防欺诈。在微软的公开密钥基础建设之下，注册管理中心（RA）又被叫做从属数字证书认证机构（Subordinate CA）。</p></blockquote><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E5%9F%BA%E7%A4%8E%E5%BB%BA%E8%A8%AD" target="_blank" rel="noopener">维基百科-公开密钥基础架构</a></p><h2 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h2><blockquote><p>数字证书认证机构（英语：Certificate Authority，缩写为CA），也称为电子商务认证中心、电子商务认证授权机构，是负责发放和管理数字证书的权威机构，并作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任。</p></blockquote><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84" target="_blank" rel="noopener">维基百科-证书颁发机构</a></p><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><blockquote><p>公钥证书（英语：Public key certificate），又称数字证书（digital certificate）或身份证书（identity certificate）。是用于公开密钥基础建设的电子文件，用来证明公开密钥拥有者的身份。此文件包含了公钥信息、拥有者身份信息（主体）、以及数字证书认证机构（发行者）对这份文件的数字签名，以保证这个文件的整体内容正确无误。拥有者凭着此文件，可向电脑系统或其他用户表明身份，从而对方获得信任并授权访问或使用某些敏感的电脑服务。电脑系统或其他用户可以透过一定的程序核实证书上的内容，包括证书有否过期、数字签名是否有效，如果你信任签发的机构，就可以信任证书上的密钥，凭公钥加密与拥有者进行可靠的通信。</p></blockquote><blockquote><p>公钥证书包括自签证书、根证书、中介证书、授权证书、终端实体证书（TLS服务器证书和TLS客户端证书）。</p></blockquote><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89" target="_blank" rel="noopener">维基百科-公钥证书</a></p><h1 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h1><p>TLS/SSL 的功能实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密。其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性。<br><img src="http://cdn.voidking.com/@/imgs/ssl-tls/tls.jpg?imageView2/0/w/600" alt=""></p><p>TLS 的基本工作方式是，客户端使用非对称加密与服务器进行通信，实现身份验证并协商对称加密使用的密钥，然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信，不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取。<br>例如，在 HTTPS 协议中，客户端发出请求，服务端会将公钥发给客户端，客户端验证过后生成一个密钥再用公钥加密后发送给服务端（非对称加密），双方会在 TLS 握手过程中生成一个协商密钥（对称密钥），成功后建立加密连接。通信过程中客户端将请求数据用协商密钥加密后发送，服务端也用协商密钥解密，响应也用相同的协商密钥。后续的通信使用对称加密是因为对称加解密快，而握手过程中非对称加密可以保证加密的有效性，但是过程复杂，计算量相对来说也大。</p><p>更多内容参考<a href="https://juejin.im/post/5b88a93df265da43231f1451" target="_blank" rel="noopener">SSL/TLS 详解</a></p><h1 id="自建CA并签发证书"><a href="#自建CA并签发证书" class="headerlink" title="自建CA并签发证书"></a>自建CA并签发证书</h1><p><a href="https://www.voidking.com/dev-centos7-install-gitlab/">《CentOS7安装配置GitLab》</a>一文中，添加SSL一节详细描述了自建CA并签发SSL证书的过程。<br>更多内容，可以参考<a href="https://www.yuanjies.com/?p=539" target="_blank" rel="noopener">基于OpenSSL自建CA和颁发SSL证书</a>和<a href="https://zhuanlan.zhihu.com/p/34788439" target="_blank" rel="noopener">使用 OpenSSL 自建 CA 并签发证书</a>。</p><h1 id="k8s中证书管理"><a href="#k8s中证书管理" class="headerlink" title="k8s中证书管理"></a>k8s中证书管理</h1><h2 id="查看证书"><a href="#查看证书" class="headerlink" title="查看证书"></a>查看证书</h2><p>1、查看证书位置</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep kubelet</span><br><span class="line"><span class="comment"># find config file</span></span><br><span class="line">cat /var/<span class="class"><span class="keyword">lib</span>/<span class="title">kubelet</span>/<span class="title">config</span>.<span class="title">yaml</span> | <span class="title">grep</span> <span class="title">staticPodPath</span></span></span><br><span class="line">cd /etc/kubernetes/manifests</span><br><span class="line">cat kube-apiserver.yaml</span><br></pre></td></tr></table></figure><p>2、查看证书详情</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver.crt -text</span><br></pre></td></tr></table></figure><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>签名，或者签名过期后重新签名</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver-etcd-client.csr -CA <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>etcd<span class="regexp">/ca.crt -CAkey /</span>etc<span class="regexp">/kubernetes/</span>pki<span class="regexp">/etcd/</span>ca.key -CAcreateserial -out <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver-etcd-client.crt</span><br></pre></td></tr></table></figure><h2 id="通过API签名"><a href="#通过API签名" class="headerlink" title="通过API签名"></a>通过API签名</h2><p>1、为新用户创建证书</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out jane.<span class="built_in">key</span> <span class="number">2048</span></span><br><span class="line">openssl req -<span class="built_in">new</span> -<span class="built_in">key</span> jane.<span class="built_in">key</span> -subj  <span class="string">"/CN=jane"</span> -out jane.csr</span><br><span class="line">cat jane.csr | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d '\n'</span><br></pre></td></tr></table></figure><p>2、创建jane-csr.yaml文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: certificates.k8s.io/v1beta1</span><br><span class="line">kind: CertificateSigningRequest</span><br><span class="line">metadata:</span><br><span class="line">  name: jane</span><br><span class="line">spec:</span><br><span class="line">  groups:</span><br><span class="line">  - system:authenticated</span><br><span class="line">  usages:</span><br><span class="line">  - digital signature</span><br><span class="line">  - key encipherment</span><br><span class="line">  -<span class="built_in"> server </span>auth</span><br><span class="line">  -<span class="built_in"> client </span>auth</span><br><span class="line">  request: <span class="attribute">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZEQ0NBVHdDQVFBd0R6RU5NQXNHQTFVRUF3d0VhbUZ1WlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUtxbWFIa3BJeE94dDN2UmxJT1FnSUFxSUFsekhQcTRRVTBDTDVhS04xbmY4NXRzCi9LU3o0eml1a1hEQ1NOSVNIT1pWbTY5NzVJa3RXcGFySmhaTXptc1B2eUFSeXFWbWY2L1h0bmwyeE0xblhaUzAKZGc0b0E1dXFuR0w2dHpaQzF3VFY4RVFIZnRlcWYzbUpTN2JtdlppaXFlak12a2UzVkk5RTNFK0xsUUttNnVXRwprS2RDZ2ZHNUszRGJFczR1VzR6M0lMdTdEa1BlamJodWFtYzlxYVZNRVpLSGZ0bnlBYlFITkZVLzhvWVYvR1VzCnRFVWZMRXBBTmlqUFc5U0pPWHJtNUg1NXhOdExXVHMwenU3YlRSZWE0ZjFVaDFCbkZuUkhWYUJqNysydHpITTgKaklJS01KakdWOS9rUVltRmo3UTJZUW1wYzdXWGpPZEFWcHBSc1kwQ0F3RUFBYUFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUZ2ZUxrUmYxd0xDQmN6cWdMVkJIUGZBa0MzeU1CTDA3VXl0QUlCcVhkR3h1QWtyL3NQT1dkClNxTkhIRkNzQVNmU0lNVC96djBrQS9yN3Fnd25BMCtZREZJSjNzUlBKZkJmNm1Ic3FrbjlPd1htR1E3d0orNFQKWXVCc1lJSllnNWtzVWJoQVhiQkVZekk2OUY0Uk52U0d0K1ZLOHBBdUQzcXRvejJsd3liV0cvaUo4V3FESTZNegpuMURBeDBkRDZmRWhIKy9DTWdSREY5OExCL1ZqMWZOUUlqZ2k3Rmc1aTByU1NtZUdUMllOblJldERZYWN4aWlzCjNFN1B4STdYWDd2QjRjY3pITlUrTG92N3JnSkVXM3lRMXZRTXRCNTZlbWJaNGVnL01XZEhkeWliVXo2aDQ1ZW8KUGN5b3QxaW1wdFRyK3kwSkt0SmJ1YllQOGd2RG5FeFYKLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg</span>==</span><br></pre></td></tr></table></figure><p>3、签名请求并通过</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f jane-csr.yaml</span><br><span class="line">kubectl <span class="builtin-name">get</span> csr </span><br><span class="line">kubectl certificate approve jane</span><br><span class="line">kubectl <span class="builtin-name">get</span> csr jane -o yaml</span><br><span class="line">kubectl <span class="builtin-name">get</span> csr jane -o <span class="attribute">jsonpath</span>=<span class="string">'&#123;.status.certificate&#125;'</span> | base64 --decode &gt; jane.crt</span><br></pre></td></tr></table></figure><p>或者，直接使用openssl命令进行签名：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> <span class="regexp">/root/</span>jane.csr -CA <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>etcd<span class="regexp">/ca.crt -CAkey /</span>etc<span class="regexp">/kubernetes/</span>pki<span class="regexp">/etcd/</span>ca.key -CAcreateserial -out <span class="regexp">/root/</span>jane.crt</span><br></pre></td></tr></table></figure><p>PS：查看签名用的CA</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>kubernetes<span class="regexp">/manifests/</span>kube-controller-manager.yaml | <span class="keyword">grep</span> ca.crt</span><br><span class="line">cat <span class="regexp">/etc/</span>kubernetes<span class="regexp">/manifests/</span>kube-controller-manager.yaml | <span class="keyword">grep</span> ca.key</span><br></pre></td></tr></table></figure><p>更多内容，参考<a href="https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/" target="_blank" rel="noopener">Manage TLS Certificates in a Cluster</a>。</p><h1 id="证书格式转换"><a href="#证书格式转换" class="headerlink" title="证书格式转换"></a>证书格式转换</h1><p>X.509是一种证书标准，定义了证书中应该包含哪些内容，详情参考RFC5280，SSL使用的就是这种证书标准。<br>同样的X.509证书，可能有不同的编码格式，目前有以下两种编码格式。<br>PEM：Privacy Enhanced Mail，BASE64编码，以”—–BEGIN—–”开头，”—–END—–”结尾。<br>查看PEM格式证书的信息：<br><code>openssl x509 -in cert.pem -text -noout</code></p><p>DER：Distinguished Encoding Rules，二进制格式，不可读。<br>查看DER格式证书的信息：<br><code>openssl x509 -in cert.der -inform der -text -noout</code></p><p>问题来了，k8s中的证书，除了使用pem格式，还有就是crt格式，并没有der格式啊？这是因为，crt只是一个文件后缀，编码格式可能是pem也可能是der。</p><p>那么，pem和der怎样互相转换呢？</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pem to der</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> cert.crt -outform der -<span class="keyword">out</span> cert.der</span><br><span class="line"><span class="meta"># der to pem</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> cert.crt -inform der -outform pem -<span class="keyword">out</span> cert.pem</span><br></pre></td></tr></table></figure><h1 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h1><p><a href="https://segmentfault.com/a/1190000002568019" target="_blank" rel="noopener">OpenSSL 与 SSL 数字证书概念贴</a><br><a href="https://cloud.tencent.com/developer/article/1114555" target="_blank" rel="noopener">SSL/TLS 原理详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSL和TLS简介&quot;&gt;&lt;a href=&quot;#SSL和TLS简介&quot; class=&quot;headerlink&quot; title=&quot;SSL和TLS简介&quot;&gt;&lt;/a&gt;SSL和TLS简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-https/&quot;&gt;《Hexo启用https加密连接》&lt;/a&gt;和&lt;a href=&quot;https://www.voidking.com/dev-centos7-install-gitlab/&quot;&gt;《CentOS7安装配置GitLab》&lt;/a&gt;中都涉及到了SSL/TLS，SSL和TLS是啥？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传输层安全性协议（英语：Transport Layer Security，缩写：TLS）及其前身安全套接层（英语：Secure Sockets Layer，缩写：SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。&lt;br&gt;SSL包含记录层（Record Layer）和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用X.509认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（Session key）。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科-传输层安全性协议&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="tls" scheme="https://www.voidking.com/tags/tls/"/>
    
  </entry>
  
  <entry>
    <title>K8S集群中etcd备份和恢复</title>
    <link href="https://www.voidking.com/dev-k8s-etcd-backup-restore/"/>
    <id>https://www.voidking.com/dev-k8s-etcd-backup-restore/</id>
    <published>2020-03-08T22:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>就像备份数据库一样，很多时候，我们也想对k8s资源配置进行备份。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> <span class="built_in">all</span> --<span class="built_in">all</span>-namespaces -o yaml &gt; <span class="built_in">all</span>-deploy-services.yaml</span><br></pre></td></tr></table></figure><p>上面的方法，可以实现对k8s资源配置的备份。但是更好的办法，是对etcd进行备份。本文就学习一下k8s中etcd的备份和恢复方法。</p><a id="more"></a><h1 id="etcd集群状态"><a href="#etcd集群状态" class="headerlink" title="etcd集群状态"></a>etcd集群状态</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HOST_1</span>=10.240.0.17</span><br><span class="line"><span class="attribute">HOST_2</span>=10.240.0.18</span><br><span class="line"><span class="attribute">HOST_3</span>=10.240.0.19</span><br><span class="line"><span class="attribute">ENDPOINTS</span>=<span class="variable">$HOST_1</span>:2379,$HOST_2:2379,$HOST_3:2379</span><br><span class="line">etcdctl <span class="attribute">--endpoints</span>=<span class="variable">$ENDPOINTS</span> member list</span><br><span class="line">etcdctl <span class="attribute">--write-out</span>=table <span class="attribute">--endpoints</span>=<span class="variable">$ENDPOINTS</span> endpoint status</span><br><span class="line">etcdctl <span class="attribute">--endpoints</span>=<span class="variable">$ENDPOINTS</span> endpoint health</span><br></pre></td></tr></table></figure><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>1、查看配置</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod etcd-<span class="keyword">master</span> <span class="title">-n</span> kube-system | grep Command -i -A <span class="number">20</span></span><br></pre></td></tr></table></figure><p>看到Command字段为：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Command:</span><br><span class="line">  etcd</span><br><span class="line">  -<span class="ruby">-advertise-client-urls=<span class="symbol">https:</span>/<span class="regexp">/172.17.0.10:2379</span></span></span><br><span class="line"><span class="ruby">  --cert-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.crt</span></span></span><br><span class="line"><span class="ruby">  --client-cert-auth=<span class="literal">true</span></span></span><br><span class="line"><span class="ruby">  --data-dir=<span class="regexp">/var/lib</span><span class="regexp">/etcd</span></span></span><br><span class="line"><span class="ruby">  --initial-advertise-peer-urls=<span class="symbol">https:</span>/<span class="regexp">/172.17.0.10:2380</span></span></span><br><span class="line"><span class="ruby">  --initial-cluster=master=<span class="symbol">https:</span>/<span class="regexp">/172.17.0.10:2380</span></span></span><br><span class="line"><span class="ruby">  --key-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.key</span></span></span><br><span class="line"><span class="ruby">  --listen-client-urls=<span class="symbol">https:</span>/<span class="regexp">/127.0.0.1:2379,https:/</span><span class="regexp">/172.17.0.10:2379</span></span></span><br><span class="line"><span class="ruby">  --listen-metrics-urls=<span class="symbol">http:</span>/<span class="regexp">/127.0.0.1:2381</span></span></span><br><span class="line"><span class="ruby">  --listen-peer-urls=<span class="symbol">https:</span>/<span class="regexp">/172.17.0.10:2380</span></span></span><br><span class="line"><span class="ruby">  --name=master</span></span><br><span class="line"><span class="ruby">  --peer-cert-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/peer.crt</span></span></span><br><span class="line"><span class="ruby">  --peer-client-cert-auth=<span class="literal">true</span></span></span><br><span class="line"><span class="ruby">  --peer-key-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/peer.key</span></span></span><br><span class="line"><span class="ruby">  --peer-trusted-ca-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt</span></span></span><br><span class="line"><span class="ruby">  --snapshot-count=<span class="number">10000</span></span></span><br><span class="line"><span class="ruby">  --trusted-ca-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt</span></span></span><br></pre></td></tr></table></figure><p>或者查看/etc/kubernetes/manifests/etcd.yaml。</p><p>2、执行备份</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">-<span class="ruby">-endpoints=<span class="symbol">https:</span>/<span class="regexp">/[127.0.0.1]:2379 \</span></span></span><br><span class="line"><span class="ruby">--cacert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt \</span></span></span><br><span class="line"><span class="ruby">--cert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.crt \</span></span></span><br><span class="line"><span class="ruby">--key=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.key \</span></span></span><br><span class="line"><span class="ruby">snapshot save /tmp/snapshot-pre-boot.db</span></span><br></pre></td></tr></table></figure><p>3、查看备份</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">-<span class="ruby">-endpoints=<span class="symbol">https:</span>/<span class="regexp">/[127.0.0.1]:2379 \</span></span></span><br><span class="line"><span class="ruby">--cacert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt \</span></span></span><br><span class="line"><span class="ruby">--cert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.crt \</span></span></span><br><span class="line"><span class="ruby">--key=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.key \</span></span></span><br><span class="line"><span class="ruby">snapshot status /tmp/snapshot-pre-boot.db -w table</span></span><br></pre></td></tr></table></figure><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><p>1、恢复etcd数据</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">-<span class="ruby">-endpoints=<span class="symbol">https:</span>/<span class="regexp">/[127.0.0.1]:2379 \</span></span></span><br><span class="line"><span class="ruby">--cacert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt \</span></span></span><br><span class="line"><span class="ruby">--cert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.crt \</span></span></span><br><span class="line"><span class="ruby">--key=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.key \</span></span></span><br><span class="line"><span class="ruby">--initial-cluster=master=<span class="symbol">https:</span>/<span class="regexp">/127.0.0.1:2380 \</span></span></span><br><span class="line"><span class="ruby">--initial-cluster-token etcd-cluster-<span class="number">1</span> \</span></span><br><span class="line"><span class="ruby">--initial-advertise-peer-urls=<span class="symbol">https:</span>/<span class="regexp">/127.0.0.1:2380 \</span></span></span><br><span class="line"><span class="ruby">--name=master \</span></span><br><span class="line"><span class="ruby">--data-dir /var/lib/etcd-from-backup \</span></span><br><span class="line"><span class="ruby">snapshot restore /tmp/snapshot-pre-boot.db</span></span><br></pre></td></tr></table></figure><p>2、修改etcd.yaml<br><code>vim /etc/kubernetes/manifests/etcd.yaml</code>，如下修改：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">Update</span> --data-dir <span class="keyword">to</span> <span class="keyword">use</span> new target location</span><br><span class="line">--data-dir=/var/lib/etcd-<span class="keyword">from</span>-backup</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Update</span> new initial-<span class="keyword">cluster</span>-token <span class="keyword">to</span> specify new <span class="keyword">cluster</span></span><br><span class="line">--initial-<span class="keyword">cluster</span>-token=etcd-<span class="keyword">cluster</span><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">Update</span> volumes <span class="keyword">and</span> volume mounts <span class="keyword">to</span> point <span class="keyword">to</span> new <span class="keyword">path</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /var/lib/etcd-<span class="keyword">from</span>-backup</span><br><span class="line">      name: etcd-data</span><br><span class="line">    - mountPath: /etc/kubernetes/pki/etcd</span><br><span class="line">      name: etcd-certs</span><br><span class="line">  hostNetwork: <span class="literal">true</span></span><br><span class="line">  priorityClassName: <span class="keyword">system</span>-<span class="keyword">cluster</span>-critical</span><br><span class="line">  volumes:</span><br><span class="line">  - hostPath:</span><br><span class="line">      <span class="keyword">path</span>: /var/lib/etcd-<span class="keyword">from</span>-backup</span><br><span class="line">      <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line">    name: etcd-data</span><br><span class="line">  - hostPath:</span><br><span class="line">      <span class="keyword">path</span>: /etc/kubernetes/pki/etcd</span><br><span class="line">      <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line">    name: etcd-certs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;就像备份数据库一样，很多时候，我们也想对k8s资源配置进行备份。&lt;/p&gt;
&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl &lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;all&lt;/span&gt; --&lt;span class=&quot;built_in&quot;&gt;all&lt;/span&gt;-namespaces -o yaml &amp;gt; &lt;span class=&quot;built_in&quot;&gt;all&lt;/span&gt;-deploy-services.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的方法，可以实现对k8s资源配置的备份。但是更好的办法，是对etcd进行备份。本文就学习一下k8s中etcd的备份和恢复方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeadm升级K8S集群</title>
    <link href="https://www.voidking.com/dev-kubeadm-upgrade/"/>
    <id>https://www.voidking.com/dev-kubeadm-upgrade/</id>
    <published>2020-03-08T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8S组件版本说明"><a href="#K8S组件版本说明" class="headerlink" title="K8S组件版本说明"></a>K8S组件版本说明</h1><p>k8s集群中的常见组件包括：<br>A类：kube-apiserver<br>B类：controller-manager、kube-scheduler<br>C类：kubelet、kube-proxy<br>D类：etcd cluster、CoreDNS<br>E类：kubectl</p><p>组件的版本号一般表示为 major.minor.patch，比如v1.10.3。其中，A类组件是主要组件，以它为版本基准。比如，A类组件版本的minor号为x，那么B类组件版本必须为x或者x-1，C类组件版本必须为x、x-1或者x-2，E类组件版本必须为x、x-1或者x+1。而D类组件，和A类组件不是同一版本体系，版本兼容情况需要查看文档。整理成表格如下：</p><table><thead><tr><th>组件类别</th><th>minor版本</th><th>组件</th></tr></thead><tbody><tr><td>A类</td><td>x</td><td>kube-apiserver</td></tr><tr><td>B类</td><td>x、x-1</td><td>controller-manager、kube-scheduler</td></tr><tr><td>C类</td><td>x、x-1、x-2</td><td>kubelet、kube-proxy</td></tr><tr><td>E类</td><td>x、x-1、x+1</td><td>kubectl</td></tr><tr><td>D类</td><td>查看文档</td><td>etcd cluster、CoreDNS</td></tr></tbody></table><p>本文学习使用kubeadm进行k8s集群的升级。</p><a id="more"></a><h1 id="升级顺序"><a href="#升级顺序" class="headerlink" title="升级顺序"></a>升级顺序</h1><p>推荐的升级方法，是根据minor版本号逐级进行升级。比如v1.10.0想要升级到v1.13.0，不应该直接升级到v1.13.0，而是应该v1.10.0-&gt;v1.11.0-&gt;v1.12.0-&gt;v1.13.0。</p><p>升级顺序一般为：<br>1、升级kubeadm<br>2、升级master node<br>3、升级worker node<br>4、升级kubelet</p><h1 id="升级操作"><a href="#升级操作" class="headerlink" title="升级操作"></a>升级操作</h1><p>以v1.11.0升级v1.12.0为例。</p><h2 id="master节点"><a href="#master节点" class="headerlink" title="master节点"></a>master节点</h2><p>1、查看升级帮助<br><code>kubeadm upgrade plan</code></p><p>2、升级kubeadm</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>-y <span class="attribute">kubeadm</span>=1.12.0-00</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">apt install <span class="attribute">kubeadm</span>=1.12.0-00</span><br></pre></td></tr></table></figure><p>3、升级k8s的AB类组件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm<span class="built_in"> upgrade </span>apply v1.12.0</span><br></pre></td></tr></table></figure><p>此时使用kubectl get nodes，看到的version依然是v1.11.0，因为这里显示的是kubelet的版本，而不是kube-apiserver的版本。</p><p>4、升级master节点的kubelet</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install kubelet=<span class="number">1.12</span><span class="number">.0</span><span class="number">-00</span></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="worker节点"><a href="#worker节点" class="headerlink" title="worker节点"></a>worker节点</h2><p>1、驱逐worker节点的pods，封锁节点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain <span class="keyword">node</span><span class="title">-1</span></span><br><span class="line">kubectl cordon <span class="keyword">node</span><span class="title">-1</span></span><br></pre></td></tr></table></figure><p>2、升级kubeadm和kubectl</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install <span class="attribute">kubeadm</span>=1.12.0-00</span><br><span class="line">apt-<span class="builtin-name">get</span> install <span class="attribute">kubelet</span>=1.12.0-00</span><br><span class="line">kubeadm<span class="built_in"> upgrade </span>node<span class="built_in"> config </span>--kubelet-version v1.12.0</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>3、解除节点封锁<br><code>kubectl uncordon node-1</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;K8S组件版本说明&quot;&gt;&lt;a href=&quot;#K8S组件版本说明&quot; class=&quot;headerlink&quot; title=&quot;K8S组件版本说明&quot;&gt;&lt;/a&gt;K8S组件版本说明&lt;/h1&gt;&lt;p&gt;k8s集群中的常见组件包括：&lt;br&gt;A类：kube-apiserver&lt;br&gt;B类：controller-manager、kube-scheduler&lt;br&gt;C类：kubelet、kube-proxy&lt;br&gt;D类：etcd cluster、CoreDNS&lt;br&gt;E类：kubectl&lt;/p&gt;
&lt;p&gt;组件的版本号一般表示为 major.minor.patch，比如v1.10.3。其中，A类组件是主要组件，以它为版本基准。比如，A类组件版本的minor号为x，那么B类组件版本必须为x或者x-1，C类组件版本必须为x、x-1或者x-2，E类组件版本必须为x、x-1或者x+1。而D类组件，和A类组件不是同一版本体系，版本兼容情况需要查看文档。整理成表格如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件类别&lt;/th&gt;
&lt;th&gt;minor版本&lt;/th&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;A类&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;kube-apiserver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B类&lt;/td&gt;
&lt;td&gt;x、x-1&lt;/td&gt;
&lt;td&gt;controller-manager、kube-scheduler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C类&lt;/td&gt;
&lt;td&gt;x、x-1、x-2&lt;/td&gt;
&lt;td&gt;kubelet、kube-proxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E类&lt;/td&gt;
&lt;td&gt;x、x-1、x+1&lt;/td&gt;
&lt;td&gt;kubectl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D类&lt;/td&gt;
&lt;td&gt;查看文档&lt;/td&gt;
&lt;td&gt;etcd cluster、CoreDNS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;本文学习使用kubeadm进行k8s集群的升级。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置GateOne</title>
    <link href="https://www.voidking.com/dev-docker-gateone/"/>
    <id>https://www.voidking.com/dev-docker-gateone/</id>
    <published>2020-03-03T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GateOne简介"><a href="#GateOne简介" class="headerlink" title="GateOne简介"></a>GateOne简介</h1><blockquote><p>Gate One is a web-based Terminal Emulator and SSH client that brings the power of the command line to the web. It requires no browser plugins and is built on top of a powerful plugin system that allows every aspect of its appearance and functionality to be customized.</p></blockquote><p>本文使用Docker安装配置GateOne，搭建一个Web Shell环境。<br>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.130。</p><a id="more"></a><h1 id="安装GateOne"><a href="#安装GateOne" class="headerlink" title="安装GateOne"></a>安装GateOne</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/liftoff/gateone" target="_blank" rel="noopener">liftoff/gateone版本</a>，实际上只有一个版本。</p><p>2、下载gateone镜像<br><code>docker pull liftoff/gateone</code></p><p>3、启动gateone服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> <span class="attribute">--name</span>=vk-gateone -d \</span><br><span class="line">-p 8000:8000 \</span><br><span class="line">liftoff/gateone gateone</span><br></pre></td></tr></table></figure><p>以上命令：命名容器为vk-gateone，后台运行；映射宿主机8000端口到容器8000端口。</p><p>更多命令参考<a href="https://hub.docker.com/r/liftoff/gateone" target="_blank" rel="noopener">Using this Image</a>。</p><p>4、验证安装<br><code>docker ps</code><br>gateone启动正常的话就可以看到vk-gateone容器。<br>如果启动失败，可以使用<code>docker logs vk-gateone</code>查看失败原因并进行解决。</p><p>使用nc命令验证：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install nc</span></span><br><span class="line"><span class="attr">nc</span> <span class="string">-v localhost 8000</span></span><br></pre></td></tr></table></figure><p>浏览器访问： <a href="https://192.168.56.130:8000" target="_blank" rel="noopener">https://192.168.56.130:8000</a></p><p>5、使用<br>点击 Terminal:SSH ，输入主机IP、端口号、用户名和密码，即可登录主机。</p><p>如果想要添加鉴权验证，参考<a href="https://wiki.archlinux.org/index.php/Gateone" target="_blank" rel="noopener">archlinux-Gateone</a>和<a href="http://liftoff.github.io/GateOne/Developer/embedding_api_auth.html" target="_blank" rel="noopener">API Authentication</a>。</p><h1 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h1><p>如果浏览器无法访问8000端口，那么需要对防火墙进行设置。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="params">--add-port=8000/tcp</span> <span class="params">--permanent</span></span><br><span class="line">systemctl <span class="keyword">reload</span> firewalld</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h1 id="安装openssh-server"><a href="#安装openssh-server" class="headerlink" title="安装openssh-server"></a>安装openssh-server</h1><p>1、进入vk-gateone<br><code>docker exec -it vk-gateone /bin/bash</code></p><p>2、安装openssh-server</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br><span class="line">apt <span class="keyword">install</span> openssh-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>3、<code>vim /etc/ssh/sshd_config</code>，如下修改：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PasswordAuthentication</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>4、重启ssh<br><code>service ssh restart</code></p><p>5、添加用户</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">useradd</span> <span class="string">-m voidking -s /bin/bash</span></span><br><span class="line"><span class="attr">passwd</span> <span class="string">voidking</span></span><br><span class="line"><span class="attr">adduser</span> <span class="string">voidking sudo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装sudo命令（该容器内没有sudo）</span></span><br><span class="line"><span class="attr">apt</span> <span class="string">install sudo</span></span><br></pre></td></tr></table></figure><p>6、登录vk-gateone容器<br>点击 Terminal:SSH ，主机名和端口使用默认，输入用户名voidking和密码，即可登录vk-gateone。</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p>在gateone shell里，可以使用 ctrl+insert 进行复制，使用 shift+insert 进行粘贴。<br>如果在界面无法使用鼠标光标选中一些区域，那么可以在任意位置进行双击，即可激活光标选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GateOne简介&quot;&gt;&lt;a href=&quot;#GateOne简介&quot; class=&quot;headerlink&quot; title=&quot;GateOne简介&quot;&gt;&lt;/a&gt;GateOne简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Gate One is a web-based Terminal Emulator and SSH client that brings the power of the command line to the web. It requires no browser plugins and is built on top of a powerful plugin system that allows every aspect of its appearance and functionality to be customized.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文使用Docker安装配置GateOne，搭建一个Web Shell环境。&lt;br&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.130。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="ssh" scheme="https://www.voidking.com/tags/ssh/"/>
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>CKA和CKAD备考</title>
    <link href="https://www.voidking.com/dev-cka-ckad-prepare/"/>
    <id>https://www.voidking.com/dev-cka-ckad-prepare/</id>
    <published>2020-02-23T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h1><p><a href="https://www.voidking.com/dev-k8s-start/">《K8S入门篇》</a>一文中，定下了目标：拿到CKA和CKAD证书。转眼过去了大半年，但是一直没有付诸行动。今天，趁生日，立下flag：2020年5月1前考下CKA，2020年6月1日前考下CKAD。</p><h1 id="CKA和CKAD是啥？"><a href="#CKA和CKAD是啥？" class="headerlink" title="CKA和CKAD是啥？"></a>CKA和CKAD是啥？</h1><blockquote><p>The Certified Kubernetes Administrator (CKA) program was created by the Cloud Native Computing Foundation (CNCF), in collaboration with The Linux Foundation, to help develop the Kubernetes ecosystem. </p></blockquote><blockquote><p>The Certified Kubernetes Application Developer (CKAD) program has been developed by the Cloud Native Computing Foundation (CNCF), in collaboration with The Linux Foundation, to help expand the Kubernetes ecosystem through standardized training and certification. </p></blockquote><p>简而言之，CKA/CKAD是CNCF和Linux基金会联合推出的两个K8S考试认证。委托给<a href="https://www.examslocal.com/" target="_blank" rel="noopener">PSI</a>来进行监督考试。其中，CKA侧重于K8S管理，CKAD侧重于K8S开发。通过了这两个考试中的任意一个，就能证明你在K8S领域是一个人才；两个考试都通过了，那么涨薪还会远吗？</p><p>想要拿到CKA和CKAD证书，需要哪些准备工作？本文就来梳理一下。主要参考：</p><ul><li><a href="https://www.jianshu.com/p/a6a8a7b223fc" target="_blank" rel="noopener">CKA及CKAD认证考试经验分享</a></li><li><a href="https://blog.sctux.com/2019/01/07/road-to-cka/" target="_blank" rel="noopener">CKA认证获取历程</a></li><li><a href="https://medium.com/@sovmirich/preparing-and-passing-the-certified-kubernetes-administrator-cka-exam-4a76fa4b1c4" target="_blank" rel="noopener">How to prepare and pass CKA exam</a></li><li><a href="https://medium.com/@sanju.nitt/how-to-prepare-for-cka-and-ckad-38d029733ca6" target="_blank" rel="noopener">How to prepare for CKA and CKAD exam ?</a></li><li><a href="https://www.udemy.com/user/mumshad-mannambeth/" target="_blank" rel="noopener">Mumshad Mannambeth Courses</a></li></ul><a id="more"></a><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>报名网址：<a href="https://www.cncf.io/certification/cka/" target="_blank" rel="noopener">Certified Kubernetes Administrator (CKA) Program</a>和<a href="https://www.cncf.io/certification/ckad/" target="_blank" rel="noopener">Certified Kubernetes Application Developer (CKAD) Program</a>。报名时使用折扣码<code>DEVOPS15</code>可以获得15%的折扣。</p><p>报名时需要支持海外支付的信用卡（VISA或者MasterCard）。</p><p>稳定的科学上网工具。</p><p>在约定的考试时间登录考试系统。</p><p>硬件检测：使用Chrome浏览器访问<a href="https://www.examslocal.com/ScheduleExam/Home/CompatibilityCheck" target="_blank" rel="noopener">CompatibilityCheck</a>，选择 ”Linux Foundation” as the Exam Sponsor and “CKA” as the Exam。</p><p>按照考官要求打开摄像头和麦克风，并且共享桌面。</p><p>身份检测：考官查看考生证件，比如护照（身份证不行，需要有照片和Latin字母写的全名）。</p><p>环境检测：考官通过摄像头检查房间，要求房间只有考生一个人，桌子只能放电脑，没有其他东西。</p><p>软件检测：考官要求打开任务管理器，确认除浏览器之外的没有其他任务，确认无误后考试开始。</p><p>要求Chrome浏览器当前只能有一个tab页（就是考试系统），考试过程中可以再打开一个tap页用于访问<a href="https://kubernetes.io/docs/" target="_blank" rel="noopener">Kubernetes文档</a>，就是说考试全程最多两个tab页。</p><p>CKA一共180分钟，25道题；CKAD一共120分钟，20道题。</p><p>考试的网页一半是试题，一半是<a href="https://github.com/liftoff/GateOne" target="_blank" rel="noopener">GateOne</a>的终端界面。</p><p>考试中不能喝水、吃东西，可以申请休息。</p><p>考试结束后，36个小时之内，CNCF就会通过邮件告诉考生成绩。CKA分数大于74%则通过考试，CKAD分数大于66%则为通过考试，并且附件包含证书。如果考试不通过，考生账号上就会有一次一年内Free Retake的机会。</p><p>更多关于考试及考试环境的注意事项，可参见官方的<a href="http://training.linuxfoundation.org/go//Important-Tips-CKA-CKAD" target="_blank" rel="noopener">Exam Tips</a>、<a href="https://www.cncf.io/certification/candidate-handbook" target="_blank" rel="noopener">Candidate Handbook</a>、<a href="https://www.cncf.io/certification/cka/faq/" target="_blank" rel="noopener">CNCF FAQ</a>。</p><h1 id="报名和约考"><a href="#报名和约考" class="headerlink" title="报名和约考"></a>报名和约考</h1><p>1、支付完成后，跳转到<a href="https://portal.linuxfoundation.org/portal/kubernetes" target="_blank" rel="noopener">Certification Status</a>页面。<br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/status.png" alt=""></p><p>2、按照提示，<a href="https://www.examslocal.com/ScheduleExam/Home/CompatibilityCheck" target="_blank" rel="noopener">Check System Requirements</a>，验证成功后以后也可以再次验证。<br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/check.jpg?imageView2/0/w/700" alt=""></p><p>3、点击 <a href="https://www.examslocal.com/ScheduleExam/Home" target="_blank" rel="noopener">Schedule Exam</a>，跳转到考试时间安排页面，选择一个考试时间。<br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/schedule.jpg?imageView2/0/w/700" alt=""><br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/time1.jpg?imageView2/0/w/700" alt=""><br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/time2.jpg?imageView2/0/w/700" alt=""><br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/agreement.jpg?imageView2/0/w/700" alt=""><br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/confirm.jpg?imageView2/0/w/700" alt=""></p><p>4、点击 <a href="https://training.linuxfoundation.org/cncf-certification-candidate-resources/" target="_blank" rel="noopener">Get Candidate Handbook</a>，获取考试手册。</p><p>5、点击 <a href="https://portal.linuxfoundation.org/portal/verify_name" target="_blank" rel="noopener">Verify Name</a>，确认姓名，以后会出现在证书上。<br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/name.jpg?imageView2/0/w/700" alt=""></p><p>6、点击 <a href="https://training.linuxfoundation.org/cncf-certification-candidate-resources/" target="_blank" rel="noopener">Important Tips</a>，获取帮助提示。</p><p>7、点击右侧 <a href="https://www.examslocal.com/Candidate" target="_blank" rel="noopener">Schedule Exam</a>，即可看到考试信息，包括考试的时间、倒计时、确认码、考生ID等。<br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/info.jpg?imageView2/0/w/700" alt=""></p><p>以上，报名和约考完成。</p><h1 id="技能Get"><a href="#技能Get" class="headerlink" title="技能Get"></a>技能Get</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>浙江大学SEL实验室编写的《Docker容器与容器云》<br><a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker Documentation</a><br><a href="https://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">菜鸟教程之Docker教程</a><br><a href="https://www.katacoda.com/courses/docker" target="_blank" rel="noopener">Learn Docker &amp; Containers using Interactive Browser</a></p><h2 id="K8S"><a href="#K8S" class="headerlink" title="K8S"></a>K8S</h2><p>《Kubernetes权威指南：从Docker到Kubernetes实践全接触 第4版》<br><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noopener">Kubernetes Documentation</a><br><a href="https://www.kubernetes.org.cn/" target="_blank" rel="noopener">kubernetes中文社区</a><br><a href="https://bbs.huaweicloud.com/webinar/91fadcd3ea2a435f91771fc13d5136b8" target="_blank" rel="noopener">华为云-Cloud Native Lives</a><br><a href="https://edu.aliyun.com/roadmap/cloudnative?spm=a2c6h.12873581.1367615.1.e9cf115eVcBAsC" target="_blank" rel="noopener">阿里云-云原生技术公开课</a><br><a href="https://edu.aliyun.com/course/1651/lesson/list?spm=a2c6h.12873581.1367615.2.e9cf115eVcBAsC" target="_blank" rel="noopener">阿里云-云原生技术公开课（备用地址）</a><br><a href="https://www.udemy.com/course/certified-kubernetes-administrator-with-practice-tests/" target="_blank" rel="noopener">Certified Kubernetes Administrator (CKA) with Practice Tests</a><br><a href="https://kodekloud.com/courses/enrolled/675080" target="_blank" rel="noopener">Labs - Certified Kubernetes Administrator with Practice Tests</a><br><a href="https://www.udemy.com/course/certified-kubernetes-application-developer/" target="_blank" rel="noopener">Kubernetes Certified Application Developer (CKAD) with Tests</a><br><a href="https://kodekloud.com/courses/enrolled/675122" target="_blank" rel="noopener">Labs - Certified Kubernetes Application Developer</a><br><a href="https://github.com/cncf/curriculum" target="_blank" rel="noopener">cka&amp;cakd考纲-curriculum</a><br><a href="http://www.kubernet.io/" target="_blank" rel="noopener">Studying for the Certified Kubernetes Administrator Exam</a><br><a href="https://kubernetes.io/docs/tasks/" target="_blank" rel="noopener">K8S Tasks</a><br><a href="https://www.katacoda.com/courses/kubernetes" target="_blank" rel="noopener">Learn Kubernetes using Interactive Browser-Based Scenarios</a><br><a href="https://labs.play-with-k8s.com/" target="_blank" rel="noopener">Play with Kubernetes</a><br><a href="https://killer.sh/" target="_blank" rel="noopener">CKA CKAD Simulator</a></p><h1 id="k8s-tool"><a href="#k8s-tool" class="headerlink" title="k8s-tool"></a>k8s-tool</h1><p>备考的过程中，完善自己的<a href="https://github.com/voidking/k8s-tool.git" target="_blank" rel="noopener">k8s-tool</a>，考试的时候可以使用。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="5月19日更新"><a href="#5月19日更新" class="headerlink" title="5月19日更新"></a>5月19日更新</h2><p>三个月忙碌的早晚，无休的周末，终于在今天早上，收到了CKAD的证书。加上4月份拿到的CKA证书，目标达成！CKA考了90%（74%通过），CKAD考了89%（66%通过）。<br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/CKA_Certificate.jpg?imageView2/0/w/800" alt=""><br><img src="http://cdn.voidking.com/@/imgs/cka-ckad-prepare/CKAD_Certificate.jpg?imageView2/0/w/800" alt=""></p><h2 id="考试心得"><a href="#考试心得" class="headerlink" title="考试心得"></a>考试心得</h2><p>CKA和CKAD有什么差别？<br>1、考试内容有重叠，但是也有各自独立的内容。比如CKA会考etcd和k8s部署相关的内容，CKAD不会涉及。CKAD会有cronjob和ha的内容，CKA不会涉及。<br>2、CKAD比CKA难度更大一些。考过了CKA，本以为可以轻松拿下CKAD，结果考试时发现CKAD的题目更复杂一些，花费时间更长。后来想想也合理，毕竟CKA需要74分通过，而CKAD只需要66分就可以通过。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flag&quot;&gt;&lt;a href=&quot;#Flag&quot; class=&quot;headerlink&quot; title=&quot;Flag&quot;&gt;&lt;/a&gt;Flag&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-k8s-start/&quot;&gt;《K8S入门篇》&lt;/a&gt;一文中，定下了目标：拿到CKA和CKAD证书。转眼过去了大半年，但是一直没有付诸行动。今天，趁生日，立下flag：2020年5月1前考下CKA，2020年6月1日前考下CKAD。&lt;/p&gt;
&lt;h1 id=&quot;CKA和CKAD是啥？&quot;&gt;&lt;a href=&quot;#CKA和CKAD是啥？&quot; class=&quot;headerlink&quot; title=&quot;CKA和CKAD是啥？&quot;&gt;&lt;/a&gt;CKA和CKAD是啥？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;The Certified Kubernetes Administrator (CKA) program was created by the Cloud Native Computing Foundation (CNCF), in collaboration with The Linux Foundation, to help develop the Kubernetes ecosystem. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The Certified Kubernetes Application Developer (CKAD) program has been developed by the Cloud Native Computing Foundation (CNCF), in collaboration with The Linux Foundation, to help expand the Kubernetes ecosystem through standardized training and certification. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，CKA/CKAD是CNCF和Linux基金会联合推出的两个K8S考试认证。委托给&lt;a href=&quot;https://www.examslocal.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PSI&lt;/a&gt;来进行监督考试。其中，CKA侧重于K8S管理，CKAD侧重于K8S开发。通过了这两个考试中的任意一个，就能证明你在K8S领域是一个人才；两个考试都通过了，那么涨薪还会远吗？&lt;/p&gt;
&lt;p&gt;想要拿到CKA和CKAD证书，需要哪些准备工作？本文就来梳理一下。主要参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/a6a8a7b223fc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CKA及CKAD认证考试经验分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.sctux.com/2019/01/07/road-to-cka/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CKA认证获取历程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@sovmirich/preparing-and-passing-the-certified-kubernetes-administrator-cka-exam-4a76fa4b1c4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to prepare and pass CKA exam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@sanju.nitt/how-to-prepare-for-cka-and-ckad-38d029733ca6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to prepare for CKA and CKAD exam ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.udemy.com/user/mumshad-mannambeth/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mumshad Mannambeth Courses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="cka" scheme="https://www.voidking.com/tags/cka/"/>
    
      <category term="ckad" scheme="https://www.voidking.com/tags/ckad/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用Gulp压缩静态资源</title>
    <link href="https://www.voidking.com/dev-hexo-gulp/"/>
    <id>https://www.voidking.com/dev-hexo-gulp/</id>
    <published>2020-02-08T10:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gulp简介"><a href="#Gulp简介" class="headerlink" title="Gulp简介"></a>Gulp简介</h1><p>gulp是一个自动化构建工具，能够强化我们的前端工作流。</p><blockquote><p>gulp is an open-source JavaScript toolkit created by Eric Schoffstall used as a streaming build system (similar to a more package-focussed Make) in front-end web development.</p></blockquote><blockquote><p>It is a task runner built on Node.js and npm, used for automation of time-consuming and repetitive tasks involved in web development like minification, concatenation, cache busting, unit testing, linting, optimization, etc.</p></blockquote><blockquote><p>gulp uses a code-over-configuration approach to define its tasks and relies on its small, single-purpose plugins to carry them out. The gulp ecosystem includes more than 3500 such plugins.</p></blockquote><p>更多内容，参考<a href="https://en.wikipedia.org/wiki/Gulp.js" target="_blank" rel="noopener">wikipedia-gulp.js</a>、<a href="https://gulpjs.com/" target="_blank" rel="noopener">Gulp官网</a>和<a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp中文网</a>。<br>本文中，会使用gulp来压缩hexo生成的静态资源文件，加快站点的访问速度。</p><a id="more"></a><h1 id="安装配置gulp"><a href="#安装配置gulp" class="headerlink" title="安装配置gulp"></a>安装配置gulp</h1><p>1、安装gulp<br><code>npm install --global gulp-cli</code></p><p>2、安装gulp模块</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>gulp --save</span><br><span class="line">npm <span class="keyword">install </span>gulp-htmlclean gulp-htmlmin gulp-clean-css gulp-uglify gulp-imagemin --save</span><br><span class="line">npm <span class="keyword">install </span>gulp-<span class="keyword">babel </span><span class="keyword">babel-preset-env </span><span class="keyword">babel-preset-mobx </span>--save</span><br><span class="line">npm <span class="keyword">install </span>-D @<span class="keyword">babel/core </span>@<span class="keyword">babel/preset-react </span>@<span class="keyword">babel/preset-env </span>--save</span><br></pre></td></tr></table></figure><p>最终生成的package.json为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">    <span class="attr">"clean"</span>: <span class="string">"hexo clean"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"hexo server"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"4.2.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.7.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-mobx"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^4.0.2"</span>,</span><br><span class="line">    <span class="attr">"gulp-babel"</span>: <span class="string">"^8.0.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-clean-css"</span>: <span class="string">"^4.2.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-htmlclean"</span>: <span class="string">"^2.7.22"</span>,</span><br><span class="line">    <span class="attr">"gulp-htmlmin"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-imagemin"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-uglify"</span>: <span class="string">"^3.0.2"</span>,</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-baidu-sitemap"</span>: <span class="string">"^0.1.6"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-feed"</span>: <span class="string">"^2.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-searchdb"</span>: <span class="string">"^1.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-sitemap"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-neat"</span>: <span class="string">"^1.0.4"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^1.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.8.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.8.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-react"</span>: <span class="string">"^7.8.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在hexo目录创建gulpfile.js，内容为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">let</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</span><br><span class="line"><span class="keyword">let</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"><span class="keyword">let</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>)</span><br><span class="line"><span class="keyword">let</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>) <span class="comment">/* 转换为es2015 */</span></span><br><span class="line"><span class="keyword">let</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</span><br><span class="line"><span class="keyword">let</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="string">'./public'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配模式， **/*代表匹配所有目录下的所有文件</span></span><br><span class="line"><span class="keyword">const</span> pattern = <span class="string">'**/*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    <span class="comment">// 匹配所有 .html结尾的文件</span></span><br><span class="line">    .src(<span class="string">`<span class="subst">$&#123;root&#125;</span>/<span class="subst">$&#123;pattern&#125;</span>.html`</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    <span class="comment">// 匹配所有 .css结尾的文件</span></span><br><span class="line">    .src(<span class="string">`<span class="subst">$&#123;root&#125;</span>/<span class="subst">$&#123;pattern&#125;</span>.css`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      cleanCSS(&#123;</span><br><span class="line">        compatibility: <span class="string">'ie8'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    <span class="comment">// 匹配所有 .js结尾的文件</span></span><br><span class="line">    .src(<span class="string">`<span class="subst">$&#123;root&#125;</span>/<span class="subst">$&#123;pattern&#125;</span>.js`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      babel(&#123;</span><br><span class="line">        presets: [<span class="string">'env'</span>]</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    <span class="comment">// 匹配public/images目录下的所有文件</span></span><br><span class="line">    .src(<span class="string">`<span class="subst">$&#123;root&#125;</span>/images/<span class="subst">$&#123;pattern&#125;</span>`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      imagemin(</span><br><span class="line">        [</span><br><span class="line">          imagemin.gifsicle(&#123; <span class="attr">optimizationLevel</span>: <span class="number">3</span> &#125;),</span><br><span class="line">          imagemin.jpegtran(&#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">          imagemin.optipng(&#123; <span class="attr">optimizationLevel</span>: <span class="number">7</span> &#125;),</span><br><span class="line">          imagemin.svgo()</span><br><span class="line">        ],</span><br><span class="line">        &#123; <span class="attr">verbose</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public/images'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>))</span><br></pre></td></tr></table></figure><p>4、执行压缩<br><code>gulp</code></p><h1 id="命令精简"><a href="#命令精简" class="headerlink" title="命令精简"></a>命令精简</h1><p>使用了gulp时候，构建发布需要四个命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">gulp</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>这四个命令，可以都写在package.json。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; gulp"</span>,</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建只需要执行<code>npm run build</code>，构建发布只需要执行<code>npm run deploy</code>。</p><h1 id="travis配置"><a href="#travis配置" class="headerlink" title="travis配置"></a>travis配置</h1><p>对应的，修改.travis.yml配置为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line"><span class="keyword">language</span>: node_js</span><br><span class="line">node_j<span class="variable">s:</span></span><br><span class="line">  - <span class="number">10.16</span>.<span class="number">3</span></span><br><span class="line">cache: npm</span><br><span class="line">branche<span class="variable">s:</span></span><br><span class="line">  <span class="keyword">only</span>:</span><br><span class="line">    - master # build master branch <span class="keyword">only</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">en</span><span class="variable">v:</span></span><br><span class="line"> globa<span class="variable">l:</span></span><br><span class="line">   - HEXO_BACKUP_REPO: github.<span class="keyword">com</span>/voidking/hexo-backup.git</span><br><span class="line">   - HEXO_THEME_REPO: github.<span class="keyword">com</span>/voidking/hexo-theme-<span class="keyword">next</span>.git</span><br><span class="line">   - GITHUB_PAGES_REPO: github.<span class="keyword">com</span>/voidking/voidking.github.io.git</span><br><span class="line">   - VOIDKING_REPO: github.<span class="keyword">com</span>/voidking/voidking.git</span><br><span class="line"></span><br><span class="line">before_instal<span class="variable">l:</span></span><br><span class="line">  - npm install hexo -g</span><br><span class="line">  - npm install gulp-cli -g</span><br><span class="line"></span><br><span class="line">instal<span class="variable">l:</span></span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line"><span class="keyword">scrip</span><span class="variable">t:</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;HEXO_THEME_REPO&#125; themes/<span class="keyword">next</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;GITHUB_TOKEN&#125;@$&#123;HEXO_BACKUP_REPO&#125; hexo-backup</span><br><span class="line">  - mv hexo-backup/<span class="keyword">source</span> .</span><br><span class="line">  - rm -rf <span class="keyword">source</span>/private</span><br><span class="line">  - npm run build</span><br><span class="line"></span><br><span class="line">after_succes<span class="variable">s:</span></span><br><span class="line">  - git config --<span class="keyword">global</span> user.name <span class="string">"voidking"</span></span><br><span class="line">  - git config --<span class="keyword">global</span> user.email <span class="string">"voidking@qq.com"</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125; voidking</span><br><span class="line">  - unalias <span class="keyword">cp</span></span><br><span class="line">  - <span class="keyword">cp</span> -rf public/* voidking</span><br><span class="line">  - <span class="keyword">cd</span> voidking</span><br><span class="line">  - git <span class="built_in">add</span> .</span><br><span class="line">  - git commit -<span class="keyword">m</span> <span class="string">"Travis CI Auto Builder"</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125;"</span> master:master</span><br></pre></td></tr></table></figure><h1 id="精简search-xml"><a href="#精简search-xml" class="headerlink" title="精简search.xml"></a>精简search.xml</h1><p>html、css和js都压缩了，很开心。但是，还有一个大文件没有压缩，就是本地搜索的DB文件search.xml。我的博客有接近600篇文章，这个search.xml文件的大小为7.5M，很大。<br>打开search.xml文件，发现里面不止包含文章内容，还包含html标签。参考<a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a>，发现可以设置不生成标签。</p><h2 id="修改localsearch配置"><a href="#修改localsearch配置" class="headerlink" title="修改localsearch配置"></a>修改localsearch配置</h2><p>1、修改<code>hexo/_config.yml</code>的localsearch配置为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">striptags</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>2、重新生成search.xml文件，新的文件只有3.5M。</p><p>3、修改local-search.js<br>为了正常使用搜索功能，需要修改hexo主题的local-search.js。如果不修改的话，搜索时只搜索标题，不会搜索内容。编辑<code>next/source/js/local-search.js</code>，如下修改：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// line <span class="number">120</span></span><br><span class="line">// <span class="keyword">let</span> content = <span class="class"><span class="keyword">data</span>.content ? <span class="keyword">data</span>.content.trim().replace(/&lt;[^&gt;]+&gt;/<span class="title">g</span>, '') : '';</span></span><br><span class="line"><span class="title">let</span> content = <span class="class"><span class="keyword">data</span>.content;</span></span><br></pre></td></tr></table></figure><p>以上，实现了search.xml的精简，nice。</p><h2 id="自定义精简"><a href="#自定义精简" class="headerlink" title="自定义精简"></a>自定义精简</h2><p>但是，3.5M依然很大，能不能再精简一下？可以。<br>1、localsearch的format改回html。</p><p>2、修改xml_generator.js<br>编辑<code>hexo/node_modules/hexo-generator-searchdb/lib/xml_generator.js</code>，定义自己想要删除的字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> nunjucks = <span class="built_in">require</span>(<span class="string">'nunjucks'</span>);</span><br><span class="line"><span class="keyword">var</span> env = <span class="keyword">new</span> nunjucks.Environment();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> searchTmplSrc = path.join(__dirname, <span class="string">'../templates/search.xml'</span>);</span><br><span class="line"><span class="keyword">var</span> searchTmpl = nunjucks.compile(fs.readFileSync(searchTmplSrc, <span class="string">'utf8'</span>), env);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stripe_code_line_num = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123; <span class="comment">// 去除代码</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;figure class="highlight.*?&lt;\/figure&gt;/ig</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stripe = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123; <span class="comment">// 去除html标签</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/(&lt;([^&gt;]+)&gt;)/ig</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> minify = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123; <span class="comment">// 压缩成一行</span></span><br><span class="line">    <span class="keyword">return</span> str.trim().replace(<span class="regexp">/\n/g</span>, <span class="string">' '</span>).replace(<span class="regexp">/\s+/g</span>, <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> database = <span class="built_in">require</span>(<span class="string">'./database'</span>)(locals, config);</span><br><span class="line">  database.forEach( <span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">    element.content = minify(stripe(stripe_code_line_num(element.content)));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> xml = searchTmpl.render(&#123;</span><br><span class="line">    articles: database,</span><br><span class="line">    config  : config.search</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    path: config.search.path,</span><br><span class="line">    data: xml</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、重新生成search.xml，这次只有2.5M，nice。</p><p>以上两种精简search.xml的方法都很好，这里我选择使用修改localsearch format的方法。因为如果在xml_generator.js不删除文章中的代码，两种方法的压缩结果基本相同，而方法一通用性更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gulp简介&quot;&gt;&lt;a href=&quot;#Gulp简介&quot; class=&quot;headerlink&quot; title=&quot;Gulp简介&quot;&gt;&lt;/a&gt;Gulp简介&lt;/h1&gt;&lt;p&gt;gulp是一个自动化构建工具，能够强化我们的前端工作流。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gulp is an open-source JavaScript toolkit created by Eric Schoffstall used as a streaming build system (similar to a more package-focussed Make) in front-end web development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a task runner built on Node.js and npm, used for automation of time-consuming and repetitive tasks involved in web development like minification, concatenation, cache busting, unit testing, linting, optimization, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;gulp uses a code-over-configuration approach to define its tasks and relies on its small, single-purpose plugins to carry them out. The gulp ecosystem includes more than 3500 such plugins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://en.wikipedia.org/wiki/Gulp.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wikipedia-gulp.js&lt;/a&gt;、&lt;a href=&quot;https://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gulp官网&lt;/a&gt;和&lt;a href=&quot;https://www.gulpjs.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gulp中文网&lt;/a&gt;。&lt;br&gt;本文中，会使用gulp来压缩hexo生成的静态资源文件，加快站点的访问速度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="前端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="gulp" scheme="https://www.voidking.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置Travis CI自动发布</title>
    <link href="https://www.voidking.com/dev-hexo-travis-ci/"/>
    <id>https://www.voidking.com/dev-hexo-travis-ci/</id>
    <published>2020-02-02T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CI-CD-and-CD"><a href="#CI-CD-and-CD" class="headerlink" title="CI, CD and CD"></a>CI, CD and CD</h1><p>CI，CONTINUOUS INTEGRATION，持续集成。<br>在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。</p><p>CD，CONTINUOUS DELIVERY，持续交付。<br>持续交付就是应用发布出去的过程。这个过程可以确保我们尽可能快的实现交付。这就意味着除了自动化测试，我们还需要有自动化的发布流，以及通过一个按键就可以随时随地实现应用的部署上线。为了发挥持续交付的优势，一般需要先进行小批量发布，尽快部署到生产线，以便在出现问题时方便进行故障排除。</p><p>CD，CONTINUOUS DEPLOYMENT，持续部署。<br>持续部署是持续集成和持续交付的合并。当开发人员在主分支中合并一个提交时，会触发工作流，包括构建、单元测试、预发布、验收测试、生产发布、冒烟测试等。如果一切顺利，则成功部署到生产环境中。如果某个工作流失败，则不会部署到生产环境。</p><p>更多关于CI/CD内容参考<a href="http://www.ttlsa.com/news/ci-cd-cd/" target="_blank" rel="noopener">详解CI、CD &amp; CD</a>和<a href="https://linux.cn/article-9926-1.html" target="_blank" rel="noopener">什么是 CI/CD？</a>，关于发布环境的划分参考<a href="https://en.wikipedia.org/wiki/Deployment_environment" target="_blank" rel="noopener">Deployment environment</a>。</p><p>在gitlab中，无论是CI、CD还是CD，都可以通过配置gitlab-ci.yml来实现。而github，在2019年8月8日也支持内置的CI/CD了。但是本文中，并不是使用github内置的CI/CD，而是使用Travis CI来实现hexo的自动发布。</p><p><a href="https://www.voidking.com/hexo-multi-git/">《Hexo配置多个git仓库》</a>一文中已经学习了hexo配置多个git仓库的方法，发布项目也很简单。为什么还需要hexo的自动发布？因为发布流程还可以更简单。而且，现在的发布方式，如果想要多台电脑同时使用，那么每台电脑都需要配置hexo环境，很麻烦。如果本地只负责写写markdown文件，而构建发布都放到云端，是不是更加美好？本文要做的，就是这样一件事。</p><a id="more"></a><h1 id="安装配置本地hexo"><a href="#安装配置本地hexo" class="headerlink" title="安装配置本地hexo"></a>安装配置本地hexo</h1><p>参考<a href="https://www.voidking.com/dev-hexo-build-environment-2018-05/">《Hexo环境搭建2018年5月版》</a>，安装v10.16.3版本的node，创建hexo项目，然后把需要的依赖写入package.json：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>接下来改造hexo配置，用于Travis CI发布。</p><p>1、创建hexo-deploy项目<br>在github创建public项目hexo-deploy，git clone到本地，然后把hexo项目里的内容剪切到hexo-deploy目录。</p><p>2、配置config.yml<br>编辑config.yml，根据自己的需要进行配置。</p><p>3、清理文件<br>hexo-deploy目录里只需要保留：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.git</span></span><br><span class="line"><span class="selector-class">.gitignore</span></span><br><span class="line"><span class="selector-tag">package</span><span class="selector-class">.json</span></span><br><span class="line">_<span class="selector-tag">config</span><span class="selector-class">.yml</span></span><br><span class="line"><span class="selector-tag">README</span><span class="selector-class">.md</span></span><br></pre></td></tr></table></figure><h1 id="配置travis-yml"><a href="#配置travis-yml" class="headerlink" title="配置travis.yml"></a>配置travis.yml</h1><p>主要参考<a href="https://www.jianshu.com/p/5691815b81b6" target="_blank" rel="noopener">使用Travis CI持续部署Hexo博客</a>和<a href="https://hexo.io/zh-tw/docs/github-pages" target="_blank" rel="noopener">將 Hexo 部署到 GitHub Pages</a>。<br>已知 voidking.github.io 和 voidking 是hexo发布后的git仓库（public），hexo-backup是存储markdown文件的git仓库（private）。</p><p>1、安装Travis CI插件<br>在github添加<a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI插件</a>，并且在<a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>配置Travis CI的权限。</p><p>2、生成access token<br>访问github的<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a>页面，Generate new token。Note输入travis，Select scope选择repo，然后点击Generate token。生成了一个token，保存它。<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci/newtoken.jpg?imageView2/0/w/700" alt=""></p><p>3、添加access token<br>访问<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI Pro</a>，找到hexo-deploy项目，Settings，在Environment Variables一栏填入Name为<code>GITHUB_TOKEN</code>，VALUE为github的access token。<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci/env.jpg?imageView2/0/w/700" alt=""></p><p>3、在hexo-deploy目录下添加<code>.travis.yml</code>文件，内容为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line"><span class="keyword">language</span>: node_js</span><br><span class="line">node_j<span class="variable">s:</span></span><br><span class="line">  - <span class="number">10.16</span>.<span class="number">3</span></span><br><span class="line">cache: npm</span><br><span class="line">branche<span class="variable">s:</span></span><br><span class="line">  <span class="keyword">only</span>:</span><br><span class="line">    - master # build master branch <span class="keyword">only</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">en</span><span class="variable">v:</span></span><br><span class="line"> globa<span class="variable">l:</span></span><br><span class="line">   - HEXO_BACKUP_REPO: github.<span class="keyword">com</span>/voidking/hexo-backup.git</span><br><span class="line">   - HEXO_THEME_REPO: github.<span class="keyword">com</span>/voidking/hexo-theme-<span class="keyword">next</span>.git</span><br><span class="line">   - GITHUB_PAGES_REPO: github.<span class="keyword">com</span>/voidking/voidking.github.io.git</span><br><span class="line">   - VOIDKING_REPO: github.<span class="keyword">com</span>/voidking/voidking.git</span><br><span class="line"></span><br><span class="line">before_instal<span class="variable">l:</span></span><br><span class="line">  - npm install hexo -g</span><br><span class="line"></span><br><span class="line">instal<span class="variable">l:</span></span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line"><span class="keyword">scrip</span><span class="variable">t:</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;HEXO_THEME_REPO&#125; themes/<span class="keyword">next</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;GITHUB_TOKEN&#125;@$&#123;HEXO_BACKUP_REPO&#125; hexo-backup</span><br><span class="line">  - mv hexo-backup/<span class="keyword">source</span> .</span><br><span class="line">  - rm -rf <span class="keyword">source</span>/private</span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line">after_succes<span class="variable">s:</span></span><br><span class="line">  - git config --<span class="keyword">global</span> user.name <span class="string">"voidking"</span></span><br><span class="line">  - git config --<span class="keyword">global</span> user.email <span class="string">"voidking@qq.com"</span></span><br><span class="line">  - <span class="keyword">cd</span> ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git <span class="built_in">add</span> .</span><br><span class="line">  - git commit -<span class="keyword">m</span> <span class="string">"Travis CI Auto Builder"</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125;"</span> master:master</span><br><span class="line">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;VOIDKING_REPO&#125;"</span> master:master</span><br></pre></td></tr></table></figure><h1 id="hexo发布"><a href="#hexo发布" class="headerlink" title="hexo发布"></a>hexo发布</h1><p>在hexo-deploy项目中，修改README.md（建议添加日期信息），然后提交代码，触发发布。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">"20200202deploy"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>然后打开<a href="https://travis-ci.com/voidking/hexo-deploy" target="_blank" rel="noopener">Travis CI - hexo-deploy</a>，即可看到构建发布的日志。<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci/log.jpg?imageView2/0/w/800" alt=""><br>如果构建发布出错，根据提示修改发布脚本或者markdown文件即可。</p><p>至此，Hexo配置Travis CI自动发布完成！</p><h1 id="域名404问题"><a href="#域名404问题" class="headerlink" title="域名404问题"></a>域名404问题</h1><p>发布完成，出现了一个神奇的问题，<a href="http://www.voidking.com">www.voidking.com</a> 域名404。<br>查看github pages配置，发现自定义域名变回了 voidking.github.io 。<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci/pages.jpg?imageView2/0/w/700" alt=""><br>神奇了！莫非，是因为force push刷掉了git仓库的commit？那就保留commit试试。<br>修改.travis.yml的aftersuccess部分：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">after_success:</span><br><span class="line">  -<span class="ruby"> git config --global user.name <span class="string">"voidking"</span></span></span><br><span class="line"><span class="ruby">  - git config --global user.email <span class="string">"voidking@qq.com"</span></span></span><br><span class="line"><span class="ruby">  - git clone <span class="symbol">https:</span>/<span class="regexp">/$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125; voidking</span></span></span><br><span class="line"><span class="ruby">  - unalias cp</span></span><br><span class="line"><span class="ruby">  - cp -rf public/* voidking</span></span><br><span class="line"><span class="ruby">  - cd voidking</span></span><br><span class="line"><span class="ruby">  - git add .</span></span><br><span class="line"><span class="ruby">  - git commit -m <span class="string">"Travis CI Auto Builder"</span></span></span><br><span class="line"><span class="ruby">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125;"</span> <span class="symbol">master:</span>master</span></span><br><span class="line"><span class="ruby">  - cd ../public</span></span><br><span class="line"><span class="ruby">  - git init</span></span><br><span class="line"><span class="ruby">  - git add .</span></span><br><span class="line"><span class="ruby">  - git commit -m <span class="string">"Travis CI Auto Builder"</span></span></span><br><span class="line"><span class="ruby">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;VOIDKING_REPO&#125;"</span> <span class="symbol">master:</span>master</span></span><br></pre></td></tr></table></figure><p>保留commit之后，自定义域名果然不会再变化，nice。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CI-CD-and-CD&quot;&gt;&lt;a href=&quot;#CI-CD-and-CD&quot; class=&quot;headerlink&quot; title=&quot;CI, CD and CD&quot;&gt;&lt;/a&gt;CI, CD and CD&lt;/h1&gt;&lt;p&gt;CI，CONTINUOUS INTEGRATION，持续集成。&lt;br&gt;在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。&lt;/p&gt;
&lt;p&gt;CD，CONTINUOUS DELIVERY，持续交付。&lt;br&gt;持续交付就是应用发布出去的过程。这个过程可以确保我们尽可能快的实现交付。这就意味着除了自动化测试，我们还需要有自动化的发布流，以及通过一个按键就可以随时随地实现应用的部署上线。为了发挥持续交付的优势，一般需要先进行小批量发布，尽快部署到生产线，以便在出现问题时方便进行故障排除。&lt;/p&gt;
&lt;p&gt;CD，CONTINUOUS DEPLOYMENT，持续部署。&lt;br&gt;持续部署是持续集成和持续交付的合并。当开发人员在主分支中合并一个提交时，会触发工作流，包括构建、单元测试、预发布、验收测试、生产发布、冒烟测试等。如果一切顺利，则成功部署到生产环境中。如果某个工作流失败，则不会部署到生产环境。&lt;/p&gt;
&lt;p&gt;更多关于CI/CD内容参考&lt;a href=&quot;http://www.ttlsa.com/news/ci-cd-cd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详解CI、CD &amp;amp; CD&lt;/a&gt;和&lt;a href=&quot;https://linux.cn/article-9926-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;什么是 CI/CD？&lt;/a&gt;，关于发布环境的划分参考&lt;a href=&quot;https://en.wikipedia.org/wiki/Deployment_environment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deployment environment&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在gitlab中，无论是CI、CD还是CD，都可以通过配置gitlab-ci.yml来实现。而github，在2019年8月8日也支持内置的CI/CD了。但是本文中，并不是使用github内置的CI/CD，而是使用Travis CI来实现hexo的自动发布。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/hexo-multi-git/&quot;&gt;《Hexo配置多个git仓库》&lt;/a&gt;一文中已经学习了hexo配置多个git仓库的方法，发布项目也很简单。为什么还需要hexo的自动发布？因为发布流程还可以更简单。而且，现在的发布方式，如果想要多台电脑同时使用，那么每台电脑都需要配置hexo环境，很麻烦。如果本地只负责写写markdown文件，而构建发布都放到云端，是不是更加美好？本文要做的，就是这样一件事。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="前端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/hexo/"/>
    
      <category term="基础" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="ci" scheme="https://www.voidking.com/tags/ci/"/>
    
      <category term="cd" scheme="https://www.voidking.com/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置多个git仓库</title>
    <link href="https://www.voidking.com/dev-hexo-multi-git/"/>
    <id>https://www.voidking.com/dev-hexo-multi-git/</id>
    <published>2020-02-01T20:00:00.000Z</published>
    <updated>2020-05-31T06:00:55.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>在经历过域名被封之后，今天又经历了搬瓦工服务器IP被封，我太难了。。。o(╥﹏╥)o<br>服务器IP被封，带来了三个问题：第一个是不能愉快地科学上网了；第二个是内网穿透不能使用了；第三个是自己的 <a href="http://www.voidking.com">www.voidking.com</a> 域名无法访问了。</p><p>对于问题一，暂时使用免费的公共飞机场。对于问题二，暂时使用百度服务器，但是因为没有备案，所以不能进行域名解析。对于问题三，就是本文要解决的问题之一。</p><a id="more"></a><h1 id="回到github"><a href="#回到github" class="headerlink" title="回到github"></a>回到github</h1><p>那么，因为服务器IP被封，域名无法访问怎么办？</p><p>方法一：再购买一个新的搬瓦工IP，或者再购买一个新的国外服务器。但是因为不想再花钱（就是这么抠），所以这个方法被否定了。<br>方法二：使用免费的git pages服务，比如github pages、gitlab pages、gitee pages等，并且把域名解析到git pages服务器。这里我选择最开始搭建hexo就使用的github pages，它支持免费的自定义域名和https。</p><p>参考<a href="https://www.voidking.com/dev-hexo-build-environment/">《Hexo环境搭建》</a>和<a href="https://www.voidking.com/dev-hexo-build-environment-2018-05/">《Hexo环境搭建2018年5月版》</a>，配置好github pages服务，并且配置域名的CNAME解析到 voidking.github.io ，开启强制https（github会自动申请ssl证书，点个赞）。</p><h1 id="百度收录问题"><a href="#百度收录问题" class="headerlink" title="百度收录问题"></a>百度收录问题</h1><p>除了访问速度慢一点之外，现在我的域名已经正常了，nice。但是，另外的问题出现了：百度搜索不到我的域名了！</p><p>使用<a href="https://ziyuan.baidu.com/crawltools/index?site=http://www.voidking.com/" target="_blank" rel="noopener">百度抓取诊断工具</a>诊断，发现抓取异常信息是拒绝访问，403 Forbidden。这是因为github屏蔽了百度蜘蛛，所以百度无法收录解析到github的域名。</p><p>浏览了一些文章，找到了解决办法：在DNSPod配置两个www的域名解析，线路类型“默认”解析到 voidking.github.io ，线路类型“百度”解析到一个百度可以抓取的地址，如下图。<br><img src="http://cdn.voidking.com/@/imgs/hexo-multi-git/type.jpg?imageView2/0/w/600" alt=""><br>也就是说，需要维护两个站点，两个站点分别处理来自不同线路的流量。其中一个站点建立在github，另外一个站点建立在哪儿呢？这里我选择<a href="https://zeit.co/" target="_blank" rel="noopener">ZEIT Now</a>。</p><p>理想是美好的，现实是残酷的！因为无论是github还是zeit，都需要验证域名解析，而它们都是境外服务器，所以都需要线路类型“境外”的CNAME解析，否则无法通过验证！尴尬了。。。只能选择其一。</p><p>为了百度的收录，看起来只能选择zeit了，不过zeit每个月只有20G的流量。为了在zeit流量用光后方便地切到github，因此还是需要维护两个站点。</p><h1 id="hexo配置多个git仓库"><a href="#hexo配置多个git仓库" class="headerlink" title="hexo配置多个git仓库"></a>hexo配置多个git仓库</h1><p>为了维护两个站点，所以每次更新，需要发布github pages和zeit。github pages的发布很方便，上传代码后直接就发布了；而zeit的发布有多种方式，其中一种方式是通过<a href="https://zeit.co/voidking/voidking/settings" target="_blank" rel="noopener">Deploy Hooks</a>触发。</p><p>如果github和zeit都使用 voidking.github.io 这一个git仓库，那么问题很简单。<code>hexo d</code>后，再访问一个url触发 Deploy Hooks就可以了。而zeit，不支持 voidking.github.io 这种项目名称，因此稍微麻烦一点。</p><p>1、新建git仓库<br>在github上再创建一个git仓库叫做voidking，import voidking.github.io仓库。</p><p>2、配置zeit关联<br>把voidking这个仓库和zeit做关联，并且发布项目，配置生成一个Deploy Hooks。</p><p>3、配置域名<br>按照提示绑定 <a href="http://www.voidking.com">www.voidking.com</a> 这个域名到zeit站点。</p><p>4、修改config.yml文件<br>修改hexo的config.yml文件中的deploy部分为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># github</span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">- type: git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//voidking.com/voidking/voidking.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br><span class="line">- type: git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//voidking.com/voidking/voidking.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><p>以上配置参考<a href="https://hexo.io/docs/one-command-deployment" target="_blank" rel="noopener">Hexo一键发布</a>。</p><p>5、发布项目<br>正常执行<code>hexo d</code>，静态资源代码会上传到两个git仓库中。<br>其中，voidking.github.io这个仓库就直接发布了。而voidking这个仓库想要发布到zeit上，还需要手动触发一下（访问Deploy Hooks的url）。</p><p>至此，hexo多个git仓库，多个站点配置完成。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果zeit上的流量用完了，可以在DNSPod上修改域名解析到github。虽然有延迟，但是对于个人使用来说足够了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h1&gt;&lt;p&gt;在经历过域名被封之后，今天又经历了搬瓦工服务器IP被封，我太难了。。。o(╥﹏╥)o&lt;br&gt;服务器IP被封，带来了三个问题：第一个是不能愉快地科学上网了；第二个是内网穿透不能使用了；第三个是自己的 &lt;a href=&quot;http://www.voidking.com&quot;&gt;www.voidking.com&lt;/a&gt; 域名无法访问了。&lt;/p&gt;
&lt;p&gt;对于问题一，暂时使用免费的公共飞机场。对于问题二，暂时使用百度服务器，但是因为没有备案，所以不能进行域名解析。对于问题三，就是本文要解决的问题之一。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="前端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
  </entry>
  
</feed>
