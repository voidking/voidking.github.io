<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VoidKing</title>
  
  <subtitle>好好学习，天天向上！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.voidking.com/"/>
  <updated>2020-03-31T02:52:57.999Z</updated>
  <id>https://www.voidking.com/</id>
  
  <author>
    <name>VoidKing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Harbor入门篇</title>
    <link href="https://www.voidking.com/dev-harbor-start/"/>
    <id>https://www.voidking.com/dev-harbor-start/</id>
    <published>2020-03-22T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Harbor简介"><a href="#Harbor简介" class="headerlink" title="Harbor简介"></a>Harbor简介</h1><blockquote><p>Harbor is an open source container image registry that secures images with role-based access control, scans images for vulnerabilities, and signs images as trusted. As a CNCF Incubating project, Harbor delivers compliance, performance, and interoperability to help you consistently and securely manage images across cloud native compute platforms like Kubernetes and Docker.</p></blockquote><p>更多内容参考<a href="https://goharbor.io/" target="_blank" rel="noopener">Harbor官网</a>。</p><a id="more"></a><h1 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>参考<a href="https://goharbor.io/docs/1.10/install-config/installation-prereqs/" target="_blank" rel="noopener">Harbor Installation Prerequisites</a></p><p>1、硬件需求<br>硬件最小需求：2C4G40G。<br>硬件推荐需求：4C8G160G。</p><p>2、软件需求<br>Docker engine，Version 17.06.0-ce+ or higher<br>Docker Compose，Version 1.18.0 or higher<br>Openssl，Latest is preferred</p><p>3、网络端口<br>444、4443和80</p><h2 id="下载安装Harbor"><a href="#下载安装Harbor" class="headerlink" title="下载安装Harbor"></a>下载安装Harbor</h2><p>1、访问<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">Harbor releases page</a>，下载需要的harbor版本，这里选择下载 harbor-offline-installer-v1.10.1.tgz</p><p>或者使用curl命令下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -C - -O -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/goharbor/</span>harbor<span class="regexp">/releases/</span>download<span class="regexp">/v1.10.1/</span>harbor-offline-installer-v1.<span class="number">10.1</span>.tgz</span><br></pre></td></tr></table></figure><p>2、解压</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xzvf</span> <span class="selector-tag">harbor-offline-installer-v1</span><span class="selector-class">.10</span><span class="selector-class">.1</span><span class="selector-class">.tgz</span></span><br><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">harbor</span></span><br></pre></td></tr></table></figure><p>3、配置harbor.yml<br>安装前修改harbor.yaml，参考<a href="https://goharbor.io/docs/1.10/install-config/configure-yml-file/" target="_blank" rel="noopener">Configure the Harbor YML File</a>，按需要如下几个字段：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: harbor.voidking.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line">http:</span><br><span class="line">  #<span class="built_in"> port </span><span class="keyword">for</span> http,<span class="built_in"> default </span>is 80. <span class="keyword">If</span> https enabled, this<span class="built_in"> port </span>will redirect <span class="keyword">to</span> https port</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># https related config</span></span><br><span class="line"><span class="comment"># https:</span></span><br><span class="line">  # https<span class="built_in"> port </span><span class="keyword">for</span> harbor,<span class="built_in"> default </span>is 443</span><br><span class="line">  #port: 443</span><br><span class="line">  # The path of cert <span class="keyword">and</span> key files <span class="keyword">for</span> nginx</span><br><span class="line">  #certificate: /your/certificate/path</span><br><span class="line">  #private_key: /your/private/key/path</span><br><span class="line"></span><br><span class="line"><span class="comment"># The initial password of Harbor admin</span></span><br><span class="line"><span class="comment"># It only works in first time to install harbor</span></span><br><span class="line"><span class="comment"># Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"></span><br><span class="line"><span class="comment"># The default data volume</span></span><br><span class="line">data_volume: /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Harbor DB configuration</span></span><br><span class="line">database:</span><br><span class="line">  # The password <span class="keyword">for</span> the root<span class="built_in"> user </span>of Harbor DB. Change this before any production use.</span><br><span class="line">  password: root123</span><br><span class="line">  # The maximum number of connections <span class="keyword">in</span> the idle<span class="built_in"> connection </span>pool. <span class="keyword">If</span> it &lt;=0, <span class="literal">no</span> idle connections are retained.</span><br><span class="line">  max_idle_conns: 50</span><br><span class="line">  # The maximum number of open connections <span class="keyword">to</span> the database. <span class="keyword">If</span> it &lt;= 0, then there is <span class="literal">no</span> limit on the number of open connections.</span><br><span class="line">  # Note: the<span class="built_in"> default </span>number of connections is 100 <span class="keyword">for</span> postgres.</span><br><span class="line">  max_open_conns: 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log configurations</span></span><br><span class="line">log:</span><br><span class="line">  # options are debug, info, warning, error, fatal</span><br><span class="line">  level: info</span><br><span class="line">  # configs <span class="keyword">for</span> logs <span class="keyword">in</span> local storage</span><br><span class="line">  local:</span><br><span class="line">    # Log files are rotated log_rotate_count times before being removed. <span class="keyword">If</span> count is 0, old versions are removed rather than rotated.</span><br><span class="line">    rotate_count: 50</span><br><span class="line">    # Log files are rotated only <span class="keyword">if</span> they grow bigger than log_rotate_size bytes. <span class="keyword">If</span> size is followed by k, the size is assumed <span class="keyword">to</span> be <span class="keyword">in</span> kilobytes.</span><br><span class="line">    # <span class="keyword">If</span> the M is used, the size is <span class="keyword">in</span> megabytes, <span class="keyword">and</span> <span class="keyword">if</span> G is used, the size is <span class="keyword">in</span> gigabytes. So size 100, size 100k, size 100M <span class="keyword">and</span> size 100G</span><br><span class="line">    # are all valid.</span><br><span class="line">    rotate_size: 200M</span><br><span class="line">    # The directory on your host that store log</span><br><span class="line">    location: /var/log/harbor</span><br></pre></td></tr></table></figure><p>4、执行安装<br><code>./install.sh</code><br><img src="http://cdn.voidking.com/@/imgs/harbor-start/install.jpg?imageView2/0/w/700" alt=""><br>如果安装完成发现配置错误，可以修改配置后再次执行脚本。<br>如果报错 ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule ，那么重启docker后再次执行脚本。</p><p>至此，harbor安装完成，没有配置https。</p><h1 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h1><h2 id="浏览器验证"><a href="#浏览器验证" class="headerlink" title="浏览器验证"></a>浏览器验证</h2><p>浏览器访问 <a href="http://192.168.56.200" target="_blank" rel="noopener">http://192.168.56.200</a> ，可以看到harbor登录页面。<br>输入用户名密码，admin和Harbor12345，登录harbor控制台。<br><img src="http://cdn.voidking.com/@/imgs/harbor-start/login.jpg?imageView2/0/w/700" alt=""></p><h2 id="命令行验证"><a href="#命令行验证" class="headerlink" title="命令行验证"></a>命令行验证</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker login <span class="number">192.168</span><span class="number">.56</span><span class="number">.200</span></span><br></pre></td></tr></table></figure><p>输入用户名密码，admin和Harbor12345，登录报错：<br>Error response from daemon: Get <a href="https://192.168.56.200/v2/" target="_blank" rel="noopener">https://192.168.56.200/v2/</a>: dial tcp 192.168.56.200:443: connect: connection refused。</p><p>这是因为，docker1.3.x之后与registry交互，默认使用https协议。<br>修改/etc/docker/daemon.json，添加insecure-registries参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://mirror.ccs.tencentyun.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"http://192.168.56.200"</span>,</span><br><span class="line">    <span class="string">"http://harbor.voidking.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启docker：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker</span></span><br></pre></td></tr></table></figure><p>重新登录，成功。<br><img src="http://cdn.voidking.com/@/imgs/harbor-start/login2.jpg?imageView2/0/w/500" alt=""></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h2><p>1、停止<br><code>docker-compose down -v</code></p><p>2、修改配置<br>修改harbor.yml后，执行<code>./prepare</code></p><p>3、启动<br><code>docker-compose up -d</code></p><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull busybox:<span class="number">1.31</span></span><br><span class="line">docker tag busybox:<span class="number">1.31</span> harbor.<span class="built_in">void</span>king.com/<span class="built_in">void</span>king/busybox:<span class="number">1.31</span></span><br><span class="line">docker tag busybox:<span class="number">1.31</span> harbor.<span class="built_in">void</span>king.com/<span class="built_in">void</span>king/subpath/busybox:<span class="number">1.31</span></span><br><span class="line">docker push harbor.<span class="built_in">void</span>king.com/<span class="built_in">void</span>king/busybox:<span class="number">1.31</span></span><br></pre></td></tr></table></figure><p>报错：<br>The push refers to repository [harbor.voidking.com/voidking/busybox]<br>a6d503001157: Preparing<br>denied: requested access to the resource is denied</p><p>这是因为，需要先创建项目。在web控制台创建项目 voidking，再次上传，成功。带有subpath的镜像，同样可以上传成功。</p><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull harbor.<span class="built_in">void</span>king.com/<span class="built_in">void</span>king/busybox:<span class="number">1.31</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Harbor简介&quot;&gt;&lt;a href=&quot;#Harbor简介&quot; class=&quot;headerlink&quot; title=&quot;Harbor简介&quot;&gt;&lt;/a&gt;Harbor简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Harbor is an open source container image registry that secures images with role-based access control, scans images for vulnerabilities, and signs images as trusted. As a CNCF Incubating project, Harbor delivers compliance, performance, and interoperability to help you consistently and securely manage images across cloud native compute platforms like Kubernetes and Docker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://goharbor.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Harbor官网&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>K8S中的RBAC鉴权</title>
    <link href="https://www.voidking.com/dev-k8s-rbac-auth/"/>
    <id>https://www.voidking.com/dev-k8s-rbac-auth/</id>
    <published>2020-03-20T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RBAC-Authorization"><a href="#RBAC-Authorization" class="headerlink" title="RBAC Authorization"></a>RBAC Authorization</h1><blockquote><p>Role-based access control (RBAC) is a method of regulating access to computer or network resources based on the roles of individual users within your organization.</p></blockquote><p>更多内容，参考<a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/" target="_blank" rel="noopener">Using RBAC Authorization</a>。</p><p><a href="https://www.voidking.com/dev-ssl-tls/">《SSL和TLS》</a>文中，通过API签名一节，创建了新用户jane，并且给该用户的证书进行签名。现在我们有了jane.crt和jane.key，本文中会配置jane能够创建和查看default空间下的pods。</p><a id="more"></a><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="kubeconfig"><a href="#kubeconfig" class="headerlink" title="kubeconfig"></a>kubeconfig</h2><p>1、查看配置<br><code>kubectl config view</code><br>记录当前的server地址。</p><p>2、保存ca.crt</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat .kube<span class="built_in">/config </span>| grep certificate-authority-data | awk <span class="string">'&#123;print $2&#125;'</span> | base64 --decode &gt; ca.crt</span><br></pre></td></tr></table></figure><h2 id="jane-kubeconfig"><a href="#jane-kubeconfig" class="headerlink" title="jane.kubeconfig"></a>jane.kubeconfig</h2><p>1、设置集群参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> config </span>set-cluster kubernetes \</span><br><span class="line"><span class="attribute">--server</span>=<span class="string">"https://172.17.0.69:6443"</span> \</span><br><span class="line"><span class="attribute">--certificate-authority</span>=/root/ca.crt \</span><br><span class="line"><span class="attribute">--embed-certs</span>=<span class="literal">true</span> \</span><br><span class="line"><span class="attribute">--kubeconfig</span>=jane.kubeconfig</span><br></pre></td></tr></table></figure><p>当前目录生成jane.kubeconfig文件。</p><p>2、设置客户端认证参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> config </span>set-credentials jane \</span><br><span class="line"><span class="attribute">--client-certificate</span>=/root/jane.crt \</span><br><span class="line"><span class="attribute">--client-key</span>=/root/jane.key \</span><br><span class="line"><span class="attribute">--embed-certs</span>=<span class="literal">true</span> \</span><br><span class="line"><span class="attribute">--kubeconfig</span>=jane.kubeconfig</span><br></pre></td></tr></table></figure><p>3、设置上下文参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> config </span>set-context jane@kubernetes \</span><br><span class="line"><span class="attribute">--cluster</span>=kubernetes \</span><br><span class="line"><span class="attribute">--user</span>=jane \</span><br><span class="line"><span class="attribute">--namespace</span>=default \</span><br><span class="line"><span class="attribute">--kubeconfig</span>=jane.kubeconfig</span><br></pre></td></tr></table></figure><p>4、查看配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat jane.kubeconfig</span><br><span class="line">kubectl<span class="built_in"> config </span>view --kubeconfig jane.kubeconfig</span><br></pre></td></tr></table></figure><p>5、设置默认上下文</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">KUBECONFIG</span>=/root/jane.kubeconfig</span><br><span class="line">kubectl<span class="built_in"> config </span>use-context jane@kubernetes <span class="attribute">--kubeconfig</span>=jane.kubeconfig</span><br></pre></td></tr></table></figure><p>6、测试使用<br><code>kubectl get pods</code><br>正常的话，比如使用minikube或者<a href="https://www.katacoda.com/courses/kubernetes/playground" target="_blank" rel="noopener">katacoda</a>，会输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Forbidden): pods is forbidden:<span class="built_in"> User </span><span class="string">"jane"</span> cannot list<span class="built_in"> resource </span><span class="string">"pods"</span> <span class="keyword">in</span> API<span class="built_in"> group </span><span class="string">""</span> <span class="keyword">in</span> the namespace <span class="string">"default"</span></span><br></pre></td></tr></table></figure><p>但是，如果使用<a href="https://kodekloud.com/courses/enrolled/675080" target="_blank" rel="noopener">kodekloud</a>或者阿里云k8s集群，会报错：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: You must be logged <span class="keyword">in</span> <span class="keyword">to</span> the<span class="built_in"> server </span>(Unauthorized)</span><br></pre></td></tr></table></figure><p>研究了四个多小时，才发现是平台的问题，服气了。。。</p><h1 id="角色和绑定"><a href="#角色和绑定" class="headerlink" title="角色和绑定"></a>角色和绑定</h1><h2 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h2><p>1、创建角色</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create <span class="keyword">role</span> <span class="title">--help</span></span><br><span class="line">kubectl create <span class="keyword">role</span> <span class="title">developer</span> --<span class="attr">resource=</span>pods --<span class="attr">verb=</span>list,create</span><br></pre></td></tr></table></figure><p>2、角色绑定</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> rolebinding dev-<span class="keyword">user</span>-binding --<span class="keyword">role</span>=developer --<span class="keyword">user</span>=jane</span><br></pre></td></tr></table></figure><p>3、验证权限</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl auth can-i <span class="built_in">list</span> pods <span class="comment">--as jane</span></span><br><span class="line">kubectl <span class="keyword">get</span> pods <span class="comment">--as jane</span></span><br></pre></td></tr></table></figure><p>4、使用jane用户验证</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">KUBECONFIG</span>=/root/jane.kubeconfig</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods</span><br></pre></td></tr></table></figure><p>这次，就可以正常看到pods信息了。</p><h2 id="manifest实现"><a href="#manifest实现" class="headerlink" title="manifest实现"></a>manifest实现</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">developer</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">  <span class="attr">resources:</span> <span class="string">["pods"]</span></span><br><span class="line">  <span class="attr">verbs:</span> <span class="string">["list",</span> <span class="string">"create"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind: RoleBindingapiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dev-user-binding</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jane</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">developer</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.iomaster</span></span><br></pre></td></tr></table></figure><h1 id="集群角色和绑定"><a href="#集群角色和绑定" class="headerlink" title="集群角色和绑定"></a>集群角色和绑定</h1><p>以上，给jane授权，是在namespace范围内的。当我们想给jane授权cluster范围的权限时，就需要clusterroles。</p><p>比如，我们想给jane授权node相关的权限，可以如下实现。</p><h2 id="命令实现-1"><a href="#命令实现-1" class="headerlink" title="命令实现"></a>命令实现</h2><p>1、创建集群角色</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrole <span class="keyword">node</span><span class="title">-reader</span> --<span class="attr">verb=</span>get,list,watch --<span class="attr">resource=</span>nodes</span><br></pre></td></tr></table></figure><p>2、绑定集群角色</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding <span class="keyword">node</span><span class="title">-reader-binding</span> --<span class="attr">user=</span>jane --<span class="attr">clusterrole=</span><span class="keyword">node</span><span class="title">-reader</span></span><br></pre></td></tr></table></figure><h2 id="manifest实现-1"><a href="#manifest实现-1" class="headerlink" title="manifest实现"></a>manifest实现</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-reader</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-reader-binding</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-reader</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jane</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果使用clusterrole指定的资源是pods这种namespace级别的资源，该集群角色绑定给jane后会有什么效果？<br>答：jane对所有namespace中的pods资源拥有clusterrole中定义的操作权限。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RBAC-Authorization&quot;&gt;&lt;a href=&quot;#RBAC-Authorization&quot; class=&quot;headerlink&quot; title=&quot;RBAC Authorization&quot;&gt;&lt;/a&gt;RBAC Authorization&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Role-based access control (RBAC) is a method of regulating access to computer or network resources based on the roles of individual users within your organization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Using RBAC Authorization&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-ssl-tls/&quot;&gt;《SSL和TLS》&lt;/a&gt;文中，通过API签名一节，创建了新用户jane，并且给该用户的证书进行签名。现在我们有了jane.crt和jane.key，本文中会配置jane能够创建和查看default空间下的pods。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>JSONPath</title>
    <link href="https://www.voidking.com/dev-jsonpath/"/>
    <id>https://www.voidking.com/dev-jsonpath/</id>
    <published>2020-03-18T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSONPath简介"><a href="#JSONPath简介" class="headerlink" title="JSONPath简介"></a>JSONPath简介</h1><blockquote><p>JSON (JavaScript Object Notation) allows for easy interchange of data, often between a program and a database.<br>JSONPath is a query language for JSON, similar to XPath for XML. </p></blockquote><p>如上，json是一种常用的数据格式，jsonpath是json的查询语言，类似于XPath和SQL。</p><a id="more"></a><h1 id="JSONPath语法"><a href="#JSONPath语法" class="headerlink" title="JSONPath语法"></a>JSONPath语法</h1><p>摘自 <a href="https://github.com/json-path/JsonPath" target="_blank" rel="noopener">json-path/JsonPath</a></p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>$</code></td><td align="left">The root element to query. This starts all path expressions.</td></tr><tr><td align="left"><code>@</code></td><td align="left">The current node being processed by a filter predicate.</td></tr><tr><td align="left"><code>*</code></td><td align="left">Wildcard. Available anywhere a name or numeric are required.</td></tr><tr><td align="left"><code>..</code></td><td align="left">Deep scan. Available anywhere a name is required.</td></tr><tr><td align="left"><code>.&lt;name&gt;</code></td><td align="left">Dot-notated child</td></tr><tr><td align="left"><code>[&#39;&lt;name&gt;&#39; (, &#39;&lt;name&gt;&#39;)]</code></td><td align="left">Bracket-notated child or children</td></tr><tr><td align="left"><code>[&lt;number&gt; (, &lt;number&gt;)]</code></td><td align="left">Array index or indexes</td></tr><tr><td align="left"><code>[start:end]</code></td><td align="left">Array slice operator</td></tr><tr><td align="left"><code>[?(&lt;expression&gt;)]</code></td><td align="left">Filter expression. Expression must evaluate to a boolean value.</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Functions can be invoked at the tail end of a path - the input to a function is the output of the path expression.<br>The function output is dictated by the function itself.</p><table><thead><tr><th align="left">Function</th><th align="left">Description</th><th>Output</th></tr></thead><tbody><tr><td align="left">min()</td><td align="left">Provides the min value of an array of numbers</td><td>Double</td></tr><tr><td align="left">max()</td><td align="left">Provides the max value of an array of numbers</td><td>Double</td></tr><tr><td align="left">avg()</td><td align="left">Provides the average value of an array of numbers</td><td>Double</td></tr><tr><td align="left">stddev()</td><td align="left">Provides the standard deviation value of an array of numbers</td><td>Double</td></tr><tr><td align="left">length()</td><td align="left">Provides the length of an array</td><td>Integer</td></tr><tr><td align="left">sum()</td><td align="left">Provides the sum value of an array of numbers</td><td>Double</td></tr></tbody></table><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>Filters are logical expressions used to filter arrays. A typical filter would be <code>[?(@.age &gt; 18)]</code> where <code>@</code> represents the current item being processed. More complex filters can be created with logical operators <code>&amp;&amp;</code> and <code>||</code>. String literals must be enclosed by single or double quotes (<code>[?(@.color == &#39;blue&#39;)]</code> or <code>[?(@.color == &quot;blue&quot;)]</code>).   </p><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">left is equal to right (note that 1 is not equal to ‘1’)</td></tr><tr><td align="left">!=</td><td align="left">left is not equal to right</td></tr><tr><td align="left">&lt;</td><td align="left">left is less than right</td></tr><tr><td align="left">&lt;=</td><td align="left">left is less or equal to right</td></tr><tr><td align="left">&gt;</td><td align="left">left is greater than right</td></tr><tr><td align="left">&gt;=</td><td align="left">left is greater than or equal to right</td></tr><tr><td align="left">=~</td><td align="left">left matches regular expression  [?(@.name =~ /foo.*?/i)]</td></tr><tr><td align="left">in</td><td align="left">left exists in right [?(@.size in [‘S’, ‘M’])]</td></tr><tr><td align="left">nin</td><td align="left">left does not exists in right</td></tr><tr><td align="left">subsetof</td><td align="left">left is a subset of right [?(@.sizes subsetof [‘S’, ‘M’, ‘L’])]</td></tr><tr><td align="left">anyof</td><td align="left">left has an intersection with right [?(@.sizes anyof [‘M’, ‘L’])]</td></tr><tr><td align="left">noneof</td><td align="left">left has no intersection with right [?(@.sizes noneof [‘M’, ‘L’])]</td></tr><tr><td align="left">size</td><td align="left">size of left (array or string) should match right</td></tr><tr><td align="left">empty</td><td align="left">left (array or string) should be empty</td></tr></tbody></table><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>Given the json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"store"</span>: &#123;</span><br><span class="line">        <span class="string">"book"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"category"</span>: <span class="string">"reference"</span>,</span><br><span class="line">                <span class="string">"author"</span>: <span class="string">"Nigel Rees"</span>,</span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"Sayings of the Century"</span>,</span><br><span class="line">                <span class="string">"price"</span>: <span class="number">8.95</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"category"</span>: <span class="string">"fiction"</span>,</span><br><span class="line">                <span class="string">"author"</span>: <span class="string">"Evelyn Waugh"</span>,</span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"Sword of Honour"</span>,</span><br><span class="line">                <span class="string">"price"</span>: <span class="number">12.99</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"category"</span>: <span class="string">"fiction"</span>,</span><br><span class="line">                <span class="string">"author"</span>: <span class="string">"Herman Melville"</span>,</span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"Moby Dick"</span>,</span><br><span class="line">                <span class="string">"isbn"</span>: <span class="string">"0-553-21311-3"</span>,</span><br><span class="line">                <span class="string">"price"</span>: <span class="number">8.99</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"category"</span>: <span class="string">"fiction"</span>,</span><br><span class="line">                <span class="string">"author"</span>: <span class="string">"J. R. R. Tolkien"</span>,</span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"The Lord of the Rings"</span>,</span><br><span class="line">                <span class="string">"isbn"</span>: <span class="string">"0-395-19395-8"</span>,</span><br><span class="line">                <span class="string">"price"</span>: <span class="number">22.99</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"bicycle"</span>: &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"red"</span>,</span><br><span class="line">            <span class="string">"price"</span>: <span class="number">19.95</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"expensive"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">JsonPath (click link to try)</th><th align="left">Result</th></tr></thead><tbody><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$.store.book[*].author" target="_blank">$.store.book[*].author</a></td><td align="left">The authors of all books</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..author" target="_blank">$..author</a></td><td align="left">All authors</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$.store.*" target="_blank">$.store.*</a></td><td align="left">All things, both books and bicycles</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$.store..price" target="_blank">$.store..price</a></td><td align="left">The price of everything</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[2]" target="_blank">$..book[2]</a></td><td align="left">The third book</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[2]" target="_blank">$..book[-2]</a></td><td align="left">The second to last book</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[0,1]" target="_blank">$..book[0,1]</a></td><td align="left">The first two books</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[:2]" target="_blank">$..book[:2]</a></td><td align="left">All books from index 0 (inclusive) until index 2 (exclusive)</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[1:2]" target="_blank">$..book[1:2]</a></td><td align="left">All books from index 1 (inclusive) until index 2 (exclusive)</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[-2:]" target="_blank">$..book[-2:]</a></td><td align="left">Last two books</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[2:]" target="_blank">$..book[2:]</a></td><td align="left">Book number two from tail</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.isbn)]" target="_blank">$..book[?(@.isbn)]</a></td><td align="left">All books with an ISBN number</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$.store.book[?(@.price < 10)]" target="_blank">$.store.book[?(@.price &lt; 10)]</a></td><td align="left">All books in store cheaper than 10</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.price <= $['expensive'])]" target="_blank">$..book[?(@.price &lt;= $[‘expensive’])]</a></td><td align="left">All books in store that are not “expensive”</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book[?(@.author =~ /.*REES/i)]" target="_blank">$..book[?(@.author =~ /.*REES/i)]</a></td><td align="left">All books matching regex (ignore case)</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..*" target="_blank">$..*</a></td><td align="left">Give me every thing</td></tr><tr><td align="left"><a href="http://jsonpath.herokuapp.com/?path=$..book.length()" target="_blank">$..book.length()</a></td><td align="left">The number of books</td></tr></tbody></table><h1 id="在线测试"><a href="#在线测试" class="headerlink" title="在线测试"></a>在线测试</h1><p><a href="https://jsonpath.com/" target="_blank" rel="noopener">JSONPath Online Evaluator</a></p><h1 id="kubectl-JSONPath"><a href="#kubectl-JSONPath" class="headerlink" title="kubectl + JSONPath"></a>kubectl + JSONPath</h1><p>kubelet支持JSONPath，具体参考<a href="https://kubernetes.io/zh/docs/reference/kubectl/jsonpath/" target="_blank" rel="noopener">JSONPath 支持</a>。<br>除了标准jsonpath语法外,kubernetes jsonpath模板还额外支持以下语法:</p><ul><li>用””双引号来引用JSONPath表达式中的文本</li><li>使用range和end来遍历集合</li><li>使用负数来从尾部索引集合</li></ul><p>查看node的cpu信息：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes -o=jsonpath='&#123;<span class="string">.items</span>[*]<span class="string">.metadata.name</span>&#125;'</span><br><span class="line">kubectl get nodes -o=jsonpath='&#123;<span class="string">.items</span>[*]<span class="string">.status.capacity.cpu</span>&#125;'</span><br><span class="line">kubectl get nodes -o=jsonpath='&#123;<span class="string">.items</span>[*]<span class="string">.metadata.name</span>&#125;&#123;<span class="string">.items</span>[*]<span class="string">.status.capacity.cpu</span>&#125;'</span><br><span class="line">kubectl get nodes -o=jsonpath='&#123;<span class="string">.items</span>[*]<span class="string">.metadata.name</span>&#125;&#123;<span class="string">"\n"</span>&#125;&#123;<span class="string">.items</span>[*]<span class="string">.status.capacity.cpu</span>&#125;'</span><br><span class="line">kubectl get nodes -o=jsonpath='&#123;range <span class="string">.items</span>[*]&#125;&#123;<span class="string">.metadata.name</span>&#125;&#123;<span class="string">"\t"</span>&#125;&#123;<span class="string">.status.capacity.cpu</span>&#125;&#123;end&#125;'</span><br><span class="line">kubectl get nodes -o=custom-columns=NODE<span class="function">:.metadata.name</span>,CPU<span class="function">:.status.capacity.cpu</span></span><br><span class="line">kubectl get nodes <span class="params">--sort-by=</span><span class="string">.metadata.name</span></span><br><span class="line">kubectl get nodes <span class="params">--sort-by=</span><span class="string">.status.capacity.cpu</span></span><br></pre></td></tr></table></figure><h1 id="json2yaml"><a href="#json2yaml" class="headerlink" title="json2yaml"></a>json2yaml</h1><p>json和yaml可以相互转化，这里推荐一个在线工具<a href="https://www.json2yaml.com/" target="_blank" rel="noopener">JSON to YAML</a>。</p><p>如果有python3环境，还可以使用python-json2yaml工具。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pip</span> <span class="string">install PyYAML==5.1</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">install python-json2yaml</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">a.json | json2yaml &gt; a.yaml</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">a.yaml | yaml2json</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSONPath简介&quot;&gt;&lt;a href=&quot;#JSONPath简介&quot; class=&quot;headerlink&quot; title=&quot;JSONPath简介&quot;&gt;&lt;/a&gt;JSONPath简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JSON (JavaScript Object Notation) allows for easy interchange of data, often between a program and a database.&lt;br&gt;JSONPath is a query language for JSON, similar to XPath for XML. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如上，json是一种常用的数据格式，jsonpath是json的查询语言，类似于XPath和SQL。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="json" scheme="https://www.voidking.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeadm安装部署K8S集群</title>
    <link href="https://www.voidking.com/dev-kubeadm-install-k8s/"/>
    <id>https://www.voidking.com/dev-kubeadm-install-k8s/</id>
    <published>2020-03-16T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubeadm简介"><a href="#kubeadm简介" class="headerlink" title="kubeadm简介"></a>kubeadm简介</h1><p><a href="https://www.voidking.com/dev-kubeadm-upgrade/">《使用kubeadm升级K8S集群》</a>一文中，了解了k8s集群中常见组件，并且使用kubeadm对k8s集群进行了升级。本文中，会学习使用kubeadm安装部署k8s集群。</p><blockquote><p>Kubeadm is a tool built to provide kubeadm init and kubeadm join as best-practice “fast paths” for creating Kubernetes clusters.</p></blockquote><p>更多内容，参考<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">Overview of kubeadm</a>和<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">Installing kubeadm</a>。</p><a id="more"></a><h1 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h1><p>目标：搭建一个k8s集群，包括master和node01两个节点，节点系统为ubuntu16.04.2。</p><p>1、环境准备。</p><p>2、在两个节点上安装kubeadm。</p><p>3、使用kubeadm初始化节点。</p><p>4、安装网络插件。</p><p>5、验证安装。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>1、配置主机名</p><p>2、配置IP地址</p><p>3、参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic" target="_blank" rel="noopener">Letting iptables see bridged traffic</a>，配置iptables</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ensure legacy binaries are installed</span></span><br><span class="line">sudo apt-get <span class="keyword">install</span> -y iptables arptables ebtables</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to legacy versions</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--set iptables /usr/sbin/iptables-legacy</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--set ip6tables /usr/sbin/ip6tables-legacy</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--set arptables /usr/sbin/arptables-legacy</span></span><br><span class="line">sudo <span class="keyword">update</span>-alternatives <span class="comment">--set ebtables /usr/sbin/ebtables-legacy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Letting iptables see bridged traffic</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-<span class="keyword">call</span>-ip6tables = <span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-<span class="keyword">call</span>-iptables = <span class="number">1</span></span><br><span class="line">EOF</span><br><span class="line">sysctl <span class="comment">--system</span></span><br></pre></td></tr></table></figure><p>4、参考<a href="https://www.voidking.com/dev-docker-start/">Docker入门</a>，安装Docker</p><h1 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h1><p>参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">Installing kubeadm</a>。</p><p>1、确认系统版本<br><code>cat /etc/os-release</code></p><p>2、执行安装kubeadm、kubelet和kubectl（两个节点都要执行）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> &amp;&amp; sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> apt-transport-https curl</span><br><span class="line">curl -s http<span class="variable">s:</span>//packages.cloud.google.<span class="keyword">com</span>/apt/doc/apt-key.gpg | sudo apt-key <span class="built_in">add</span> -</span><br><span class="line"><span class="keyword">cat</span> &lt;&lt;EOF | sudo tee /etc/apt/sources.<span class="keyword">list</span>.d/kubernetes.<span class="keyword">list</span></span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> kubelet kubeadm kubectl</span><br><span class="line">sudo apt-<span class="keyword">mark</span> hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>3、查看kubelet版本<br><code>kubelet --version</code></p><h1 id="初始化节点"><a href="#初始化节点" class="headerlink" title="初始化节点"></a>初始化节点</h1><p>参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#installing-kubeadm-on-your-hosts" target="_blank" rel="noopener">Installing kubeadm on your hosts</a>。</p><h2 id="master"><a href="#master" class="headerlink" title="master"></a>master</h2><p>1、测试与gcr.io的连接<br><code>kubeadm config images pull</code></p><p>2、执行初始化<br><code>kubeadm init</code><br>完成后，屏幕输出会提示创建配置文件，以及添加worker node的join命令，记录下来。</p><p>3、创建配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>PS：如果忘记了添加worker node的join命令，可以重新生成。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="keyword">token</span> <span class="built_in">create</span> <span class="comment">--help</span></span><br><span class="line">kubeadm <span class="keyword">token</span> <span class="built_in">create</span> <span class="comment">--print-join-command</span></span><br></pre></td></tr></table></figure><p>生成新的join命令后，之前的join命令同样可以使用。</p><h2 id="node01"><a href="#node01" class="headerlink" title="node01"></a>node01</h2><p>1、使用join命令，添加node01节点到集群</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kubeadm</span> <span class="selector-tag">join</span> 172<span class="selector-class">.17</span><span class="selector-class">.0</span><span class="selector-class">.53</span><span class="selector-pseudo">:6443</span> <span class="selector-tag">--token</span> <span class="selector-tag">b09bi7</span><span class="selector-class">.ob6evvc11a8jt1ie</span> \</span><br><span class="line">    <span class="selector-tag">--discovery-token-ca-cert-hash</span> <span class="selector-tag">sha256</span><span class="selector-pseudo">:8abadf8f2eb81301060af3ac6002959714ccf79aaf853546445a2fd6a0265001</span></span><br></pre></td></tr></table></figure><p>2、验证结果<br>在master节点执行：<br><code>kubectl get nodes</code><br>可以看到master节点和node01节点，都是NotReady的状态。</p><h1 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h1><p>参考<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network" target="_blank" rel="noopener">Installing a Pod network add-on</a>，本文中选择安装weave。（以下命令都是在master节点执行。）</p><p>1、安装weave</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply <span class="operator">-f</span> <span class="string">"https://cloud.weave.works/k8s/net?k8s-version=<span class="variable">$</span>(kubectl version | base64 | tr -d '\n')"</span></span><br></pre></td></tr></table></figure><p>2、验证结果<br><code>kubectl get nodes -w</code><br>等待一会，可以看到master节点和node01节点，变化为Ready的状态，nice。</p><p>以上，k8s集群安装部署完成。</p><h1 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h1><h2 id="手动验证"><a href="#手动验证" class="headerlink" title="手动验证"></a>手动验证</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> nodes</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods --all-namespaces</span><br><span class="line">service kube-apiserver status</span><br><span class="line">service kube-controller-manager status</span><br><span class="line">service kube-scheduler status</span><br><span class="line">service kubelet status</span><br><span class="line">service kube-proxy status</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kubectl</span> <span class="string">run nginx</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">get pods</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">scale --replicas=3 deploy/nginx</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">get pods</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">expose deployment nginx --port=80 --type=NodePort</span></span><br><span class="line"><span class="attr">kubectl</span> <span class="string">get service</span></span><br><span class="line"><span class="attr">curl</span> <span class="string">http://node01:31850</span></span><br></pre></td></tr></table></figure><h2 id="test-infra"><a href="#test-infra" class="headerlink" title="test-infra"></a>test-infra</h2><p>源码地址：<a href="https://github.com/kubernetes/test-infra" target="_blank" rel="noopener">kubernetes/test-infra</a></p><p>1、拉取源码<br><code>go get -u k8s.io/test-infra/kubetest</code></p><p>2、执行kubetest</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubetest <span class="attribute">--extract</span>=v1.11.3</span><br><span class="line">cd kubernetes</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KUBE_MASTER_IP</span>=<span class="string">"172.17.0.53:6443"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KUBE_MASTER</span>=kube-master</span><br><span class="line">kubetest --test <span class="attribute">--provider</span>=skeleton &gt; testout.txt</span><br><span class="line">kubetest --test <span class="attribute">--provider</span>=skeleton <span class="attribute">--test_args</span>=<span class="string">"ginkgo.focus=Secrets"</span> &gt; testout.txt</span><br><span class="line">cat testout.txt</span><br></pre></td></tr></table></figure><h2 id="Smoke-Test"><a href="#Smoke-Test" class="headerlink" title="Smoke Test"></a>Smoke Test</h2><p>按照<a href="https://github.com/mmumshad/kubernetes-the-hard-way/blob/master/docs/15-smoke-test.md" target="_blank" rel="noopener">Smoke Test</a>文档操作一遍。</p><h2 id="sonobuoy"><a href="#sonobuoy" class="headerlink" title="sonobuoy"></a>sonobuoy</h2><p>官网地址：<a href="https://sonobuoy.io/" target="_blank" rel="noopener">sonobuoy</a><br>源码地址：<a href="https://github.com/vmware-tanzu/sonobuoy" target="_blank" rel="noopener">vmware-tanzu/sonobuoy</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;kubeadm简介&quot;&gt;&lt;a href=&quot;#kubeadm简介&quot; class=&quot;headerlink&quot; title=&quot;kubeadm简介&quot;&gt;&lt;/a&gt;kubeadm简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-kubeadm-upgrade/&quot;&gt;《使用kubeadm升级K8S集群》&lt;/a&gt;一文中，了解了k8s集群中常见组件，并且使用kubeadm对k8s集群进行了升级。本文中，会学习使用kubeadm安装部署k8s集群。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubeadm is a tool built to provide kubeadm init and kubeadm join as best-practice “fast paths” for creating Kubernetes clusters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Overview of kubeadm&lt;/a&gt;和&lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installing kubeadm&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>AutoHotkey配置鼠标光标在屏幕之间瞬移</title>
    <link href="https://www.voidking.com/hobby-autohotkey-mouse-cursor-switch-between-screens/"/>
    <id>https://www.voidking.com/hobby-autohotkey-mouse-cursor-switch-between-screens/</id>
    <published>2020-03-12T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双屏幕带来的问题"><a href="#双屏幕带来的问题" class="headerlink" title="双屏幕带来的问题"></a>双屏幕带来的问题</h1><p>很多同事都会在笔记本电脑之外，再配备一个或两个屏幕，我也另外配备了一块屏幕。但是，使用双屏幕会带来两个问题：一个是窗口的切换移动不方便，另一个是鼠标的切换移动不方便。</p><p><a href="https://www.voidking.com/hobby-windows-shortcut-key/">《Windows快捷键》</a>一文中，提到了两个可以用于多个屏幕窗口操作的快捷键：<br>1、alt+tab，切换窗口。<br>2、win+shift+左右键，可以移动窗口到另一个屏幕。</p><p>窗口的问题基本解决了，但是鼠标的问题还没有解决。怎么办？很多文章说，通过“显示设置”，调整两个屏幕的相对位置，就能更加容易地在两个屏幕间移动鼠标光标。但是，这个方法只是缓解了问题，并没有解决问题，鼠标光标移动依然很麻烦。</p><p>此时，就该本文的主角 <a href="https://www.autohotkey.com/" target="_blank" rel="noopener">AutoHotkey</a> 出马了！</p><a id="more"></a><h1 id="AutoHotkey"><a href="#AutoHotkey" class="headerlink" title="AutoHotkey"></a>AutoHotkey</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>AutoHotkey is a free, open-source scripting language for Windows that allows users to easily create small to complex scripts for all kinds of tasks such as: form fillers, auto-clicking, macros, etc.</p></blockquote><p>正如官方的介绍，autohotkey是一个免费开源的脚本语言，可以帮助用户在Windows上轻松创建脚本，例如：表格填充，自动单击，宏等。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、访问<a href="https://www.autohotkey.com/" target="_blank" rel="noopener">AutoHotkey官网</a>或者<a href="https://github.com/Lexikos/AutoHotkey_L" target="_blank" rel="noopener">AutoHotkey-github</a>，下载安装包，本文中选择下载 AutoHotkey_1.1.32.00_setup.exe </p><p>2、双击安装即可</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><p>1、新建文件helloworld.ahk，内容为：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">!H::</span></span><br><span class="line"><span class="built_in">Send,</span> helloworld</span><br><span class="line"><span class="keyword">Return</span></span><br></pre></td></tr></table></figure><p>第一行定义快捷键，其中<code>!</code>代表alt，H就是H。<br>第二行Send命令，<code>,</code>后的是参数。<br>第三行Return停止后面的脚本。</p><p>2、启动脚本<br>双击helloworld.ahk，或者右键helloworld.ahk，Run Script。查看系统托盘，可以看到多了一个H的图标，这就是正在运行的脚本。</p><p>3、测试脚本<br>打开任意一个文档，按下 alt+H ，发现会自动填入 “helloworld”，nice。</p><h2 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h2><p>1、符号说明</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#Win</span></span><br><span class="line">!Alt</span><br><span class="line">^Control</span><br><span class="line">+Shift</span><br><span class="line"><span class="meta">&amp;连接两个按键(含鼠标按键)，合并成一个自定义热键</span></span><br></pre></td></tr></table></figure><p>2、常用命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Send</span> <span class="string">发送一段字符</span></span><br><span class="line"><span class="attr">SendInput</span> <span class="string">发送一段字符</span></span><br><span class="line"><span class="attr">MsgBox</span> <span class="string">弹出对话框</span></span><br><span class="line"><span class="attr">Run</span> <span class="string">运行一个软件或者打开网页</span></span><br><span class="line"><span class="attr">WinActivate</span> <span class="string">窗口激活</span></span><br><span class="line"><span class="attr">WinWaitActive</span> <span class="string">等待窗口激活</span></span><br></pre></td></tr></table></figure><p>更多内容参考<a href="https://www.autohotkey.com/docs/AutoHotkey.htm" target="_blank" rel="noopener">AutoHotkey官方文档</a>。</p><h1 id="定义快捷键"><a href="#定义快捷键" class="headerlink" title="定义快捷键"></a>定义快捷键</h1><p>利用autohotkey，可以实现自定义快捷键。</p><h2 id="双脚本"><a href="#双脚本" class="headerlink" title="双脚本"></a>双脚本</h2><p>1、新建文件 mousemove1.ahk，内容为</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">!1::</span></span><br><span class="line"><span class="built_in">CoordMode,</span> Mouse, Screen</span><br><span class="line"><span class="built_in">MouseMove,</span> (<span class="built_in">A_ScreenWidth</span> // <span class="number">2</span>), (<span class="built_in">A_ScreenHeight</span> // <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>这段脚本运行后，按下 alt+1 ，鼠标光标会跳转到屏幕1的中心。</p><p>2、新建文件 mousemove2.ahk，内容为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!2::</span><br><span class="line">CoordMode, Mouse, Screen</span><br><span class="line">MouseMove, (A_ScreenWidth + 100), 100</span><br><span class="line">return</span><br></pre></td></tr></table></figure><p>这段脚本运行后，按下 alt+2 ，鼠标光标会跳转到屏幕2的左上角的(100,100)位置。</p><p>这两个脚本配合，已经可以鼠标光标在两个屏幕间切换，nice。<br>但是，mousemove2.ahk 还有改进的空间。既然屏幕1是跳转到屏幕中间，那么屏幕2自然也是跳转到屏幕中间更好。</p><p>屏幕2的分辨率为3840x2160，因此脚本修改为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!2::</span><br><span class="line">CoordMode, Mouse, Screen</span><br><span class="line">MouseMove, (A_ScreenWidth + 1920), 1080</span><br><span class="line">return</span><br></pre></td></tr></table></figure><h2 id="单脚本"><a href="#单脚本" class="headerlink" title="单脚本"></a>单脚本</h2><p>以上，已经实现了鼠标光标在两个屏幕间的完美切换。但是，因为切换时有两个快捷键，所以切换鼠标所在屏幕时，还要想一下是切到1还是切到2，这也是一个可以改进的点。</p><p>创建文件 mousemove.ahk，内容为：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">!J::</span></span><br><span class="line"><span class="built_in">CoordMode,</span> Mouse, Screen</span><br><span class="line"><span class="built_in">MouseGetPos,</span> xpos, ypos</span><br><span class="line">if (xpos &lt;= <span class="built_in">A_ScreenWidth</span>) <span class="literal">and</span> (ypos &lt;= <span class="built_in">A_ScreenHeight</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">    MouseMove,</span> (<span class="built_in">A_ScreenWidth</span> // <span class="number">2</span>), (<span class="built_in">A_ScreenHeight</span> // <span class="number">2</span>)</span><br><span class="line">&#125;else &#123;</span><br><span class="line"><span class="built_in">MouseMove,</span> (<span class="built_in">A_ScreenWidth</span> + <span class="number">1920</span>), <span class="number">1080</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>这段脚本运行后，按下 alt+J ，可以实现鼠标光标切换到另一个屏幕的中心。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;双屏幕带来的问题&quot;&gt;&lt;a href=&quot;#双屏幕带来的问题&quot; class=&quot;headerlink&quot; title=&quot;双屏幕带来的问题&quot;&gt;&lt;/a&gt;双屏幕带来的问题&lt;/h1&gt;&lt;p&gt;很多同事都会在笔记本电脑之外，再配备一个或两个屏幕，我也另外配备了一块屏幕。但是，使用双屏幕会带来两个问题：一个是窗口的切换移动不方便，另一个是鼠标的切换移动不方便。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/hobby-windows-shortcut-key/&quot;&gt;《Windows快捷键》&lt;/a&gt;一文中，提到了两个可以用于多个屏幕窗口操作的快捷键：&lt;br&gt;1、alt+tab，切换窗口。&lt;br&gt;2、win+shift+左右键，可以移动窗口到另一个屏幕。&lt;/p&gt;
&lt;p&gt;窗口的问题基本解决了，但是鼠标的问题还没有解决。怎么办？很多文章说，通过“显示设置”，调整两个屏幕的相对位置，就能更加容易地在两个屏幕间移动鼠标光标。但是，这个方法只是缓解了问题，并没有解决问题，鼠标光标移动依然很麻烦。&lt;/p&gt;
&lt;p&gt;此时，就该本文的主角 &lt;a href=&quot;https://www.autohotkey.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AutoHotkey&lt;/a&gt; 出马了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="windows" scheme="https://www.voidking.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>SSL和TLS</title>
    <link href="https://www.voidking.com/dev-ssl-tls/"/>
    <id>https://www.voidking.com/dev-ssl-tls/</id>
    <published>2020-03-09T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSL和TLS简介"><a href="#SSL和TLS简介" class="headerlink" title="SSL和TLS简介"></a>SSL和TLS简介</h1><p><a href="https://www.voidking.com/dev-hexo-https/">《Hexo启用https加密连接》</a>和<a href="https://www.voidking.com/dev-centos7-install-gitlab/">《CentOS7安装配置GitLab》</a>中都涉及到了SSL/TLS，SSL和TLS是啥？</p><blockquote><p>传输层安全性协议（英语：Transport Layer Security，缩写：TLS）及其前身安全套接层（英语：Secure Sockets Layer，缩写：SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。<br>SSL包含记录层（Record Layer）和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用X.509认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（Session key）。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。</p></blockquote><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A" target="_blank" rel="noopener">维基百科-传输层安全性协议</a></p><a id="more"></a><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="PKI"><a href="#PKI" class="headerlink" title="PKI"></a>PKI</h2><blockquote><p>公开密钥基础建设（英语：Public Key Infrastructure，缩写：PKI），又称公开密钥基础架构、公钥基础建设、公钥基础设施、公开密码匙基础建设或公钥基础架构，是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书。<br>密码学上，公开密钥基础建设借着数字证书认证机构（CA）将用户的个人身份跟公开密钥链接在一起。对每个证书中心用户的身份必须是唯一的。链接关系通过注册和发布过程创建，取决于担保级别，链接关系可能由CA的各种软件或在人为监督下完成。PKI的确定链接关系的这一角色称为注册管理中心（Registration Authority，RA）。RA确保公开密钥和个人身份链接，可以防欺诈。在微软的公开密钥基础建设之下，注册管理中心（RA）又被叫做从属数字证书认证机构（Subordinate CA）。</p></blockquote><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E5%9F%BA%E7%A4%8E%E5%BB%BA%E8%A8%AD" target="_blank" rel="noopener">维基百科-公开密钥基础架构</a></p><h2 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h2><blockquote><p>数字证书认证机构（英语：Certificate Authority，缩写为CA），也称为电子商务认证中心、电子商务认证授权机构，是负责发放和管理数字证书的权威机构，并作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任。</p></blockquote><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84" target="_blank" rel="noopener">维基百科-证书颁发机构</a></p><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><blockquote><p>公钥证书（英语：Public key certificate），又称数字证书（digital certificate）或身份证书（identity certificate）。是用于公开密钥基础建设的电子文件，用来证明公开密钥拥有者的身份。此文件包含了公钥信息、拥有者身份信息（主体）、以及数字证书认证机构（发行者）对这份文件的数字签名，以保证这个文件的整体内容正确无误。拥有者凭着此文件，可向电脑系统或其他用户表明身份，从而对方获得信任并授权访问或使用某些敏感的电脑服务。电脑系统或其他用户可以透过一定的程序核实证书上的内容，包括证书有否过期、数字签名是否有效，如果你信任签发的机构，就可以信任证书上的密钥，凭公钥加密与拥有者进行可靠的通信。</p></blockquote><blockquote><p>公钥证书包括自签证书、根证书、中介证书、授权证书、终端实体证书（TLS服务器证书和TLS客户端证书）。</p></blockquote><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89" target="_blank" rel="noopener">维基百科-公钥证书</a></p><h1 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h1><p>TLS/SSL 的功能实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密。其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性。<br><img src="http://cdn.voidking.com/@/imgs/ssl-tls/tls.jpg?imageView2/0/w/600" alt=""></p><p>TLS 的基本工作方式是，客户端使用非对称加密与服务器进行通信，实现身份验证并协商对称加密使用的密钥，然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信，不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取。<br>例如，在 HTTPS 协议中，客户端发出请求，服务端会将公钥发给客户端，客户端验证过后生成一个密钥再用公钥加密后发送给服务端（非对称加密），双方会在 TLS 握手过程中生成一个协商密钥（对称密钥），成功后建立加密连接。通信过程中客户端将请求数据用协商密钥加密后发送，服务端也用协商密钥解密，响应也用相同的协商密钥。后续的通信使用对称加密是因为对称加解密快，而握手过程中非对称加密可以保证加密的有效性，但是过程复杂，计算量相对来说也大。</p><p>更多内容参考<a href="https://juejin.im/post/5b88a93df265da43231f1451" target="_blank" rel="noopener">SSL/TLS 详解</a></p><h1 id="自建CA并签发证书"><a href="#自建CA并签发证书" class="headerlink" title="自建CA并签发证书"></a>自建CA并签发证书</h1><p><a href="https://www.voidking.com/dev-centos7-install-gitlab/">《CentOS7安装配置GitLab》</a>一文中，添加SSL一节详细描述了自建CA并签发SSL证书的过程。<br>更多内容，可以参考<a href="https://www.yuanjies.com/?p=539" target="_blank" rel="noopener">基于OpenSSL自建CA和颁发SSL证书</a>和<a href="https://zhuanlan.zhihu.com/p/34788439" target="_blank" rel="noopener">使用 OpenSSL 自建 CA 并签发证书</a>。</p><h1 id="k8s中证书管理"><a href="#k8s中证书管理" class="headerlink" title="k8s中证书管理"></a>k8s中证书管理</h1><h2 id="查看证书"><a href="#查看证书" class="headerlink" title="查看证书"></a>查看证书</h2><p>1、查看证书位置</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep kubelet</span><br><span class="line"><span class="comment"># find config file</span></span><br><span class="line">cat /var/<span class="class"><span class="keyword">lib</span>/<span class="title">kubelet</span>/<span class="title">config</span>.<span class="title">yaml</span> | <span class="title">grep</span> <span class="title">staticPodPath</span></span></span><br><span class="line">cd /etc/kubernetes/manifests</span><br><span class="line">cat kube-apiserver.yaml</span><br></pre></td></tr></table></figure><p>2、查看证书详情</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver.crt -text</span><br></pre></td></tr></table></figure><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>签名，或者签名过期后重新签名</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver-etcd-client.csr -CA <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>etcd<span class="regexp">/ca.crt -CAkey /</span>etc<span class="regexp">/kubernetes/</span>pki<span class="regexp">/etcd/</span>ca.key -CAcreateserial -out <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver-etcd-client.crt</span><br></pre></td></tr></table></figure><h2 id="通过API签名"><a href="#通过API签名" class="headerlink" title="通过API签名"></a>通过API签名</h2><p>1、为新用户创建证书</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out jane.<span class="built_in">key</span> <span class="number">2048</span></span><br><span class="line">openssl req -<span class="built_in">new</span> -<span class="built_in">key</span> jane.<span class="built_in">key</span> -subj  <span class="string">"/CN=jane"</span> -out jane.csr</span><br><span class="line">cat jane.csr | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d '\n'</span><br></pre></td></tr></table></figure><p>2、创建jane-csr.yaml文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: certificates.k8s.io/v1beta1</span><br><span class="line">kind: CertificateSigningRequest</span><br><span class="line">metadata:</span><br><span class="line">  name: jane</span><br><span class="line">spec:</span><br><span class="line">  groups:</span><br><span class="line">  - system:authenticated</span><br><span class="line">  usages:</span><br><span class="line">  - digital signature</span><br><span class="line">  - key encipherment</span><br><span class="line">  -<span class="built_in"> server </span>auth</span><br><span class="line">  -<span class="built_in"> client </span>auth</span><br><span class="line">  request: <span class="attribute">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZEQ0NBVHdDQVFBd0R6RU5NQXNHQTFVRUF3d0VhbUZ1WlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUtxbWFIa3BJeE94dDN2UmxJT1FnSUFxSUFsekhQcTRRVTBDTDVhS04xbmY4NXRzCi9LU3o0eml1a1hEQ1NOSVNIT1pWbTY5NzVJa3RXcGFySmhaTXptc1B2eUFSeXFWbWY2L1h0bmwyeE0xblhaUzAKZGc0b0E1dXFuR0w2dHpaQzF3VFY4RVFIZnRlcWYzbUpTN2JtdlppaXFlak12a2UzVkk5RTNFK0xsUUttNnVXRwprS2RDZ2ZHNUszRGJFczR1VzR6M0lMdTdEa1BlamJodWFtYzlxYVZNRVpLSGZ0bnlBYlFITkZVLzhvWVYvR1VzCnRFVWZMRXBBTmlqUFc5U0pPWHJtNUg1NXhOdExXVHMwenU3YlRSZWE0ZjFVaDFCbkZuUkhWYUJqNysydHpITTgKaklJS01KakdWOS9rUVltRmo3UTJZUW1wYzdXWGpPZEFWcHBSc1kwQ0F3RUFBYUFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQUZ2ZUxrUmYxd0xDQmN6cWdMVkJIUGZBa0MzeU1CTDA3VXl0QUlCcVhkR3h1QWtyL3NQT1dkClNxTkhIRkNzQVNmU0lNVC96djBrQS9yN3Fnd25BMCtZREZJSjNzUlBKZkJmNm1Ic3FrbjlPd1htR1E3d0orNFQKWXVCc1lJSllnNWtzVWJoQVhiQkVZekk2OUY0Uk52U0d0K1ZLOHBBdUQzcXRvejJsd3liV0cvaUo4V3FESTZNegpuMURBeDBkRDZmRWhIKy9DTWdSREY5OExCL1ZqMWZOUUlqZ2k3Rmc1aTByU1NtZUdUMllOblJldERZYWN4aWlzCjNFN1B4STdYWDd2QjRjY3pITlUrTG92N3JnSkVXM3lRMXZRTXRCNTZlbWJaNGVnL01XZEhkeWliVXo2aDQ1ZW8KUGN5b3QxaW1wdFRyK3kwSkt0SmJ1YllQOGd2RG5FeFYKLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg</span>==</span><br></pre></td></tr></table></figure><p>3、签名请求并通过</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f jane-csr.yaml</span><br><span class="line">kubectl <span class="builtin-name">get</span> csr </span><br><span class="line">kubectl certificate approve jane</span><br><span class="line">kubectl <span class="builtin-name">get</span> csr jane -o yaml</span><br><span class="line">kubectl <span class="builtin-name">get</span> csr jane -o <span class="attribute">jsonpath</span>=<span class="string">'&#123;.status.certificate&#125;'</span> | base64 --decode &gt; jane.crt</span><br></pre></td></tr></table></figure><p>或者，直接使用openssl命令进行签名：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> <span class="regexp">/root/</span>jane.csr -CA <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>etcd<span class="regexp">/ca.crt -CAkey /</span>etc<span class="regexp">/kubernetes/</span>pki<span class="regexp">/etcd/</span>ca.key -CAcreateserial -out <span class="regexp">/root/</span>jane.crt</span><br></pre></td></tr></table></figure><p>PS：查看签名用的CA</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>kubernetes<span class="regexp">/manifests/</span>kube-controller-manager.yaml | <span class="keyword">grep</span> ca.crt</span><br><span class="line">cat <span class="regexp">/etc/</span>kubernetes<span class="regexp">/manifests/</span>kube-controller-manager.yaml | <span class="keyword">grep</span> ca.key</span><br></pre></td></tr></table></figure><p>更多内容，参考<a href="https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/" target="_blank" rel="noopener">Manage TLS Certificates in a Cluster</a>。</p><h1 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h1><p><a href="https://segmentfault.com/a/1190000002568019" target="_blank" rel="noopener">OpenSSL 与 SSL 数字证书概念贴</a><br><a href="https://cloud.tencent.com/developer/article/1114555" target="_blank" rel="noopener">SSL/TLS 原理详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSL和TLS简介&quot;&gt;&lt;a href=&quot;#SSL和TLS简介&quot; class=&quot;headerlink&quot; title=&quot;SSL和TLS简介&quot;&gt;&lt;/a&gt;SSL和TLS简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-https/&quot;&gt;《Hexo启用https加密连接》&lt;/a&gt;和&lt;a href=&quot;https://www.voidking.com/dev-centos7-install-gitlab/&quot;&gt;《CentOS7安装配置GitLab》&lt;/a&gt;中都涉及到了SSL/TLS，SSL和TLS是啥？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传输层安全性协议（英语：Transport Layer Security，缩写：TLS）及其前身安全套接层（英语：Secure Sockets Layer，缩写：SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。&lt;br&gt;SSL包含记录层（Record Layer）和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用X.509认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（Session key）。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科-传输层安全性协议&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="tls" scheme="https://www.voidking.com/tags/tls/"/>
    
  </entry>
  
  <entry>
    <title>K8S集群中etcd备份和恢复</title>
    <link href="https://www.voidking.com/dev-k8s-etcd-backup-restore/"/>
    <id>https://www.voidking.com/dev-k8s-etcd-backup-restore/</id>
    <published>2020-03-08T22:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>就像备份数据库一样，很多时候，我们也想对k8s资源配置进行备份。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> <span class="built_in">all</span> --<span class="built_in">all</span>-namespaces -o yaml &gt; <span class="built_in">all</span>-deploy-services.yaml</span><br></pre></td></tr></table></figure><p>上面的方法，可以实现对k8s资源配置的备份。但是更好的办法，是对etcd进行备份。本文就学习一下k8s中etcd的备份和恢复方法。</p><a id="more"></a><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>1、查看配置</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod etcd-<span class="keyword">master</span> <span class="title">-n</span> kube-system | grep Command -i -A <span class="number">20</span></span><br></pre></td></tr></table></figure><p>看到Command字段为：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Command:</span><br><span class="line">  etcd</span><br><span class="line">  -<span class="ruby">-advertise-client-urls=<span class="symbol">https:</span>/<span class="regexp">/172.17.0.10:2379</span></span></span><br><span class="line"><span class="ruby">  --cert-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.crt</span></span></span><br><span class="line"><span class="ruby">  --client-cert-auth=<span class="literal">true</span></span></span><br><span class="line"><span class="ruby">  --data-dir=<span class="regexp">/var/lib</span><span class="regexp">/etcd</span></span></span><br><span class="line"><span class="ruby">  --initial-advertise-peer-urls=<span class="symbol">https:</span>/<span class="regexp">/172.17.0.10:2380</span></span></span><br><span class="line"><span class="ruby">  --initial-cluster=master=<span class="symbol">https:</span>/<span class="regexp">/172.17.0.10:2380</span></span></span><br><span class="line"><span class="ruby">  --key-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.key</span></span></span><br><span class="line"><span class="ruby">  --listen-client-urls=<span class="symbol">https:</span>/<span class="regexp">/127.0.0.1:2379,https:/</span><span class="regexp">/172.17.0.10:2379</span></span></span><br><span class="line"><span class="ruby">  --listen-metrics-urls=<span class="symbol">http:</span>/<span class="regexp">/127.0.0.1:2381</span></span></span><br><span class="line"><span class="ruby">  --listen-peer-urls=<span class="symbol">https:</span>/<span class="regexp">/172.17.0.10:2380</span></span></span><br><span class="line"><span class="ruby">  --name=master</span></span><br><span class="line"><span class="ruby">  --peer-cert-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/peer.crt</span></span></span><br><span class="line"><span class="ruby">  --peer-client-cert-auth=<span class="literal">true</span></span></span><br><span class="line"><span class="ruby">  --peer-key-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/peer.key</span></span></span><br><span class="line"><span class="ruby">  --peer-trusted-ca-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt</span></span></span><br><span class="line"><span class="ruby">  --snapshot-count=<span class="number">10000</span></span></span><br><span class="line"><span class="ruby">  --trusted-ca-file=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt</span></span></span><br></pre></td></tr></table></figure><p>或者查看/etc/kubernetes/manifests/etcd.yaml。</p><p>2、执行备份</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">-<span class="ruby">-endpoints=<span class="symbol">https:</span>/<span class="regexp">/[127.0.0.1]:2379 \</span></span></span><br><span class="line"><span class="ruby">--cacert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt \</span></span></span><br><span class="line"><span class="ruby">--cert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.crt \</span></span></span><br><span class="line"><span class="ruby">--key=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.key \</span></span></span><br><span class="line"><span class="ruby">snapshot save /tmp/snapshot-pre-boot.db</span></span><br></pre></td></tr></table></figure><p>3、查看备份</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">-<span class="ruby">-endpoints=<span class="symbol">https:</span>/<span class="regexp">/[127.0.0.1]:2379 \</span></span></span><br><span class="line"><span class="ruby">--cacert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt \</span></span></span><br><span class="line"><span class="ruby">--cert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.crt \</span></span></span><br><span class="line"><span class="ruby">--key=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.key \</span></span></span><br><span class="line"><span class="ruby">snapshot status /tmp/snapshot-pre-boot.db -w table</span></span><br></pre></td></tr></table></figure><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><p>1、恢复etcd数据</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">-<span class="ruby">-endpoints=<span class="symbol">https:</span>/<span class="regexp">/[127.0.0.1]:2379 \</span></span></span><br><span class="line"><span class="ruby">--cacert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/ca.crt \</span></span></span><br><span class="line"><span class="ruby">--cert=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.crt \</span></span></span><br><span class="line"><span class="ruby">--key=<span class="regexp">/etc/kubernetes</span><span class="regexp">/pki/etcd</span><span class="regexp">/server.key \</span></span></span><br><span class="line"><span class="ruby">--initial-cluster=master=<span class="symbol">https:</span>/<span class="regexp">/127.0.0.1:2380 \</span></span></span><br><span class="line"><span class="ruby">--initial-cluster-token etcd-cluster-<span class="number">1</span> \</span></span><br><span class="line"><span class="ruby">--initial-advertise-peer-urls=<span class="symbol">https:</span>/<span class="regexp">/127.0.0.1:2380 \</span></span></span><br><span class="line"><span class="ruby">--name=master \</span></span><br><span class="line"><span class="ruby">--data-dir /var/lib/etcd-from-backup \</span></span><br><span class="line"><span class="ruby">snapshot restore /tmp/snapshot-pre-boot.db</span></span><br></pre></td></tr></table></figure><p>2、修改etcd.yaml<br><code>vim /etc/kubernetes/manifests/etcd.yaml</code>，如下修改：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">Update</span> --data-dir <span class="keyword">to</span> <span class="keyword">use</span> new target location</span><br><span class="line">--data-dir=/var/lib/etcd-<span class="keyword">from</span>-backup</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Update</span> new initial-<span class="keyword">cluster</span>-token <span class="keyword">to</span> specify new <span class="keyword">cluster</span></span><br><span class="line">--initial-<span class="keyword">cluster</span>-token=etcd-<span class="keyword">cluster</span><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">Update</span> volumes <span class="keyword">and</span> volume mounts <span class="keyword">to</span> point <span class="keyword">to</span> new <span class="keyword">path</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /var/lib/etcd-<span class="keyword">from</span>-backup</span><br><span class="line">      name: etcd-data</span><br><span class="line">    - mountPath: /etc/kubernetes/pki/etcd</span><br><span class="line">      name: etcd-certs</span><br><span class="line">  hostNetwork: <span class="literal">true</span></span><br><span class="line">  priorityClassName: <span class="keyword">system</span>-<span class="keyword">cluster</span>-critical</span><br><span class="line">  volumes:</span><br><span class="line">  - hostPath:</span><br><span class="line">      <span class="keyword">path</span>: /var/lib/etcd-<span class="keyword">from</span>-backup</span><br><span class="line">      <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line">    name: etcd-data</span><br><span class="line">  - hostPath:</span><br><span class="line">      <span class="keyword">path</span>: /etc/kubernetes/pki/etcd</span><br><span class="line">      <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line">    name: etcd-certs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;就像备份数据库一样，很多时候，我们也想对k8s资源配置进行备份。&lt;/p&gt;
&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl &lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;all&lt;/span&gt; --&lt;span class=&quot;built_in&quot;&gt;all&lt;/span&gt;-namespaces -o yaml &amp;gt; &lt;span class=&quot;built_in&quot;&gt;all&lt;/span&gt;-deploy-services.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的方法，可以实现对k8s资源配置的备份。但是更好的办法，是对etcd进行备份。本文就学习一下k8s中etcd的备份和恢复方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeadm升级K8S集群</title>
    <link href="https://www.voidking.com/dev-kubeadm-upgrade/"/>
    <id>https://www.voidking.com/dev-kubeadm-upgrade/</id>
    <published>2020-03-08T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8S组件版本说明"><a href="#K8S组件版本说明" class="headerlink" title="K8S组件版本说明"></a>K8S组件版本说明</h1><p>k8s集群中的常见组件包括：<br>A类：kube-apiserver<br>B类：controller-manager、kube-scheduler<br>C类：kubelet、kube-proxy<br>D类：etcd cluster、CoreDNS<br>E类：kubectl</p><p>组件的版本号一般表示为 major.minor.patch，比如v1.10.3。其中，A类组件是主要组件，以它为版本基准。比如，A类组件版本的minor号为x，那么B类组件版本必须为x或者x-1，C类组件版本必须为x、x-1或者x-2，E类组件版本必须为x、x-1或者x+1。而D类组件，和A类组件不是同一版本体系，版本兼容情况需要查看文档。整理成表格如下：</p><table><thead><tr><th>组件类别</th><th>minor版本</th><th>组件</th></tr></thead><tbody><tr><td>A类</td><td>x</td><td>kube-apiserver</td></tr><tr><td>B类</td><td>x、x-1</td><td>controller-manager、kube-scheduler</td></tr><tr><td>C类</td><td>x、x-1、x-2</td><td>kubelet、kube-proxy</td></tr><tr><td>E类</td><td>x、x-1、x+1</td><td>kubectl</td></tr><tr><td>D类</td><td>查看文档</td><td>etcd cluster、CoreDNS</td></tr></tbody></table><p>本文学习使用kubeadm进行k8s集群的升级。</p><a id="more"></a><h1 id="升级顺序"><a href="#升级顺序" class="headerlink" title="升级顺序"></a>升级顺序</h1><p>推荐的升级方法，是根据minor版本号逐级进行升级。比如v1.10.0想要升级到v1.13.0，不应该直接升级到v1.13.0，而是应该v1.10.0-&gt;v1.11.0-&gt;v1.12.0-&gt;v1.13.0。</p><p>升级顺序一般为：<br>1、升级kubeadm<br>2、升级master node<br>3、升级worker node<br>4、升级kubelet</p><h1 id="升级操作"><a href="#升级操作" class="headerlink" title="升级操作"></a>升级操作</h1><p>以v1.11.0升级v1.12.0为例。</p><h2 id="master节点"><a href="#master节点" class="headerlink" title="master节点"></a>master节点</h2><p>1、查看升级帮助<br><code>kubeadm upgrade plan</code></p><p>2、升级kubeadm</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>-y <span class="attribute">kubeadm</span>=1.12.0-00</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">apt install <span class="attribute">kubeadm</span>=1.12.0-00</span><br></pre></td></tr></table></figure><p>3、升级k8s的AB类组件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm<span class="built_in"> upgrade </span>apply v1.12.0</span><br></pre></td></tr></table></figure><p>此时使用kubectl get nodes，看到的version依然是v1.11.0，因为这里显示的是kubelet的版本，而不是kube-apiserver的版本。</p><p>4、升级master节点的kubelet</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install kubelet=<span class="number">1.12</span><span class="number">.0</span><span class="number">-00</span></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="worker节点"><a href="#worker节点" class="headerlink" title="worker节点"></a>worker节点</h2><p>1、驱逐worker节点的pods，封锁节点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain <span class="keyword">node</span><span class="title">-1</span></span><br><span class="line">kubectl cordon <span class="keyword">node</span><span class="title">-1</span></span><br></pre></td></tr></table></figure><p>2、升级kubeadm和kubectl</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install <span class="attribute">kubeadm</span>=1.12.0-00</span><br><span class="line">apt-<span class="builtin-name">get</span> install <span class="attribute">kubelet</span>=1.12.0-00</span><br><span class="line">kubeadm<span class="built_in"> upgrade </span>node<span class="built_in"> config </span>--kubelet-version v1.12.0</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>3、解除节点封锁<br><code>kubectl uncordon node-1</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;K8S组件版本说明&quot;&gt;&lt;a href=&quot;#K8S组件版本说明&quot; class=&quot;headerlink&quot; title=&quot;K8S组件版本说明&quot;&gt;&lt;/a&gt;K8S组件版本说明&lt;/h1&gt;&lt;p&gt;k8s集群中的常见组件包括：&lt;br&gt;A类：kube-apiserver&lt;br&gt;B类：controller-manager、kube-scheduler&lt;br&gt;C类：kubelet、kube-proxy&lt;br&gt;D类：etcd cluster、CoreDNS&lt;br&gt;E类：kubectl&lt;/p&gt;
&lt;p&gt;组件的版本号一般表示为 major.minor.patch，比如v1.10.3。其中，A类组件是主要组件，以它为版本基准。比如，A类组件版本的minor号为x，那么B类组件版本必须为x或者x-1，C类组件版本必须为x、x-1或者x-2，E类组件版本必须为x、x-1或者x+1。而D类组件，和A类组件不是同一版本体系，版本兼容情况需要查看文档。整理成表格如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件类别&lt;/th&gt;
&lt;th&gt;minor版本&lt;/th&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;A类&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;kube-apiserver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B类&lt;/td&gt;
&lt;td&gt;x、x-1&lt;/td&gt;
&lt;td&gt;controller-manager、kube-scheduler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C类&lt;/td&gt;
&lt;td&gt;x、x-1、x-2&lt;/td&gt;
&lt;td&gt;kubelet、kube-proxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E类&lt;/td&gt;
&lt;td&gt;x、x-1、x+1&lt;/td&gt;
&lt;td&gt;kubectl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D类&lt;/td&gt;
&lt;td&gt;查看文档&lt;/td&gt;
&lt;td&gt;etcd cluster、CoreDNS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;本文学习使用kubeadm进行k8s集群的升级。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置GateOne</title>
    <link href="https://www.voidking.com/dev-docker-gateone/"/>
    <id>https://www.voidking.com/dev-docker-gateone/</id>
    <published>2020-03-03T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GateOne简介"><a href="#GateOne简介" class="headerlink" title="GateOne简介"></a>GateOne简介</h1><blockquote><p>Gate One is a web-based Terminal Emulator and SSH client that brings the power of the command line to the web. It requires no browser plugins and is built on top of a powerful plugin system that allows every aspect of its appearance and functionality to be customized.</p></blockquote><p>本文使用Docker安装配置GateOne，搭建一个Web Shell环境。<br>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.130。</p><a id="more"></a><h1 id="安装GateOne"><a href="#安装GateOne" class="headerlink" title="安装GateOne"></a>安装GateOne</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/liftoff/gateone" target="_blank" rel="noopener">liftoff/gateone版本</a>，实际上只有一个版本。</p><p>2、下载gateone镜像<br><code>docker pull liftoff/gateone</code></p><p>3、启动gateone服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> <span class="attribute">--name</span>=vk-gateone -d \</span><br><span class="line">-p 8000:8000 \</span><br><span class="line">liftoff/gateone gateone</span><br></pre></td></tr></table></figure><p>以上命令：命名容器为vk-gateone，后台运行；映射宿主机8000端口到容器8000端口。</p><p>更多命令参考<a href="https://hub.docker.com/r/liftoff/gateone" target="_blank" rel="noopener">Using this Image</a>。</p><p>4、验证安装<br><code>docker ps</code><br>gateone启动正常的话就可以看到vk-gateone容器。<br>如果启动失败，可以使用<code>docker logs vk-gateone</code>查看失败原因并进行解决。</p><p>使用nc命令验证：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install nc</span></span><br><span class="line"><span class="attr">nc</span> <span class="string">-v localhost 8000</span></span><br></pre></td></tr></table></figure><p>浏览器访问： <a href="https://192.168.56.130:8000" target="_blank" rel="noopener">https://192.168.56.130:8000</a></p><p>5、使用<br>点击 Terminal:SSH ，输入主机IP、端口号、用户名和密码，即可登录主机。</p><p>如果想要添加鉴权验证，参考<a href="https://wiki.archlinux.org/index.php/Gateone" target="_blank" rel="noopener">archlinux-Gateone</a>和<a href="http://liftoff.github.io/GateOne/Developer/embedding_api_auth.html" target="_blank" rel="noopener">API Authentication</a>。</p><h1 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h1><p>如果浏览器无法访问8000端口，那么需要对防火墙进行设置。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="params">--add-port=8000/tcp</span> <span class="params">--permanent</span></span><br><span class="line">systemctl <span class="keyword">reload</span> firewalld</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h1 id="安装openssh-server"><a href="#安装openssh-server" class="headerlink" title="安装openssh-server"></a>安装openssh-server</h1><p>1、进入vk-gateone<br><code>docker exec -it vk-gateone /bin/bash</code></p><p>2、安装openssh-server</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br><span class="line">apt <span class="keyword">install</span> openssh-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>3、<code>vim /etc/ssh/sshd_config</code>，如下修改：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PasswordAuthentication</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>4、重启ssh<br><code>service ssh restart</code></p><p>5、添加用户</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">useradd</span> <span class="string">-m voidking -s /bin/bash</span></span><br><span class="line"><span class="attr">passwd</span> <span class="string">voidking</span></span><br><span class="line"><span class="attr">adduser</span> <span class="string">voidking sudo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装sudo命令（该容器内没有sudo）</span></span><br><span class="line"><span class="attr">apt</span> <span class="string">install sudo</span></span><br></pre></td></tr></table></figure><p>6、登录vk-gateone容器<br>点击 Terminal:SSH ，主机名和端口使用默认，输入用户名voidking和密码，即可登录vk-gateone。</p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p>在gateone shell里，可以使用 ctrl+insert 进行复制，使用 shift+insert 进行粘贴。<br>如果在界面无法使用鼠标光标选中一些区域，那么可以在任意位置进行双击，即可激活光标选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GateOne简介&quot;&gt;&lt;a href=&quot;#GateOne简介&quot; class=&quot;headerlink&quot; title=&quot;GateOne简介&quot;&gt;&lt;/a&gt;GateOne简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Gate One is a web-based Terminal Emulator and SSH client that brings the power of the command line to the web. It requires no browser plugins and is built on top of a powerful plugin system that allows every aspect of its appearance and functionality to be customized.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文使用Docker安装配置GateOne，搭建一个Web Shell环境。&lt;br&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.130。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="ssh" scheme="https://www.voidking.com/tags/ssh/"/>
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用Gulp压缩静态资源</title>
    <link href="https://www.voidking.com/dev-hexo-gulp/"/>
    <id>https://www.voidking.com/dev-hexo-gulp/</id>
    <published>2020-02-08T10:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gulp简介"><a href="#Gulp简介" class="headerlink" title="Gulp简介"></a>Gulp简介</h1><p>gulp是一个自动化构建工具，能够强化我们的前端工作流。</p><blockquote><p>gulp is an open-source JavaScript toolkit created by Eric Schoffstall used as a streaming build system (similar to a more package-focussed Make) in front-end web development.</p></blockquote><blockquote><p>It is a task runner built on Node.js and npm, used for automation of time-consuming and repetitive tasks involved in web development like minification, concatenation, cache busting, unit testing, linting, optimization, etc.</p></blockquote><blockquote><p>gulp uses a code-over-configuration approach to define its tasks and relies on its small, single-purpose plugins to carry them out. The gulp ecosystem includes more than 3500 such plugins.</p></blockquote><p>更多内容，参考<a href="https://en.wikipedia.org/wiki/Gulp.js" target="_blank" rel="noopener">wikipedia-gulp.js</a>、<a href="https://gulpjs.com/" target="_blank" rel="noopener">Gulp官网</a>和<a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp中文网</a>。<br>本文中，会使用gulp来压缩hexo生成的静态资源文件，加快站点的访问速度。</p><a id="more"></a><h1 id="安装配置gulp"><a href="#安装配置gulp" class="headerlink" title="安装配置gulp"></a>安装配置gulp</h1><p>1、安装gulp<br><code>npm install --global gulp-cli</code></p><p>2、安装gulp模块</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>gulp --save</span><br><span class="line">npm <span class="keyword">install </span>gulp-htmlclean gulp-htmlmin gulp-clean-css gulp-uglify gulp-imagemin --save</span><br><span class="line">npm <span class="keyword">install </span>gulp-<span class="keyword">babel </span><span class="keyword">babel-preset-env </span><span class="keyword">babel-preset-mobx </span>--save</span><br><span class="line">npm <span class="keyword">install </span>-D @<span class="keyword">babel/core </span>@<span class="keyword">babel/preset-react </span>@<span class="keyword">babel/preset-env </span>--save</span><br></pre></td></tr></table></figure><p>最终生成的package.json为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">    <span class="attr">"clean"</span>: <span class="string">"hexo clean"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"hexo server"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"4.2.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.7.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-mobx"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^4.0.2"</span>,</span><br><span class="line">    <span class="attr">"gulp-babel"</span>: <span class="string">"^8.0.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-clean-css"</span>: <span class="string">"^4.2.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-htmlclean"</span>: <span class="string">"^2.7.22"</span>,</span><br><span class="line">    <span class="attr">"gulp-htmlmin"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="attr">"gulp-imagemin"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"gulp-uglify"</span>: <span class="string">"^3.0.2"</span>,</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-baidu-sitemap"</span>: <span class="string">"^0.1.6"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-feed"</span>: <span class="string">"^2.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-searchdb"</span>: <span class="string">"^1.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-sitemap"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-neat"</span>: <span class="string">"^1.0.4"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^1.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.8.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.8.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-react"</span>: <span class="string">"^7.8.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在hexo目录创建gulpfile.js，内容为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">let</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</span><br><span class="line"><span class="keyword">let</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"><span class="keyword">let</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>)</span><br><span class="line"><span class="keyword">let</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>) <span class="comment">/* 转换为es2015 */</span></span><br><span class="line"><span class="keyword">let</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</span><br><span class="line"><span class="keyword">let</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="string">'./public'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配模式， **/*代表匹配所有目录下的所有文件</span></span><br><span class="line"><span class="keyword">const</span> pattern = <span class="string">'**/*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    <span class="comment">// 匹配所有 .html结尾的文件</span></span><br><span class="line">    .src(<span class="string">`<span class="subst">$&#123;root&#125;</span>/<span class="subst">$&#123;pattern&#125;</span>.html`</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    <span class="comment">// 匹配所有 .css结尾的文件</span></span><br><span class="line">    .src(<span class="string">`<span class="subst">$&#123;root&#125;</span>/<span class="subst">$&#123;pattern&#125;</span>.css`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      cleanCSS(&#123;</span><br><span class="line">        compatibility: <span class="string">'ie8'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    <span class="comment">// 匹配所有 .js结尾的文件</span></span><br><span class="line">    .src(<span class="string">`<span class="subst">$&#123;root&#125;</span>/<span class="subst">$&#123;pattern&#125;</span>.js`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      babel(&#123;</span><br><span class="line">        presets: [<span class="string">'env'</span>]</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    <span class="comment">// 匹配public/images目录下的所有文件</span></span><br><span class="line">    .src(<span class="string">`<span class="subst">$&#123;root&#125;</span>/images/<span class="subst">$&#123;pattern&#125;</span>`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      imagemin(</span><br><span class="line">        [</span><br><span class="line">          imagemin.gifsicle(&#123; <span class="attr">optimizationLevel</span>: <span class="number">3</span> &#125;),</span><br><span class="line">          imagemin.jpegtran(&#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">          imagemin.optipng(&#123; <span class="attr">optimizationLevel</span>: <span class="number">7</span> &#125;),</span><br><span class="line">          imagemin.svgo()</span><br><span class="line">        ],</span><br><span class="line">        &#123; <span class="attr">verbose</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public/images'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>))</span><br></pre></td></tr></table></figure><p>4、执行压缩<br><code>gulp</code></p><h1 id="命令精简"><a href="#命令精简" class="headerlink" title="命令精简"></a>命令精简</h1><p>使用了gulp时候，构建发布需要四个命令：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">gulp</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>这四个命令，可以都写在package.json。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; gulp"</span>,</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建只需要执行<code>npm run build</code>，构建发布只需要执行<code>npm run deploy</code>。</p><h1 id="travis配置"><a href="#travis配置" class="headerlink" title="travis配置"></a>travis配置</h1><p>对应的，修改.travis.yml配置为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line"><span class="keyword">language</span>: node_js</span><br><span class="line">node_j<span class="variable">s:</span></span><br><span class="line">  - <span class="number">10.16</span>.<span class="number">3</span></span><br><span class="line">cache: npm</span><br><span class="line">branche<span class="variable">s:</span></span><br><span class="line">  <span class="keyword">only</span>:</span><br><span class="line">    - master # build master branch <span class="keyword">only</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">en</span><span class="variable">v:</span></span><br><span class="line"> globa<span class="variable">l:</span></span><br><span class="line">   - HEXO_BACKUP_REPO: github.<span class="keyword">com</span>/voidking/hexo-backup.git</span><br><span class="line">   - HEXO_THEME_REPO: github.<span class="keyword">com</span>/voidking/hexo-theme-<span class="keyword">next</span>.git</span><br><span class="line">   - GITHUB_PAGES_REPO: github.<span class="keyword">com</span>/voidking/voidking.github.io.git</span><br><span class="line">   - VOIDKING_REPO: github.<span class="keyword">com</span>/voidking/voidking.git</span><br><span class="line"></span><br><span class="line">before_instal<span class="variable">l:</span></span><br><span class="line">  - npm install hexo -g</span><br><span class="line">  - npm install gulp-cli -g</span><br><span class="line"></span><br><span class="line">instal<span class="variable">l:</span></span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line"><span class="keyword">scrip</span><span class="variable">t:</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;HEXO_THEME_REPO&#125; themes/<span class="keyword">next</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;GITHUB_TOKEN&#125;@$&#123;HEXO_BACKUP_REPO&#125; hexo-backup</span><br><span class="line">  - mv hexo-backup/<span class="keyword">source</span> .</span><br><span class="line">  - rm -rf <span class="keyword">source</span>/private</span><br><span class="line">  - npm run build</span><br><span class="line"></span><br><span class="line">after_succes<span class="variable">s:</span></span><br><span class="line">  - git config --<span class="keyword">global</span> user.name <span class="string">"voidking"</span></span><br><span class="line">  - git config --<span class="keyword">global</span> user.email <span class="string">"voidking@qq.com"</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125; voidking</span><br><span class="line">  - unalias <span class="keyword">cp</span></span><br><span class="line">  - <span class="keyword">cp</span> -rf public/* voidking</span><br><span class="line">  - <span class="keyword">cd</span> voidking</span><br><span class="line">  - git <span class="built_in">add</span> .</span><br><span class="line">  - git commit -<span class="keyword">m</span> <span class="string">"Travis CI Auto Builder"</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125;"</span> master:master</span><br></pre></td></tr></table></figure><h1 id="精简search-xml"><a href="#精简search-xml" class="headerlink" title="精简search.xml"></a>精简search.xml</h1><p>html、css和js都压缩了，很开心。但是，还有一个大文件没有压缩，就是本地搜索的DB文件search.xml。我的博客有接近600篇文章，这个search.xml文件的大小为7.5M，很大。<br>打开search.xml文件，发现里面不止包含文章内容，还包含html标签。参考<a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a>，发现可以设置不生成标签。</p><h2 id="修改localsearch配置"><a href="#修改localsearch配置" class="headerlink" title="修改localsearch配置"></a>修改localsearch配置</h2><p>1、修改<code>hexo/_config.yml</code>的localsearch配置为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">striptags</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>2、重新生成search.xml文件，新的文件只有3.5M。</p><p>3、修改local-search.js<br>为了正常使用搜索功能，需要修改hexo主题的local-search.js。如果不修改的话，搜索时只搜索标题，不会搜索内容。编辑<code>next/source/js/local-search.js</code>，如下修改：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// line <span class="number">120</span></span><br><span class="line">// <span class="keyword">let</span> content = <span class="class"><span class="keyword">data</span>.content ? <span class="keyword">data</span>.content.trim().replace(/&lt;[^&gt;]+&gt;/<span class="title">g</span>, '') : '';</span></span><br><span class="line"><span class="title">let</span> content = <span class="class"><span class="keyword">data</span>.content;</span></span><br></pre></td></tr></table></figure><p>以上，实现了search.xml的精简，nice。</p><h2 id="自定义精简"><a href="#自定义精简" class="headerlink" title="自定义精简"></a>自定义精简</h2><p>但是，3.5M依然很大，能不能再精简一下？可以。<br>1、localsearch的format改回html。</p><p>2、修改xml_generator.js<br>编辑<code>hexo/node_modules/hexo-generator-searchdb/lib/xml_generator.js</code>，定义自己想要删除的字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> nunjucks = <span class="built_in">require</span>(<span class="string">'nunjucks'</span>);</span><br><span class="line"><span class="keyword">var</span> env = <span class="keyword">new</span> nunjucks.Environment();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> searchTmplSrc = path.join(__dirname, <span class="string">'../templates/search.xml'</span>);</span><br><span class="line"><span class="keyword">var</span> searchTmpl = nunjucks.compile(fs.readFileSync(searchTmplSrc, <span class="string">'utf8'</span>), env);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stripe_code_line_num = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123; <span class="comment">// 去除代码</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;figure class="highlight.*?&lt;\/figure&gt;/ig</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stripe = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123; <span class="comment">// 去除html标签</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/(&lt;([^&gt;]+)&gt;)/ig</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> minify = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123; <span class="comment">// 压缩成一行</span></span><br><span class="line">    <span class="keyword">return</span> str.trim().replace(<span class="regexp">/\n/g</span>, <span class="string">' '</span>).replace(<span class="regexp">/\s+/g</span>, <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> database = <span class="built_in">require</span>(<span class="string">'./database'</span>)(locals, config);</span><br><span class="line">  database.forEach( <span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">    element.content = minify(stripe(stripe_code_line_num(element.content)));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> xml = searchTmpl.render(&#123;</span><br><span class="line">    articles: database,</span><br><span class="line">    config  : config.search</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    path: config.search.path,</span><br><span class="line">    data: xml</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、重新生成search.xml，这次只有2.5M，nice。</p><p>以上两种精简search.xml的方法都很好，这里我选择使用修改localsearch format的方法。因为如果在xml_generator.js不删除文章中的代码，两种方法的压缩结果基本相同，而方法一通用性更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gulp简介&quot;&gt;&lt;a href=&quot;#Gulp简介&quot; class=&quot;headerlink&quot; title=&quot;Gulp简介&quot;&gt;&lt;/a&gt;Gulp简介&lt;/h1&gt;&lt;p&gt;gulp是一个自动化构建工具，能够强化我们的前端工作流。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gulp is an open-source JavaScript toolkit created by Eric Schoffstall used as a streaming build system (similar to a more package-focussed Make) in front-end web development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a task runner built on Node.js and npm, used for automation of time-consuming and repetitive tasks involved in web development like minification, concatenation, cache busting, unit testing, linting, optimization, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;gulp uses a code-over-configuration approach to define its tasks and relies on its small, single-purpose plugins to carry them out. The gulp ecosystem includes more than 3500 such plugins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://en.wikipedia.org/wiki/Gulp.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wikipedia-gulp.js&lt;/a&gt;、&lt;a href=&quot;https://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gulp官网&lt;/a&gt;和&lt;a href=&quot;https://www.gulpjs.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gulp中文网&lt;/a&gt;。&lt;br&gt;本文中，会使用gulp来压缩hexo生成的静态资源文件，加快站点的访问速度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="前端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="gulp" scheme="https://www.voidking.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置Travis CI自动发布</title>
    <link href="https://www.voidking.com/dev-hexo-travis-ci/"/>
    <id>https://www.voidking.com/dev-hexo-travis-ci/</id>
    <published>2020-02-02T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CI-CD-and-CD"><a href="#CI-CD-and-CD" class="headerlink" title="CI, CD and CD"></a>CI, CD and CD</h1><p>CI，CONTINUOUS INTEGRATION，持续集成。<br>在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。</p><p>CD，CONTINUOUS DELIVERY，持续交付。<br>持续交付就是应用发布出去的过程。这个过程可以确保我们尽可能快的实现交付。这就意味着除了自动化测试，我们还需要有自动化的发布流，以及通过一个按键就可以随时随地实现应用的部署上线。为了发挥持续交付的优势，一般需要先进行小批量发布，尽快部署到生产线，以便在出现问题时方便进行故障排除。</p><p>CD，CONTINUOUS DEPLOYMENT，持续部署。<br>持续部署是持续集成和持续交付的合并。当开发人员在主分支中合并一个提交时，会触发工作流，包括构建、单元测试、预发布、验收测试、生产发布、冒烟测试等。如果一切顺利，则成功部署到生产环境中。如果某个工作流失败，则不会部署到生产环境。</p><p>更多关于CI/CD内容参考<a href="http://www.ttlsa.com/news/ci-cd-cd/" target="_blank" rel="noopener">详解CI、CD &amp; CD</a>和<a href="https://linux.cn/article-9926-1.html" target="_blank" rel="noopener">什么是 CI/CD？</a>，关于发布环境的划分参考<a href="https://en.wikipedia.org/wiki/Deployment_environment" target="_blank" rel="noopener">Deployment environment</a>。</p><p>在gitlab中，无论是CI、CD还是CD，都可以通过配置gitlab-ci.yml来实现。而github，在2019年8月8日也支持内置的CI/CD了。但是本文中，并不是使用github内置的CI/CD，而是使用Travis CI来实现hexo的自动发布。</p><p><a href="https://www.voidking.com/hexo-multi-git/">《Hexo配置多个git仓库》</a>一文中已经学习了hexo配置多个git仓库的方法，发布项目也很简单。为什么还需要hexo的自动发布？因为发布流程还可以更简单。而且，现在的发布方式，如果想要多台电脑同时使用，那么每台电脑都需要配置hexo环境，很麻烦。如果本地只负责写写markdown文件，而构建发布都放到云端，是不是更加美好？本文要做的，就是这样一件事。</p><a id="more"></a><h1 id="安装配置本地hexo"><a href="#安装配置本地hexo" class="headerlink" title="安装配置本地hexo"></a>安装配置本地hexo</h1><p>参考<a href="https://www.voidking.com/dev-hexo-build-environment-2018-05/">《Hexo环境搭建2018年5月版》</a>，安装v10.16.3版本的node，创建hexo项目，然后把需要的依赖写入package.json：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>接下来改造hexo配置，用于Travis CI发布。</p><p>1、创建hexo-deploy项目<br>在github创建public项目hexo-deploy，git clone到本地，然后把hexo项目里的内容剪切到hexo-deploy目录。</p><p>2、配置config.yml<br>编辑config.yml，根据自己的需要进行配置。</p><p>3、清理文件<br>hexo-deploy目录里只需要保留：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.git</span></span><br><span class="line"><span class="selector-class">.gitignore</span></span><br><span class="line"><span class="selector-tag">package</span><span class="selector-class">.json</span></span><br><span class="line">_<span class="selector-tag">config</span><span class="selector-class">.yml</span></span><br><span class="line"><span class="selector-tag">README</span><span class="selector-class">.md</span></span><br></pre></td></tr></table></figure><h1 id="配置travis-yml"><a href="#配置travis-yml" class="headerlink" title="配置travis.yml"></a>配置travis.yml</h1><p>主要参考<a href="https://www.jianshu.com/p/5691815b81b6" target="_blank" rel="noopener">使用Travis CI持续部署Hexo博客</a>和<a href="https://hexo.io/zh-tw/docs/github-pages" target="_blank" rel="noopener">將 Hexo 部署到 GitHub Pages</a>。<br>已知 voidking.github.io 和 voidking 是hexo发布后的git仓库（public），hexo-backup是存储markdown文件的git仓库（private）。</p><p>1、安装Travis CI插件<br>在github添加<a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">Travis CI插件</a>，并且在<a href="https://github.com/settings/installations" target="_blank" rel="noopener">Applications settings</a>配置Travis CI的权限。</p><p>2、生成access token<br>访问github的<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a>页面，Generate new token。Note输入travis，Select scope选择repo，然后点击Generate token。生成了一个token，保存它。<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci/newtoken.jpg?imageView2/0/w/700" alt=""></p><p>3、添加access token<br>访问<a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI Pro</a>，找到hexo-deploy项目，Settings，在Environment Variables一栏填入Name为<code>GITHUB_TOKEN</code>，VALUE为github的access token。<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci/env.jpg?imageView2/0/w/700" alt=""></p><p>3、在hexo-deploy目录下添加<code>.travis.yml</code>文件，内容为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line"><span class="keyword">language</span>: node_js</span><br><span class="line">node_j<span class="variable">s:</span></span><br><span class="line">  - <span class="number">10.16</span>.<span class="number">3</span></span><br><span class="line">cache: npm</span><br><span class="line">branche<span class="variable">s:</span></span><br><span class="line">  <span class="keyword">only</span>:</span><br><span class="line">    - master # build master branch <span class="keyword">only</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">en</span><span class="variable">v:</span></span><br><span class="line"> globa<span class="variable">l:</span></span><br><span class="line">   - HEXO_BACKUP_REPO: github.<span class="keyword">com</span>/voidking/hexo-backup.git</span><br><span class="line">   - HEXO_THEME_REPO: github.<span class="keyword">com</span>/voidking/hexo-theme-<span class="keyword">next</span>.git</span><br><span class="line">   - GITHUB_PAGES_REPO: github.<span class="keyword">com</span>/voidking/voidking.github.io.git</span><br><span class="line">   - VOIDKING_REPO: github.<span class="keyword">com</span>/voidking/voidking.git</span><br><span class="line"></span><br><span class="line">before_instal<span class="variable">l:</span></span><br><span class="line">  - npm install hexo -g</span><br><span class="line"></span><br><span class="line">instal<span class="variable">l:</span></span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line"><span class="keyword">scrip</span><span class="variable">t:</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;HEXO_THEME_REPO&#125; themes/<span class="keyword">next</span></span><br><span class="line">  - git clone http<span class="variable">s:</span>//$&#123;GITHUB_TOKEN&#125;@$&#123;HEXO_BACKUP_REPO&#125; hexo-backup</span><br><span class="line">  - mv hexo-backup/<span class="keyword">source</span> .</span><br><span class="line">  - rm -rf <span class="keyword">source</span>/private</span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line">after_succes<span class="variable">s:</span></span><br><span class="line">  - git config --<span class="keyword">global</span> user.name <span class="string">"voidking"</span></span><br><span class="line">  - git config --<span class="keyword">global</span> user.email <span class="string">"voidking@qq.com"</span></span><br><span class="line">  - <span class="keyword">cd</span> ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git <span class="built_in">add</span> .</span><br><span class="line">  - git commit -<span class="keyword">m</span> <span class="string">"Travis CI Auto Builder"</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125;"</span> master:master</span><br><span class="line">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;VOIDKING_REPO&#125;"</span> master:master</span><br></pre></td></tr></table></figure><h1 id="hexo发布"><a href="#hexo发布" class="headerlink" title="hexo发布"></a>hexo发布</h1><p>在hexo-deploy项目中，修改README.md（建议添加日期信息），然后提交代码，触发发布。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">"20200202deploy"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>然后打开<a href="https://travis-ci.com/voidking/hexo-deploy" target="_blank" rel="noopener">Travis CI - hexo-deploy</a>，即可看到构建发布的日志。<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci/log.jpg?imageView2/0/w/800" alt=""><br>如果构建发布出错，根据提示修改发布脚本或者markdown文件即可。</p><p>至此，Hexo配置Travis CI自动发布完成！</p><h1 id="域名404问题"><a href="#域名404问题" class="headerlink" title="域名404问题"></a>域名404问题</h1><p>发布完成，出现了一个神奇的问题，<a href="http://www.voidking.com">www.voidking.com</a> 域名404。<br>查看github pages配置，发现自定义域名变回了 voidking.github.io 。<br><img src="http://cdn.voidking.com/@/imgs/hexo-travis-ci/pages.jpg?imageView2/0/w/700" alt=""><br>神奇了！莫非，是因为force push刷掉了git仓库的commit？那就保留commit试试。<br>修改.travis.yml的aftersuccess部分：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">after_success:</span><br><span class="line">  -<span class="ruby"> git config --global user.name <span class="string">"voidking"</span></span></span><br><span class="line"><span class="ruby">  - git config --global user.email <span class="string">"voidking@qq.com"</span></span></span><br><span class="line"><span class="ruby">  - git clone <span class="symbol">https:</span>/<span class="regexp">/$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125; voidking</span></span></span><br><span class="line"><span class="ruby">  - unalias cp</span></span><br><span class="line"><span class="ruby">  - cp -rf public/* voidking</span></span><br><span class="line"><span class="ruby">  - cd voidking</span></span><br><span class="line"><span class="ruby">  - git add .</span></span><br><span class="line"><span class="ruby">  - git commit -m <span class="string">"Travis CI Auto Builder"</span></span></span><br><span class="line"><span class="ruby">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GITHUB_PAGES_REPO&#125;"</span> <span class="symbol">master:</span>master</span></span><br><span class="line"><span class="ruby">  - cd ../public</span></span><br><span class="line"><span class="ruby">  - git init</span></span><br><span class="line"><span class="ruby">  - git add .</span></span><br><span class="line"><span class="ruby">  - git commit -m <span class="string">"Travis CI Auto Builder"</span></span></span><br><span class="line"><span class="ruby">  - git push --force --quiet <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;VOIDKING_REPO&#125;"</span> <span class="symbol">master:</span>master</span></span><br></pre></td></tr></table></figure><p>保留commit之后，自定义域名果然不会再变化，nice。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CI-CD-and-CD&quot;&gt;&lt;a href=&quot;#CI-CD-and-CD&quot; class=&quot;headerlink&quot; title=&quot;CI, CD and CD&quot;&gt;&lt;/a&gt;CI, CD and CD&lt;/h1&gt;&lt;p&gt;CI，CONTINUOUS INTEGRATION，持续集成。&lt;br&gt;在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。&lt;/p&gt;
&lt;p&gt;CD，CONTINUOUS DELIVERY，持续交付。&lt;br&gt;持续交付就是应用发布出去的过程。这个过程可以确保我们尽可能快的实现交付。这就意味着除了自动化测试，我们还需要有自动化的发布流，以及通过一个按键就可以随时随地实现应用的部署上线。为了发挥持续交付的优势，一般需要先进行小批量发布，尽快部署到生产线，以便在出现问题时方便进行故障排除。&lt;/p&gt;
&lt;p&gt;CD，CONTINUOUS DEPLOYMENT，持续部署。&lt;br&gt;持续部署是持续集成和持续交付的合并。当开发人员在主分支中合并一个提交时，会触发工作流，包括构建、单元测试、预发布、验收测试、生产发布、冒烟测试等。如果一切顺利，则成功部署到生产环境中。如果某个工作流失败，则不会部署到生产环境。&lt;/p&gt;
&lt;p&gt;更多关于CI/CD内容参考&lt;a href=&quot;http://www.ttlsa.com/news/ci-cd-cd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详解CI、CD &amp;amp; CD&lt;/a&gt;和&lt;a href=&quot;https://linux.cn/article-9926-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;什么是 CI/CD？&lt;/a&gt;，关于发布环境的划分参考&lt;a href=&quot;https://en.wikipedia.org/wiki/Deployment_environment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deployment environment&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在gitlab中，无论是CI、CD还是CD，都可以通过配置gitlab-ci.yml来实现。而github，在2019年8月8日也支持内置的CI/CD了。但是本文中，并不是使用github内置的CI/CD，而是使用Travis CI来实现hexo的自动发布。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/hexo-multi-git/&quot;&gt;《Hexo配置多个git仓库》&lt;/a&gt;一文中已经学习了hexo配置多个git仓库的方法，发布项目也很简单。为什么还需要hexo的自动发布？因为发布流程还可以更简单。而且，现在的发布方式，如果想要多台电脑同时使用，那么每台电脑都需要配置hexo环境，很麻烦。如果本地只负责写写markdown文件，而构建发布都放到云端，是不是更加美好？本文要做的，就是这样一件事。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="前端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/hexo/"/>
    
      <category term="基础" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="ci" scheme="https://www.voidking.com/tags/ci/"/>
    
      <category term="cd" scheme="https://www.voidking.com/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置多个git仓库</title>
    <link href="https://www.voidking.com/dev-hexo-multi-git/"/>
    <id>https://www.voidking.com/dev-hexo-multi-git/</id>
    <published>2020-02-01T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>在经历过域名被封之后，今天又经历了搬瓦工服务器IP被封，我太难了。。。o(╥﹏╥)o<br>服务器IP被封，带来了三个问题：第一个是不能愉快地科学上网了；第二个是内网穿透不能使用了；第三个是自己的 <a href="http://www.voidking.com">www.voidking.com</a> 域名无法访问了。</p><p>对于问题一，暂时使用免费的公共飞机场。对于问题二，暂时使用百度服务器，但是因为没有备案，所以不能进行域名解析。对于问题三，就是本文要解决的问题之一。</p><a id="more"></a><h1 id="回到github"><a href="#回到github" class="headerlink" title="回到github"></a>回到github</h1><p>那么，因为服务器IP被封，域名无法访问怎么办？</p><p>方法一：再购买一个新的搬瓦工IP，或者再购买一个新的国外服务器。但是因为不想再花钱（就是这么抠），所以这个方法被否定了。<br>方法二：使用免费的git pages服务，比如github pages、gitlab pages、gitee pages等，并且把域名解析到git pages服务器。这里我选择最开始搭建hexo就使用的github pages，它支持免费的自定义域名和https。</p><p>参考<a href="https://www.voidking.com/dev-hexo-build-environment/">《Hexo环境搭建》</a>和<a href="https://www.voidking.com/dev-hexo-build-environment-2018-05/">《Hexo环境搭建2018年5月版》</a>，配置好github pages服务，并且配置域名的CNAME解析到 voidking.github.io ，开启强制https（github会自动申请ssl证书，点个赞）。</p><h1 id="百度收录问题"><a href="#百度收录问题" class="headerlink" title="百度收录问题"></a>百度收录问题</h1><p>除了访问速度慢一点之外，现在我的域名已经正常了，nice。但是，另外的问题出现了：百度搜索不到我的域名了！</p><p>使用<a href="https://ziyuan.baidu.com/crawltools/index?site=http://www.voidking.com/" target="_blank" rel="noopener">百度抓取诊断工具</a>诊断，发现抓取异常信息是拒绝访问，403 Forbidden。这是因为github屏蔽了百度蜘蛛，所以百度无法收录解析到github的域名。</p><p>浏览了一些文章，找到了解决办法：在DNSPod配置两个www的域名解析，线路类型“默认”解析到 voidking.github.io ，线路类型“百度”解析到一个百度可以抓取的地址，如下图。<br><img src="http://cdn.voidking.com/@/imgs/hexo-multi-git/type.jpg?imageView2/0/w/600" alt=""><br>也就是说，需要维护两个站点，两个站点分别处理来自不同线路的流量。其中一个站点建立在github，另外一个站点建立在哪儿呢？这里我选择<a href="https://zeit.co/" target="_blank" rel="noopener">ZEIT Now</a>。</p><p>理想是美好的，现实是残酷的！因为无论是github还是zeit，都需要验证域名解析，而它们都是境外服务器，所以都需要线路类型“境外”的CNAME解析，否则无法通过验证！尴尬了。。。只能选择其一。</p><p>为了百度的收录，看起来只能选择zeit了，不过zeit每个月只有20G的流量。为了在zeit流量用光后方便地切到github，因此还是需要维护两个站点。</p><h1 id="hexo配置多个git仓库"><a href="#hexo配置多个git仓库" class="headerlink" title="hexo配置多个git仓库"></a>hexo配置多个git仓库</h1><p>为了维护两个站点，所以每次更新，需要发布github pages和zeit。github pages的发布很方便，上传代码后直接就发布了；而zeit的发布有多种方式，其中一种方式是通过<a href="https://zeit.co/voidking/voidking/settings" target="_blank" rel="noopener">Deploy Hooks</a>触发。</p><p>如果github和zeit都使用 voidking.github.io 这一个git仓库，那么问题很简单。<code>hexo d</code>后，再访问一个url触发 Deploy Hooks就可以了。而zeit，不支持 voidking.github.io 这种项目名称，因此稍微麻烦一点。</p><p>1、新建git仓库<br>在github上再创建一个git仓库叫做voidking，import voidking.github.io仓库。</p><p>2、配置zeit关联<br>把voidking这个仓库和zeit做关联，并且发布项目，配置生成一个Deploy Hooks。</p><p>3、配置域名<br>按照提示绑定 <a href="http://www.voidking.com">www.voidking.com</a> 这个域名到zeit站点。</p><p>4、修改config.yml文件<br>修改hexo的config.yml文件中的deploy部分为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># github</span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">- type: git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//voidking.com/voidking/voidking.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br><span class="line">- type: git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//voidking.com/voidking/voidking.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><p>以上配置参考<a href="https://hexo.io/docs/one-command-deployment" target="_blank" rel="noopener">Hexo一键发布</a>。</p><p>5、发布项目<br>正常执行<code>hexo d</code>，静态资源代码会上传到两个git仓库中。<br>其中，voidking.github.io这个仓库就直接发布了。而voidking这个仓库想要发布到zeit上，还需要手动触发一下（访问Deploy Hooks的url）。</p><p>至此，hexo多个git仓库，多个站点配置完成。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果zeit上的流量用完了，可以在DNSPod上修改域名解析到github。虽然有延迟，但是对于个人使用来说足够了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h1&gt;&lt;p&gt;在经历过域名被封之后，今天又经历了搬瓦工服务器IP被封，我太难了。。。o(╥﹏╥)o&lt;br&gt;服务器IP被封，带来了三个问题：第一个是不能愉快地科学上网了；第二个是内网穿透不能使用了；第三个是自己的 &lt;a href=&quot;http://www.voidking.com&quot;&gt;www.voidking.com&lt;/a&gt; 域名无法访问了。&lt;/p&gt;
&lt;p&gt;对于问题一，暂时使用免费的公共飞机场。对于问题二，暂时使用百度服务器，但是因为没有备案，所以不能进行域名解析。对于问题三，就是本文要解决的问题之一。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="前端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%89%8D%E7%AB%AF/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>m3u8视频下载方法</title>
    <link href="https://www.voidking.com/hobby-m3u8-download/"/>
    <id>https://www.voidking.com/hobby-m3u8-download/</id>
    <published>2020-01-31T19:10:00.000Z</published>
    <updated>2020-03-31T02:52:58.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="m3u8格式"><a href="#m3u8格式" class="headerlink" title="m3u8格式"></a>m3u8格式</h1><p>M3U是一种播放多媒体列表的文件格式，它的设计初衷是为了播放音频文件，比如MP3，但是越来越多的软件现在用来播放视频文件列表，M3U也可以指定在线流媒体音频源。很多播放器和软件都支持M3U文件格式。</p><p>M3U8是Unicode版本的M3U，用UTF-8编码。”M3U”和”M3U8”文件都是苹果公司使用的HTTP Live Streaming格式的基础，这种格式可以在iPhone和Macbook等设备播放。</p><p>HTTP Live Streaming（缩写是HLS）是由苹果公司提出基于HTTP的流媒体网络传输协议。是苹果公司QuickTime X和iPhone软件系统的一部分。它的工作原理是把整个流分成一个个小的基于HTTP的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。在开始一个流媒体会话时，客户端会下载一个包含元数据的extended M3U (m3u8) playlist文件，用于寻找可用的媒体流。</p><p>综上，m3u8是一种文件格式。下载m3u8格式的文件时，会下载一个m3u8文件（文件列表），以及一个包含了很多ts文件（视频片段）的隐藏文件夹。</p><p>更多内容参考<a href="https://zh.wikipedia.org/wiki/M3U" target="_blank" rel="noopener">M3U</a>和<a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">HTTP Live Streaming</a>。</p><a id="more"></a><h1 id="怎样下载m3u8格式视频？"><a href="#怎样下载m3u8格式视频？" class="headerlink" title="怎样下载m3u8格式视频？"></a>怎样下载m3u8格式视频？</h1><h2 id="获取下载地址"><a href="#获取下载地址" class="headerlink" title="获取下载地址"></a>获取下载地址</h2><p>1、安装chrome插件，<a href="https://chrome.google.com/webstore/detail/stream-video-downloader/imkngaibigegepnlckfcbecjoilcjbhf" target="_blank" rel="noopener">Stream Video Downloader</a>。</p><p>2、打开一个包含m3u8视频的页面，比如<a href="https://huaweicloud.bizconf.cn/watch/2234943" target="_blank" rel="noopener">云原生技术的前世今生</a>。点击播放，Stream Video Downloader就可以嗅探到m3u8文件。<br><img src="http://cdn.voidking.com/@/imgs/m3u8-download/copy.jpg?imageView2/0/w/600" alt=""></p><p>3、复制下载地址并保存，此处的下载地址为：<br><a href="https://myun-hw-s3.myun.tv/melj80jz/5a3ydjj0/1551265736611296603.m3u8" target="_blank" rel="noopener">https://myun-hw-s3.myun.tv/melj80jz/5a3ydjj0/1551265736611296603.m3u8</a></p><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><p>FFmpeg是一个m3u8格式下载工具，并且可以把m3u8格式视频合并成mp4格式。</p><p>1、访问<a href="https://github.com/FFmpeg/FFmpeg/releases" target="_blank" rel="noopener">github-FFmpeg</a>或者<a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg官网</a>，下载FFmpeg，本文中下载ffmpeg-4.2.2-win64-static.zip。</p><p>2、解压重命名文件夹为ffmpeg，进入ffmpeg/bin目录。</p><p>3、右键加+Shift，打开Powershell，输入下载合并命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\ffmpeg.exe -i <span class="string">"https://myun-hw-s3.myun.tv/melj80jz/5a3ydjj0/1551265736611296603.m3u8"</span> -c <span class="keyword">copy</span><span class="bash"> 01-云原生技术的前世今生.mp4</span></span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/m3u8-download/download.jpg?imageView2/0/w/700" alt=""></p><p>耐心等待，下载完成即可在ffmpeg/bin目录中看到下载好的mp4视频文件。</p><h2 id="m3u8转mp4"><a href="#m3u8转mp4" class="headerlink" title="m3u8转mp4"></a>m3u8转mp4</h2><p>手机QQ浏览器的视频下载功能确实强大，大部分能看到的视频都可以下线，包括<a href="https://huaweicloud.bizconf.cn/watch/2234943" target="_blank" rel="noopener">云原生技术的前世今生</a>这个页面中的视频。</p><p>下载好的文件，是m3u8格式视频。正如上文所说，这个视频文件实际上是一个视频列表和一个隐藏文件夹组成。想要给它合并转换成mp4格式视频，怎么办？同样可以使用FFmpeg。</p><p>1、把视频列表和隐藏文件夹都拷贝到PC。</p><p>2、使用sublime打开m3u8文件，批量替换路径。<br>替换前为：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#EXTM3U</span></span><br><span class="line"><span class="meta">#EXT-X-TARGETDURATION:11</span></span><br><span class="line"><span class="meta">#EXTINF:10.000000,</span></span><br><span class="line">file:<span class="comment">///storage/emulated/0/QQBrowser/视频/.820a585fc4f1a85d4875007aff5ba7a5/0.ts</span></span><br><span class="line"><span class="meta">#EXTINF:10.000000,</span></span><br><span class="line">file:<span class="comment">///storage/emulated/0/QQBrowser/视频/.820a585fc4f1a85d4875007aff5ba7a5/1.ts</span></span><br><span class="line"><span class="meta">#EXTINF:10.000000,</span></span><br><span class="line">file:<span class="comment">///storage/emulated/0/QQBrowser/视频/.820a585fc4f1a85d4875007aff5ba7a5/2.ts</span></span><br><span class="line"><span class="meta">#EXTINF:10.000000,</span></span><br><span class="line">file:<span class="comment">///storage/emulated/0/QQBrowser/视频/.820a585fc4f1a85d4875007aff5ba7a5/3.ts</span></span><br><span class="line"><span class="meta">#EXTINF:10.000000,</span></span><br><span class="line">file:<span class="comment">///storage/emulated/0/QQBrowser/视频/.820a585fc4f1a85d4875007aff5ba7a5/4.ts</span></span><br><span class="line"><span class="meta">#EXTINF:10.000000,</span></span><br><span class="line">file:<span class="comment">///storage/emulated/0/QQBrowser/视频/.820a585fc4f1a85d4875007aff5ba7a5/5.ts</span></span><br></pre></td></tr></table></figure><p>转换后为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-TARGETDURATION:<span class="number">11</span></span><br><span class="line">#EXTINF:<span class="number">10.000000</span>,</span><br><span class="line"><span class="number">.820</span>a585fc4f1a85d4875007aff5ba7a5/<span class="number">0.</span>ts</span><br><span class="line">#EXTINF:<span class="number">10.000000</span>,</span><br><span class="line"><span class="number">.820</span>a585fc4f1a85d4875007aff5ba7a5/<span class="number">1.</span>ts</span><br><span class="line">#EXTINF:<span class="number">10.000000</span>,</span><br><span class="line"><span class="number">.820</span>a585fc4f1a85d4875007aff5ba7a5/<span class="number">2.</span>ts</span><br><span class="line">#EXTINF:<span class="number">10.000000</span>,</span><br><span class="line"><span class="number">.820</span>a585fc4f1a85d4875007aff5ba7a5/<span class="number">3.</span>ts</span><br><span class="line">#EXTINF:<span class="number">10.000000</span>,</span><br><span class="line"><span class="number">.820</span>a585fc4f1a85d4875007aff5ba7a5/<span class="number">4.</span>ts</span><br><span class="line">#EXTINF:<span class="number">10.000000</span>,</span><br><span class="line"><span class="number">.820</span>a585fc4f1a85d4875007aff5ba7a5/<span class="number">5.</span>ts</span><br></pre></td></tr></table></figure><p>3、打开Powershell，执行转换命令：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 直接合并转换（速度快）</span><br><span class="line">.\ffmpeg.exe -i <span class="meta">input</span>-<span class="meta">filename</span>.m3u8 -c copy <span class="meta">output</span>-<span class="meta">filename</span>.mp4</span><br><span class="line"># 合并转码压缩（速度慢）</span><br><span class="line">.\ffmpeg.exe -i <span class="meta">input</span>-<span class="meta">filename</span>.m3u8 <span class="meta">output</span>-<span class="meta">filename</span>.mp4</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/m3u8-download/transform.jpg?imageView2/0/w/700" alt=""><br>执行完成，即可看到转换好的mp4文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;m3u8格式&quot;&gt;&lt;a href=&quot;#m3u8格式&quot; class=&quot;headerlink&quot; title=&quot;m3u8格式&quot;&gt;&lt;/a&gt;m3u8格式&lt;/h1&gt;&lt;p&gt;M3U是一种播放多媒体列表的文件格式，它的设计初衷是为了播放音频文件，比如MP3，但是越来越多的软件现在用来播放视频文件列表，M3U也可以指定在线流媒体音频源。很多播放器和软件都支持M3U文件格式。&lt;/p&gt;
&lt;p&gt;M3U8是Unicode版本的M3U，用UTF-8编码。”M3U”和”M3U8”文件都是苹果公司使用的HTTP Live Streaming格式的基础，这种格式可以在iPhone和Macbook等设备播放。&lt;/p&gt;
&lt;p&gt;HTTP Live Streaming（缩写是HLS）是由苹果公司提出基于HTTP的流媒体网络传输协议。是苹果公司QuickTime X和iPhone软件系统的一部分。它的工作原理是把整个流分成一个个小的基于HTTP的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。在开始一个流媒体会话时，客户端会下载一个包含元数据的extended M3U (m3u8) playlist文件，用于寻找可用的媒体流。&lt;/p&gt;
&lt;p&gt;综上，m3u8是一种文件格式。下载m3u8格式的文件时，会下载一个m3u8文件（文件列表），以及一个包含了很多ts文件（视频片段）的隐藏文件夹。&lt;/p&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://zh.wikipedia.org/wiki/M3U&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;M3U&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/HTTP_Live_Streaming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP Live Streaming&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="chrome" scheme="https://www.voidking.com/tags/chrome/"/>
    
      <category term="下载" scheme="https://www.voidking.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django开发微信公众平台管理系统——第1章</title>
    <link href="https://www.voidking.com/dev-django-wechat-1/"/>
    <id>https://www.voidking.com/dev-django-wechat-1/</id>
    <published>2020-01-20T21:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>紧接着<a href="https://www.voidking.com/dev-django-wechat-0/">《Django开发微信公众平台管理系统——第0章》</a>，本文学习一下微信公众平台各种消息的接收和回复，主要参考<a href="https://werobot.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">WeRoBot文档</a>。</p><p>消息类型包括：TextMessage、ImageMessage、LinkMessage、LocationMessage、VoiceMessage、VideoMessage、UnknownMessage；<br>事件类型包括：SubscribeEvent、UnSubscribeEvent、ScanEvent、ScanCodePushEvent、ScanCodeWaitMsgEvent、PicSysphotoEvent、PicPhotoOrAlbumEvent、PicWeixinEvent、LocationSelectEvent、ClickEvent、ViewEvent、LocationEvent、TemplateSendJobFinishEvent、UserScanProductEvent、UserScanProductEnterSessionEvent、UserScanProductAsyncEvent、UserScanProductVerifyActionEvent、CardPassCheckEvent、CardNotPassCheckEvent、UserGetCardEvent、UserGiftingCardEvent、UserDelCardEvent、UserConsumeCardEvent、UserPayFromPayCellEvent、UserViewCardEvent、UserEnterSessionFromCardEvent、UpdateMemberCardEvent、CardSkuRemindEvent、CardPayOrderEvent、SubmitMembercardUserInfoEvent、UnknownEvent；<br>回复类型包括：TextReply、ImageReply、VoiceReply、VideoReply、ArticlesReply、MusicReply、TransferCustomerServiceReply、SuccessReply。</p><a id="more"></a><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>微信发给 /main/wechat/ 接口的信息（message），都传给了robot对象，robot对象根据消息类型调用自己的handler，处理后返回结果给微信。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="根据消息类型返回信息"><a href="#根据消息类型返回信息" class="headerlink" title="根据消息类型返回信息"></a>根据消息类型返回信息</h2><p>修改 wecms/main/views_wechat.py ，内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> werobot</span><br><span class="line">robot = werobot.WeRoBot(token=<span class="string">'vkwechat'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.handler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Today is wonderful day!'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.text</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'您发送了文本消息，内容为：'</span> + message.content</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.image</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'您发送了图片消息，图片为：'</span> + message.img</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.link</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'您发送了链接消息，链接为：'</span> + message.url</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.location</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">location</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'您发送了位置消息，位置为：'</span> + message.label</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.voice</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">voice</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'您发送了声音消息，media_id为：'</span> + message.media_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.video</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">video</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'您发送了视频消息，media_id为：'</span> + message.media_id</span><br></pre></td></tr></table></figure><p>此时给公众号发送不同类型的消息，返回的内容也是不同的。</p><h2 id="返回图片消息"><a href="#返回图片消息" class="headerlink" title="返回图片消息"></a>返回图片消息</h2><p>1、登录微信公众平台，查看“公众号开发信息”中的“开发者ID(AppID)”和“开发者密码(AppSecret)”，并记录下来。</p><p>2、修改 wecms/main/views_wechat.py ，添加AppID和AppSecret的配置，添加media函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> werobot</span><br><span class="line"><span class="keyword">from</span> werobot.replies <span class="keyword">import</span> ImageReply</span><br><span class="line"></span><br><span class="line">robot = werobot.WeRoBot(token=<span class="string">'vkwechat'</span>)</span><br><span class="line">robot.config[<span class="string">'APP_ID'</span>] = <span class="string">'app_id'</span></span><br><span class="line">robot.config[<span class="string">'APP_SECRET'</span>] = <span class="string">'app_secret'</span></span><br><span class="line">client = robot.client</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.handler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Today is wonderful day!'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.filter('image')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">media</span><span class="params">(message)</span>:</span></span><br><span class="line">    media_id = client.upload_permanent_media(<span class="string">'image'</span>, open(<span class="string">r'C:\Users\haojin\Desktop\favicon.png'</span>, <span class="string">'rb'</span>))[<span class="string">'media_id'</span>]</span><br><span class="line">    reply = ImageReply(message=message, media_id=media_id)</span><br><span class="line">    <span class="keyword">return</span> reply</span><br><span class="line"></span><br><span class="line"><span class="comment"># other code</span></span><br></pre></td></tr></table></figure><p>需要注意的是，robot.filter(‘image’)需要放在robot.text的前面。因为werobot是链式匹配的，如果robot.text在前，匹配上了“image”，就会被text()函数处理。</p><p>2、查看本机的出口IP，修改“公众号开发信息”中的“IP白名单”，把出口IP填进去。</p><p>此时给公众号发送“image”，会返回一张图片。</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>以订阅事件和取消事件为例，添加事件处理：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@robot.subscribe</span><br><span class="line">def subscribe(<span class="keyword">event</span>):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'用户'</span> + <span class="keyword">event</span>.<span class="keyword">source</span> + <span class="string">'关注了公众号'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'感谢关注voidking，您的ID为：'</span> + <span class="keyword">event</span>.<span class="keyword">source</span></span><br><span class="line"></span><br><span class="line">@robot.unsubscribe</span><br><span class="line">def unsubscribe(<span class="keyword">event</span>):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'用户'</span> + <span class="keyword">event</span>.<span class="keyword">source</span> + <span class="string">'取消了关注'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><p>此时关注公众号，会收到自己的OpenID。</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>前面的开发中，用到了token、APP_ID和APP_SECRET。这些信息应该写在配置文件中，而不是代码中，因此需要调整。</p><p>1、编辑 wecms/wecms/settings.py，添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wechat Config</span></span><br><span class="line"><span class="attr">TOKEN</span> = <span class="string">'vkwechat'</span></span><br><span class="line"><span class="attr">APP_ID</span> = <span class="string">'app_id'</span></span><br><span class="line"><span class="attr">APP_SECRET</span> = <span class="string">'app_secret'</span></span><br></pre></td></tr></table></figure><p>2、编辑 wecms/main/views_wechat.py ，修改为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf import settings</span><br><span class="line">import werobot</span><br><span class="line"><span class="keyword">from</span> werobot.replies import ImageReply</span><br><span class="line"></span><br><span class="line">robot = werobot.WeRoBot(<span class="attribute">token</span>=settings.TOKEN)</span><br><span class="line">robot.config[<span class="string">'APP_ID'</span>] = settings.APP_ID</span><br><span class="line">robot.config[<span class="string">'APP_SECRET'</span>] = settings.APP_SECRET</span><br><span class="line">client = robot.client</span><br><span class="line"></span><br><span class="line"><span class="comment"># other code</span></span><br></pre></td></tr></table></figure><h1 id="源码分享"><a href="#源码分享" class="headerlink" title="源码分享"></a>源码分享</h1><p><a href="https://github.com/voidking/wecms/releases/tag/v0.1.0" target="_blank" rel="noopener">https://github.com/voidking/wecms/releases/tag/v0.1.0</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;紧接着&lt;a href=&quot;https://www.voidking.com/dev-django-wechat-0/&quot;&gt;《Django开发微信公众平台管理系统——第0章》&lt;/a&gt;，本文学习一下微信公众平台各种消息的接收和回复，主要参考&lt;a href=&quot;https://werobot.readthedocs.io/zh_CN/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WeRoBot文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;消息类型包括：TextMessage、ImageMessage、LinkMessage、LocationMessage、VoiceMessage、VideoMessage、UnknownMessage；&lt;br&gt;事件类型包括：SubscribeEvent、UnSubscribeEvent、ScanEvent、ScanCodePushEvent、ScanCodeWaitMsgEvent、PicSysphotoEvent、PicPhotoOrAlbumEvent、PicWeixinEvent、LocationSelectEvent、ClickEvent、ViewEvent、LocationEvent、TemplateSendJobFinishEvent、UserScanProductEvent、UserScanProductEnterSessionEvent、UserScanProductAsyncEvent、UserScanProductVerifyActionEvent、CardPassCheckEvent、CardNotPassCheckEvent、UserGetCardEvent、UserGiftingCardEvent、UserDelCardEvent、UserConsumeCardEvent、UserPayFromPayCellEvent、UserViewCardEvent、UserEnterSessionFromCardEvent、UpdateMemberCardEvent、CardSkuRemindEvent、CardPayOrderEvent、SubmitMembercardUserInfoEvent、UnknownEvent；&lt;br&gt;回复类型包括：TextReply、ImageReply、VoiceReply、VideoReply、ArticlesReply、MusicReply、TransferCustomerServiceReply、SuccessReply。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="后端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/python/"/>
    
      <category term="django" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/django/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="django" scheme="https://www.voidking.com/tags/django/"/>
    
      <category term="微信公众平台" scheme="https://www.voidking.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Django开发微信公众平台管理系统——发布篇</title>
    <link href="https://www.voidking.com/dev-django-wechat-deploy/"/>
    <id>https://www.voidking.com/dev-django-wechat-deploy/</id>
    <published>2020-01-19T21:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-django-wechat-0/">《Django开发微信公众平台管理系统——第0章》</a>一文中完成了<a href="https://github.com/voidking/wecms" target="_blank" rel="noopener">wecms项目</a>初始框架的搭建，并且绑定了微信公众号，实现了回复用户的任意消息。<br>但是，wecms项目是运行在本地的，关机后服务就不可用了，因此需要把项目部署到线上。本文中会使用docker搭建django环境，并且部署wecms项目。</p><a id="more"></a><h1 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装django</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/_/django" target="_blank" rel="noopener">Django - Docker Official Images</a>。<br>wecms依赖django2.1.7，但是没有对应版本，因此需要采用Plan B，自己安装Django。</p><p>2、登录dockerhub查看需要的<a href="https://hub.docker.com/_/python" target="_blank" rel="noopener">Python - Docker Official Images</a>。</p><p>3、下载python镜像（wecms依赖python3.6.3）<br><code>docker pull python:3.6.3</code></p><p>4、导出本地依赖信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">freeze</span> &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>导出后把requirements.txt上传到服务器。</p><p>5、编写Dockerfile<br>安装django2.1.7，指定工作目录，添加启动命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /tmp</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install --no-cache-dir -i https://pypi.doubanio.com/simple/ -r /tmp/requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/wecms</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python"</span>, <span class="string">"manage.py"</span>, <span class="string">"runserver"</span>, <span class="string">"0.0.0.0:8000"</span>]</span></span><br></pre></td></tr></table></figure><p>6、生成wecms镜像并上传</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t <span class="built_in">void</span>king/wecms:v1<span class="number">.0</span> .</span><br><span class="line">docker login</span><br><span class="line">docker push <span class="built_in">void</span>king/wecms:v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>7、下载项目源码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span></span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/voidking/wecms.git</span><br><span class="line"><span class="keyword">cd</span> wecms</span><br><span class="line">git checkout v0.<span class="number">0.0</span></span><br></pre></td></tr></table></figure><p>8、启动wecms服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-wecms -d \</span><br><span class="line">-p <span class="number">8000</span>:<span class="number">8000</span> \</span><br><span class="line">-v /opt/wecms:/opt/wecms \</span><br><span class="line"><span class="built_in">void</span>king/wecms:v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>以上命令：</p><ul><li>命名容器为vk-wecms，后台运行</li><li>映射宿主机8000端口到容器的8000端口</li><li>挂载宿主机目录/opt/wecms到容器目录/opt/wecms</li></ul><p>更多启动命令参数可以参考<a href="https://hub.docker.com/_/python?tab=description" target="_blank" rel="noopener">python - How to use this image</a>和<a href="https://hub.docker.com/_/django?tab=description" target="_blank" rel="noopener">django - How to use this image</a>。</p><p>9、验证安装<br><code>docker ps</code>，nginx启动正常的话就可以看到vk-wecms容器。<br><code>curl localhost:8000</code>，可以看到welcome to wecms!</p><p>浏览器访问 <a href="http://hostip:8000/" target="_blank" rel="noopener">http://hostip:8000/</a> ，提示You may need to add ‘hostip’ to ALLOWED_HOSTS.<br>因此修改 wecms/wecms/settings.py ，添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ALLOWED_HOSTS</span> = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure><p>修改后的tag为v0.0.1。</p><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><p>当前项目还没有使用到数据库，而且默认使用sqlite3，不过后期会改成mysql，所以这里做个铺垫。<br>mysql安装配置参考<a href="https://www.voidking.com/dev-docker-mysql/">《使用Docker安装配置Mysql》</a>。</p><h1 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h1><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>dnspod添加A记录，wecms记录值解析到hostip。</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>创建 /etc/nginx/conf.d/wecms.voidking.com.conf ，内容为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> wecms.voidking.com; </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8000/; </span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forward-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-django-wechat-0/&quot;&gt;《Django开发微信公众平台管理系统——第0章》&lt;/a&gt;一文中完成了&lt;a href=&quot;https://github.com/voidking/wecms&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wecms项目&lt;/a&gt;初始框架的搭建，并且绑定了微信公众号，实现了回复用户的任意消息。&lt;br&gt;但是，wecms项目是运行在本地的，关机后服务就不可用了，因此需要把项目部署到线上。本文中会使用docker搭建django环境，并且部署wecms项目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="后端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/python/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
      <category term="django" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/django/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="django" scheme="https://www.voidking.com/tags/django/"/>
    
      <category term="微信公众平台" scheme="https://www.voidking.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="dokcer" scheme="https://www.voidking.com/tags/dokcer/"/>
    
  </entry>
  
  <entry>
    <title>Django开发微信公众平台管理系统——第0章</title>
    <link href="https://www.voidking.com/dev-django-wechat-0/"/>
    <id>https://www.voidking.com/dev-django-wechat-0/</id>
    <published>2020-01-18T21:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>两年前，学习了Django的开发，整理了一个系列的文档，《Django入门》、《Django开发简单Blog系统》、《Django部署到线上》等。半年前，使用Django和图像处理方法完成了毕业设计。</p><p>最近，打算空闲时间打造一下自己的微信公众号，于是安装了微擎系统。但是发现微擎系统存在很多问题，最不能忍受的是添加自动回复，添加完成没有报错，但是数据库根本没有记录！<br>找客服？对不起咱不是付费用户，没人给咱服务。看文档？对不起文档不涉及咱这个具体问题。找社区？对不起社区不活跃，没人遇到过咱这个问题，无人解答。学完微擎框架自己解决？有这个闲工夫，咱就自己写一个了！。。。行吧，拜拜了您哪！</p><p>找了一圈，没有找到特别满意的其他微信公众平台管理系统，那就，自己写一个吧！基于<a href="https://github.com/django/django" target="_blank" rel="noopener">Django</a>和<a href="https://github.com/offu/WeRoBot" target="_blank" rel="noopener">WeRoBot</a>，参考文档<a href="https://werobot.readthedocs.io/zh_CN/latest/contrib.html#django" target="_blank" rel="noopener">WeRoBot与其他 Web 框架集成</a>。</p><a id="more"></a><h1 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h1><p>1、Python版本3.6.3</p><p>2、Django版本2.1.7</p><p>3、PyCharm版本2018.1.4(Community Edition)</p><p>4、安装WeRoBot<br><code>pip install werobot</code></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>首先给项目起个好名字吧，万一以后火了呢！就叫wecms吧，没错就是这么随意。</p><p>1、创建项目<br><code>django-admin startproject wecms</code></p><p>2、运行wecms</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">wecms</span></span><br><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span></span><br><span class="line"># <span class="selector-tag">or</span></span><br><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8080</span></span><br></pre></td></tr></table></figure><p>3、测试访问<br>浏览器访问 <a href="http://localhost:8000/" target="_blank" rel="noopener">http://localhost:8000/</a> ，即可看到项目首页。</p><h1 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h1><p>1、创建应用<br>前期所有的模块都放在一起，以后再进行拆分优化，因此创建应用名为main。<br><code>python manage.py startapp main</code></p><p>2、注册应用<br>编辑 wecms/wecms/settings.py，添加：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># <span class="type">Application</span> definition</span><br><span class="line"></span><br><span class="line"><span class="type">INSTALLED_APPS</span> = [</span><br><span class="line">    <span class="symbol">'django</span>.contrib.admin',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.auth',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.contenttypes',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.sessions',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.messages',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.staticfiles',</span><br><span class="line">    <span class="symbol">'main'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、第一个函数<br>编辑 wecms/main/views.py，如下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'welcome to wecms!'</span>)</span><br></pre></td></tr></table></figure><p>4、添加路由<br>编辑 wecms/wecms/urls.py，如下修改：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span>, <span class="keyword">include</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, <span class="keyword">admin</span>.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, <span class="keyword">include</span>(<span class="string">'main.urls'</span>)),</span><br><span class="line">    path(<span class="string">'main/'</span>, <span class="keyword">include</span>(<span class="string">'main.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>创建 wecms/main/urls.py，内容如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>,views.<span class="keyword">index</span>, <span class="type">name</span>=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'index/'</span>,views.<span class="keyword">index</span>, <span class="type">name</span>=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>5、启动服务<br><code>python manage.py runserver</code></p><p>6、测试访问<br>浏览器访问<br><a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a><br><a href="http://127.0.0.1:8000/main/" target="_blank" rel="noopener">http://127.0.0.1:8000/main/</a><br><a href="http://127.0.0.1:8000/main/index/" target="_blank" rel="noopener">http://127.0.0.1:8000/main/index/</a><br>都可以看到welcome to wecms!</p><h1 id="引入WeRoBot"><a href="#引入WeRoBot" class="headerlink" title="引入WeRoBot"></a>引入WeRoBot</h1><p>1、创建 wecms/main/views_wechat.py，内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> werobot</span><br><span class="line">robot = werobot.WeRoBot(token=<span class="string">'vkwechat'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.handler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Today is wonderful day!'</span></span><br></pre></td></tr></table></figure><p>收到的所有信息返回Today is wonderful day!</p><p>2、wecms/main/urls.py修改为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views_wechat</span><br><span class="line"><span class="keyword">from</span> werobot.contrib.django <span class="keyword">import</span> make_view</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>,views.<span class="keyword">index</span>),</span><br><span class="line">    path(<span class="string">'index/'</span>,views.<span class="keyword">index</span>),</span><br><span class="line">    path(<span class="string">'wechat/'</span>,make_view(views_wechat.robot)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意，make_views函数中的参数并不是函数，而是robot对象。</p><p>3、测试访问<br>浏览器访问 <a href="http://127.0.0.1:8000/main/wechat/" target="_blank" rel="noopener">http://127.0.0.1:8000/main/wechat/</a><br><img src="http://cdn.voidking.com/@/imgs/django-wechat/werobot.jpg?imageView2/0/w/700" alt=""></p><h1 id="微信配置"><a href="#微信配置" class="headerlink" title="微信配置"></a>微信配置</h1><p>1、使用内网穿透，把本地8000端口代理到 wecms-dev.voidking.com 域名。</p><p>2、测试访问<br><a href="http://wecms-dev.voidking.com/main/wechat/" target="_blank" rel="noopener">http://wecms-dev.voidking.com/main/wechat/</a></p><p>3、配置微信公众号<br>登录微信公众平台，开发，基本配置，服务器配置，修改配置。<br>填入URL和代码中定义的Token，随机生成EncodingAESKey，消息加解密方式选择明文，提交。<br><img src="http://cdn.voidking.com/@/imgs/django-wechat/wechatconfig.jpg?imageView2/0/w/700" alt=""><br>提交成功，就完成了微信公众号和服务器的绑定。用户发送给微信公众号的消息，会转发给我们的服务器；服务器处理完成后的信息返回给微信公众号，微信公众号再把消息转发给用户。</p><p>4、测试<br><img src="http://cdn.voidking.com/@/imgs/django-wechat/voidking.jpg?imageView2/0/w/300" alt=""><br>扫码关注自己的公众号，然后发送任意信息，看看返回了啥？Today is wonderful day!</p><h1 id="源码分享"><a href="#源码分享" class="headerlink" title="源码分享"></a>源码分享</h1><p><a href="https://github.com/voidking/wecms/releases/tag/v0.0.0" target="_blank" rel="noopener">https://github.com/voidking/wecms/releases/tag/v0.0.0</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;两年前，学习了Django的开发，整理了一个系列的文档，《Django入门》、《Django开发简单Blog系统》、《Django部署到线上》等。半年前，使用Django和图像处理方法完成了毕业设计。&lt;/p&gt;
&lt;p&gt;最近，打算空闲时间打造一下自己的微信公众号，于是安装了微擎系统。但是发现微擎系统存在很多问题，最不能忍受的是添加自动回复，添加完成没有报错，但是数据库根本没有记录！&lt;br&gt;找客服？对不起咱不是付费用户，没人给咱服务。看文档？对不起文档不涉及咱这个具体问题。找社区？对不起社区不活跃，没人遇到过咱这个问题，无人解答。学完微擎框架自己解决？有这个闲工夫，咱就自己写一个了！。。。行吧，拜拜了您哪！&lt;/p&gt;
&lt;p&gt;找了一圈，没有找到特别满意的其他微信公众平台管理系统，那就，自己写一个吧！基于&lt;a href=&quot;https://github.com/django/django&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django&lt;/a&gt;和&lt;a href=&quot;https://github.com/offu/WeRoBot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WeRoBot&lt;/a&gt;，参考文档&lt;a href=&quot;https://werobot.readthedocs.io/zh_CN/latest/contrib.html#django&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WeRoBot与其他 Web 框架集成&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="后端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/python/"/>
    
      <category term="django" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/django/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="django" scheme="https://www.voidking.com/tags/django/"/>
    
      <category term="微信公众平台" scheme="https://www.voidking.com/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus入门篇</title>
    <link href="https://www.voidking.com/dev-prometheus-start/"/>
    <id>https://www.voidking.com/dev-prometheus-start/</id>
    <published>2020-01-13T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:58.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h1><blockquote><p>Prometheus is an open-source systems monitoring and alerting toolkit originally built at SoundCloud. Since its inception in 2012, many companies and organizations have adopted Prometheus, and the project has a very active developer and user community. It is now a standalone open source project and maintained independently of any company. To emphasize this, and to clarify the project’s governance structure, Prometheus joined the Cloud Native Computing Foundation in 2016 as the second hosted project, after Kubernetes.</p></blockquote><p>特性、组件和架构等更多信息，参考<a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">Prometheus官方文档</a>。</p><a id="more"></a><h1 id="安装Prometheus-server"><a href="#安装Prometheus-server" class="headerlink" title="安装Prometheus server"></a>安装Prometheus server</h1><p>本节在CentOS7虚拟机上安装Prometheus server，虚拟机IP为192.168.56.130，安装流程主要参考<a href="https://prometheus.io/docs/prometheus/latest/getting_started/" target="_blank" rel="noopener">Prometheus - GETTING STARTED</a>。</p><p>1、下载Prometheus server<br>访问<a href="https://prometheus.io/download/" target="_blank" rel="noopener">Prometheus官网下载页</a>，这里选择下载prometheus-2.15.2.linux-amd64.tar.gz</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span></span><br><span class="line">wget http<span class="variable">s:</span>//github.<span class="keyword">com</span>/prometheus/prometheus/releases/download/v2.<span class="number">15.2</span>/prometheus-<span class="number">2.15</span>.<span class="number">2</span>.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>2、解压并进行配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xzvf</span> <span class="selector-tag">prometheus-2</span><span class="selector-class">.15</span><span class="selector-class">.2</span><span class="selector-class">.linux-amd64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="selector-tag">mv</span> <span class="selector-tag">prometheus-2</span><span class="selector-class">.15</span><span class="selector-class">.2</span><span class="selector-class">.linux-amd64</span> <span class="selector-tag">prometheus</span></span><br><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">prometheus</span></span><br><span class="line"><span class="selector-tag">vim</span> <span class="selector-tag">prometheus</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><p>修改targets为0.0.0.0:9090，修改后的prometheus.yml如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # <span class="builtin-name">Set</span> the scrape interval <span class="keyword">to</span> every 15 seconds.<span class="built_in"> Default </span>is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The<span class="built_in"> default </span>is every 1 minute.</span><br><span class="line">  # scrape_timeout is <span class="builtin-name">set</span> <span class="keyword">to</span> the global<span class="built_in"> default </span>(10s).</span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      # - alertmanager:9093</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line">rule_files:</span><br><span class="line">  # - <span class="string">"first_rules.yml"</span></span><br><span class="line">  # - <span class="string">"second_rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  # The job name is added as a label `<span class="attribute">job</span>=&lt;job_name&gt;` <span class="keyword">to</span> any timeseries scraped <span class="keyword">from</span> this config.</span><br><span class="line">  - job_name: <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    # metrics_path defaults <span class="keyword">to</span> <span class="string">'/metrics'</span></span><br><span class="line">    # scheme defaults <span class="keyword">to</span> <span class="string">'http'</span>.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'0.0.0.0:9090'</span>]</span><br></pre></td></tr></table></figure><p>3、启动prometheus<br><code>./prometheus --config.file=prometheus.yml</code></p><p>除了上面的安装方法，还可以下载Prometheus的<a href="https://hub.docker.com/u/prom" target="_blank" rel="noopener">Docker images</a>，使用Docker安装。</p><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><p>1、访问metrics<br>浏览器访问 <a href="http://192.168.56.130:9090/metrics" target="_blank" rel="noopener">http://192.168.56.130:9090/metrics</a><br>可以看到prometheus的一些信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HELP go_gc_duration_seconds A summary of the GC invocation durations.</span></span><br><span class="line"><span class="comment"># TYPE go_gc_duration_seconds summary</span></span><br><span class="line">go_gc_duration_seconds&#123;<span class="attribute">quantile</span>=<span class="string">"0"</span>&#125; 6.078e-06</span><br><span class="line">go_gc_duration_seconds&#123;<span class="attribute">quantile</span>=<span class="string">"0.25"</span>&#125; 9.877e-06</span><br><span class="line">go_gc_duration_seconds&#123;<span class="attribute">quantile</span>=<span class="string">"0.5"</span>&#125; 9.9e-06</span><br><span class="line">go_gc_duration_seconds&#123;<span class="attribute">quantile</span>=<span class="string">"0.75"</span>&#125; 1.1475e-05</span><br><span class="line">go_gc_duration_seconds&#123;<span class="attribute">quantile</span>=<span class="string">"1"</span>&#125; 1.2132e-05</span><br><span class="line">go_gc_duration_seconds_sum 4.9462e-05</span><br><span class="line">go_gc_duration_seconds_count 5</span><br><span class="line"><span class="comment"># HELP go_goroutines Number of goroutines that currently exist.</span></span><br><span class="line"><span class="comment"># TYPE go_goroutines gauge</span></span><br><span class="line">go_goroutines 35</span><br></pre></td></tr></table></figure><p>2、查看图表<br>浏览器访问 <a href="http://192.168.56.130:9090/graph" target="_blank" rel="noopener">http://192.168.56.130:9090/graph</a><br>在Expression输入框中输入：<code>prometheus_target_interval_length_seconds</code>，然后点击Execute，再点击下面Tab中的Graph。<br>可以看到一个图表，图表的含义是，emm，不知道。</p><p>3、收集其他metrics<br>想要收集metrics，首先要安装配置好exporter。<br>比如想要收集jmx metrics，那么需要安装<a href="https://github.com/prometheus/jmx_exporter" target="_blank" rel="noopener">prometheus/jmx_exporter</a>。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>Prometheus也有不少问题，比如数据量大的时候需要拆分集群，聚合数据很难数据去重，可用性较低等。因此出现了Thanos，能够解决Prometheus的很多问题，详情参考<a href="https://www.jianshu.com/p/b1f74d552b12" target="_blank" rel="noopener">分布式 Promethues 之 Thanos</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prometheus简介&quot;&gt;&lt;a href=&quot;#Prometheus简介&quot; class=&quot;headerlink&quot; title=&quot;Prometheus简介&quot;&gt;&lt;/a&gt;Prometheus简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Prometheus is an open-source systems monitoring and alerting toolkit originally built at SoundCloud. Since its inception in 2012, many companies and organizations have adopted Prometheus, and the project has a very active developer and user community. It is now a standalone open source project and maintained independently of any company. To emphasize this, and to clarify the project’s governance structure, Prometheus joined the Cloud Native Computing Foundation in 2016 as the second hosted project, after Kubernetes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特性、组件和架构等更多信息，参考&lt;a href=&quot;https://prometheus.io/docs/introduction/overview/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Prometheus官方文档&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="基础" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Docker中使用定时任务</title>
    <link href="https://www.voidking.com/dev-docker-crontab/"/>
    <id>https://www.voidking.com/dev-docker-crontab/</id>
    <published>2020-01-12T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-linux-crontab/">《Linux设置定时任务》</a>一文中学习了crontab的使用方法，但是同样的配置方法，在Docker中是不会生效的。因为Docker中默认只会启动一个进程，crond并不会启动。本文研究一下在Docker中配置定时任务的方法，踩踩坑。</p><a id="more"></a><h1 id="启动crond"><a href="#启动crond" class="headerlink" title="启动crond"></a>启动crond</h1><p>要想在容器中使用定时任务，有三个办法：</p><ul><li>把crond作为一号进程启动。</li><li>supervisor作为一号进程启动，使用supervisor启动crond。</li><li>进入容器手动启动crond。</li></ul><p>本文使用第一个方法启动crond，启动命令为：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> run --name vkcrond -d -<span class="keyword">it </span>voidking/crond:<span class="built_in">v1</span>.<span class="number">0</span> <span class="string">"/bin/bash"</span> <span class="string">"-c"</span> <span class="string">"/usr/sbin/crond &gt; start.log &amp;&amp; tail -f start.log"</span></span><br></pre></td></tr></table></figure><h1 id="crond日志"><a href="#crond日志" class="headerlink" title="crond日志"></a>crond日志</h1><p>1、查看crond日志<br><code>tail /var/log/cron</code><br>报错没有这个文件，这是因为没有打开rsyslog。</p><p>2、打开rsyslog</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">/etc/init.d/rsyslog start</span><br><span class="line"><span class="comment"># centos7</span></span><br><span class="line">systemctl restart rsyslog.service</span><br><span class="line"><span class="comment"># centos6</span></span><br><span class="line">service rsyslog restart</span><br></pre></td></tr></table></figure><p>再次查看，crond日志文件就存在了。</p><h1 id="使用crond"><a href="#使用crond" class="headerlink" title="使用crond"></a>使用crond</h1><p>crond启动后，其他的配置参考<a href="https://www.voidking.com/dev-linux-crontab/">《Linux设置定时任务》</a>即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-linux-crontab/&quot;&gt;《Linux设置定时任务》&lt;/a&gt;一文中学习了crontab的使用方法，但是同样的配置方法，在Docker中是不会生效的。因为Docker中默认只会启动一个进程，crond并不会启动。本文研究一下在Docker中配置定时任务的方法，踩踩坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
      <category term="基础" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="crontab" scheme="https://www.voidking.com/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置Tomcat</title>
    <link href="https://www.voidking.com/dev-docker-tomcat/"/>
    <id>https://www.voidking.com/dev-docker-tomcat/</id>
    <published>2019-12-31T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-centos-tomcat-autostart/">《CentOS7设置tomcat开机自启动》</a>一文中，学习了常规的tomcat安装配置方法；<a href="https://www.voidking.com/dev-docker-ubuntu-tomcat/">《Docker安装tomcat服务》</a>一文中，学习了在Docker容器中安装配置tomcat的方法；<a href="https://www.voidking.com/dev-dockerfile-build-tomcat/">《Dockerfile构建Tomcat》</a>一文中，学习了使用Dockerfile安装配置tomcat的方法。<br>本文是对前三种方法的升级，更加简单。不需要自己制作tomcat镜像，而是使用dockerhub提供的tomcat镜像。</p><p>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.130。</p><a id="more"></a><h1 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h1><h2 id="安装Tomcat-1"><a href="#安装Tomcat-1" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h2><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/_/tomcat" target="_blank" rel="noopener">tomcat版本</a>。</p><p>2、下载tomcat镜像（以tomcat8.5.51为例）<br><code>docker pull tomcat:8.5.51-jdk8-openjdk</code></p><p>3、启动tomcat服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-tomcat -d \</span><br><span class="line">-p <span class="number">8080</span>:<span class="number">8080</span> \</span><br><span class="line">-v /opt/tomcat/webapps:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat:<span class="number">8.5</span><span class="number">.51</span>-jdk8-openjdk</span><br></pre></td></tr></table></figure><p>以上命令：</p><ul><li>命名容器为vk-tomcat，后台运行</li><li>映射宿主机8080端口到容器8080端口</li><li>映射宿主机/opt/tomcat/webapps目录（不需要提前创建目录）到容器/usr/local/tomcat/webapps目录</li></ul><p>更高级的启动命令参考<a href="https://hub.docker.com/_/tomcat?tab=description" target="_blank" rel="noopener">How to use this image</a>。</p><p>4、验证安装<br><code>docker ps</code><br>tomcat启动正常的话就可以看到vk-tomcat容器。<br>如果启动失败，可以使用<code>docker logs vk-tomcat</code>查看失败原因并进行解决。</p><p>使用nc命令验证：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install nc</span></span><br><span class="line"><span class="attr">nc</span> <span class="string">-v localhost 8080</span></span><br></pre></td></tr></table></figure><p>使用curl命令验证：<br><code>curl localhost:8080</code></p><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd <span class="params">--add-port=8080/tcp</span> <span class="params">--permanent</span></span><br><span class="line">systemctl <span class="keyword">reload</span> firewalld</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-centos-tomcat-autostart/&quot;&gt;《CentOS7设置tomcat开机自启动》&lt;/a&gt;一文中，学习了常规的tomcat安装配置方法；&lt;a href=&quot;https://www.voidking.com/dev-docker-ubuntu-tomcat/&quot;&gt;《Docker安装tomcat服务》&lt;/a&gt;一文中，学习了在Docker容器中安装配置tomcat的方法；&lt;a href=&quot;https://www.voidking.com/dev-dockerfile-build-tomcat/&quot;&gt;《Dockerfile构建Tomcat》&lt;/a&gt;一文中，学习了使用Dockerfile安装配置tomcat的方法。&lt;br&gt;本文是对前三种方法的升级，更加简单。不需要自己制作tomcat镜像，而是使用dockerhub提供的tomcat镜像。&lt;/p&gt;
&lt;p&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.130。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="后端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
      <category term="tomcat" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/tomcat/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置Apache和PHP环境（微擎环境）</title>
    <link href="https://www.voidking.com/dev-docker-apache-php/"/>
    <id>https://www.voidking.com/dev-docker-apache-php/</id>
    <published>2019-12-30T20:00:00.000Z</published>
    <updated>2020-03-31T02:52:57.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-centos-php-envirenment/">《在CentOS7上配置PHP运行环境》</a>一文中学习了安装配置LNMP环境，<a href="https://www.voidking.com/dev-centos-apache-php/">《CentOS安装Apache和PHP环境》</a>一文中学习了安装配置Apache和PHP环境。</p><p>本文学习使用Docker安装配置Apache和PHP，与Mysql结合，搭建一个容器化的LAMP环境，部署微擎服务。</p><p>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.130。</p><a id="more"></a><h1 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h1><p>参考<a href="https://www.voidking.com/dev-docker-mysql/">《使用Docker安装配置Mysql》</a>，安装好mysql server和mysql client。</p><p>1、登录mysql server<br><code>mysql -h 127.0.0.1 -u root -p</code></p><p>2、创建数据库</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database `w7`<span class="built_in"> default </span>character <span class="builtin-name">set</span> utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure><h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/_/php" target="_blank" rel="noopener">PHP - Docker Official Images</a>。</p><p>2、下载php镜像（以7.2-apache为例）<br><code>docker pull php:7.2-apache</code></p><p>选择带有apache的版本，省去了安装apache的步骤。</p><p>3、启动php和apache服务</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-php -d \</span><br><span class="line">-p <span class="number">8080</span>:<span class="number">80</span> \</span><br><span class="line">-v <span class="regexp">/opt/</span>php<span class="regexp">/w7:/</span>var<span class="regexp">/www/</span>html \</span><br><span class="line"><span class="string">php:</span><span class="number">7.2</span>-apache</span><br></pre></td></tr></table></figure><p>以上命令：</p><ul><li>命名容器为vk-php，后台运行</li><li>映射宿主机8080端口到容器的80端口</li><li>挂载宿主机目录/opt/php/w7到容器目录/var/www/html</li></ul><p>更多启动命令参数可以参考<a href="https://hub.docker.com/_/php?tab=description" target="_blank" rel="noopener">How to use this image</a>。</p><p>4、创建测试文件<br><code>vim /opt/php/w7/index.php</code>，内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">'hello php7.2'</span>;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>5、验证安装<br><code>curl localhost:8080</code>，可以看到hello php7.2。<br>浏览器访问 <a href="http://192.168.56.130:8080" target="_blank" rel="noopener">http://192.168.56.130:8080</a> ，可以看到hello php7.2。</p><p>以上，apache和php环境安装配置完成。</p><h1 id="安装微擎"><a href="#安装微擎" class="headerlink" title="安装微擎"></a>安装微擎</h1><h2 id="初始尝试"><a href="#初始尝试" class="headerlink" title="初始尝试"></a>初始尝试</h2><p>主要参考<a href="voidking.com/dev-we7-start/">《微擎系统搭建》</a>和<a href="https://www.kancloud.cn/we7pengpeng/weengine/1369873" target="_blank" rel="noopener">微擎linux服务器安装</a>。<br>1、下载微擎安装引导文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span>/php/w7</span><br><span class="line">wget http<span class="variable">s:</span>//cdn.w7.<span class="keyword">cc</span>/download/WeEngine-Laster-Online.zip</span><br><span class="line">unzip WeEngine-Laster-Online.zip</span><br></pre></td></tr></table></figure><p>2、浏览器访问安装页面<br><a href="http://192.168.56.130:8080/install.php" target="_blank" rel="noopener">http://192.168.56.130:8080/install.php</a><br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/install.jpg?imageView2/0/w/600" alt=""><br>填入用户名密码后，点击验证后安装微擎。没有通过验证，如下图：<br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/check.jpg?imageView2/0/w/800" alt=""><br>由报错看，主要是目录权限问题和缺少扩展问题。</p><h2 id="重做镜像"><a href="#重做镜像" class="headerlink" title="重做镜像"></a>重做镜像</h2><p>1、修改sources.list<br>在容器中查看/etc/apt/sources.list，发现镜像版本是debian buster，因此新建一个sources.list为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian-security buster/u</span>pdates main</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian-security buster/u</span>pdates main</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster-updates main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster-updates main non-free contrib</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster-backports main non-free contrib</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/debian/</span> buster-backports main non-free contrib</span><br></pre></td></tr></table></figure><p>2、编写Dockerfile</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:7.2-apache</span><br><span class="line"></span><br><span class="line">COPY sources.list /etc/apt/sources.list</span><br><span class="line"><span class="builtin-name">RUN</span> apt-<span class="builtin-name">get</span> update &amp;&amp; apt-<span class="builtin-name">get</span> install -y libpng-dev libzip-dev \</span><br><span class="line">    &amp;&amp; docker-php-ext-install zip gd pdo pdo_mysql</span><br><span class="line"><span class="builtin-name">RUN</span> chmod 777 /var/www/html</span><br></pre></td></tr></table></figure><p>3、生成新镜像<br><code>docker build -t voidking/w7:v1.0 .</code><br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/success.jpg?imageView2/0/w/600" alt=""></p><h2 id="再次尝试"><a href="#再次尝试" class="headerlink" title="再次尝试"></a>再次尝试</h2><p>1、删除原有容器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">stop vk-php</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm vk-php</span></span><br></pre></td></tr></table></figure><p>2、启动新的容器</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-php -d \</span><br><span class="line">-p <span class="number">8080</span>:<span class="number">80</span> \</span><br><span class="line">-v /opt/php/w7:/var/www/html \</span><br><span class="line"><span class="built_in">void</span>king/w7:v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>3、再次安装，再次验证<br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/check2.jpg?imageView2/0/w/800" alt=""><br>可以看到，这次还剩一个问题：外网不可访问。这就奇怪了，在容器内明明是可以正常访问外网的，为啥报这个错？既然没错，那就忽略它好了。但是这个错存在，就无法进行下一步，因此这里我们换一种安装方式：源码安装。</p><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><p>1、下载源码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/opt/php/w7</span></span><br><span class="line">rm -rf <span class="string">./</span>*</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line">git clone https:<span class="string">//gitee.com/we7coreteam/pros.git</span> w7</span><br></pre></td></tr></table></figure><p>2、再次安装，再次验证<br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/check2.jpg?imageView2/0/w/800" alt=""><br>nice，完美跳过了外网不可访问这个坑。然后，data目录权限报错。<br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/data.jpg?imageView2/0/w/700" alt=""><br>修改data目录权限，<code>chmod 777 /opt/php/w7/data/</code>，问题解决。</p><p>3、填入数据库连接信息，以及管理员用户名密码<br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/mysql.jpg?imageView2/0/w/800" alt=""></p><p>4、然后，安装完成。<br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/finish.jpg?imageView2/0/w/800" alt=""></p><p>5、测试访问<br>浏览器访问首页 <a href="http://192.168.56.130:8080/index.php" target="_blank" rel="noopener">http://192.168.56.130:8080/index.php</a> ，即会跳转到微擎登录页。<br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/login.jpg?imageView2/0/w/700" alt=""></p><p>以上，微擎系统安装配置完成，可以愉快地使用了。</p><h1 id="百度云解析"><a href="#百度云解析" class="headerlink" title="百度云解析"></a>百度云解析</h1><h2 id="备案失败"><a href="#备案失败" class="headerlink" title="备案失败"></a>备案失败</h2><p>百度智能云年终盛典，全场云服务器一折起，于是151块钱入手了一台1C2G2M的百度云BCC主机。但是，没有想到的是，网站需要新增接入备案，否则无法使用域名！！！这个不怪百度，如果使用百度云备案成功，以后想要接入阿里云或者腾讯云，也需要新增接入备案。</p><p>不过百度云比较坑的有两点：第一点是备案期间域名不能解析，而阿里云备案期间可以正常解析。第二点是无法通过百度云的备案审核，提交备案后百度云给出了六条不符合审核条件的理由，而同样的审核材料，一个月前在阿里云通过了备案审核。</p><p>真的是没有对比就没有伤害，第一个念头是退货，然而退货失败。不能退货，那该怎样使用这台服务器呢？那该怎样在这台服务器上部署服务，然后通过域名访问呢？</p><p>在github找到了一些项目，<a href="https://github.com/awesome-selfhosted/awesome-selfhosted" target="_blank" rel="noopener">awesome-selfhosted</a>，想要部署一些不需要域名的服务，好歹给利用起来了。但是，依然不甘心，想要给这些服务加上域名！然后，真的找到了办法！前提是你还有一台可以进行域名接入的主机，无论是备案过的阿里云主机，还是不需要备案的海外主机，都可以。</p><h2 id="解析方案"><a href="#解析方案" class="headerlink" title="解析方案"></a>解析方案</h2><p>已知两台主机：可以域名接入的主机（主机A），百度云主机（主机B）。<br>我们在主机B上部署好了微擎服务，想要给这个服务添加一个域名：w7.voidking.com </p><p>1、安装frp<br>参考<a href="https://www.voidking.com/dev-frp/">《使用frp进行内网穿透》</a>，在主机A上安装配置好frp server，在主机B上安装配置好frp client。主机B上的8080端口，映射为主机A上的3480端口。</p><p>2、nginx配置<br>在主机A上，添加nginx解析 w7.voidking.com.conf ，内容为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> w7.voidking.com;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:3480/;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，不用多加其他参数，不然会出现502等错误。</p><p>3、域名解析<br>在dnspod上添加A记录解析到主机A。</p><p>以上，可以通过域名访问百度云上的微擎服务了。</p><h1 id="微擎后续问题"><a href="#微擎后续问题" class="headerlink" title="微擎后续问题"></a>微擎后续问题</h1><h2 id="站点URL问题"><a href="#站点URL问题" class="headerlink" title="站点URL问题"></a>站点URL问题</h2><p>确实可以通过域名访问微擎服务了，但是站点的很多请求地址为 127.0.0.1:3480 ，因为微擎服务使用proxy_pass里的URL作为了站点URL。我们想让微擎服务把域名作为站点URL，解决办法很简单，添加：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br></pre></td></tr></table></figure><p>但是，添加完这个参数，就会出现502错误，尴尬了吧。。。<br>nginx层没法进行修复，看来这个问题只能通过修改微擎源码来修复了。<br>编辑/opt/php/w7/framework/bootstrap.inc.php，如下修改：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># line 90, change</span></span><br><span class="line"><span class="regexp">//</span> <span class="variable">$_W</span>[<span class="string">'siteroot'</span>] = htmlspecialchars(<span class="variable">$_W</span>[<span class="string">'sitescheme'</span>] . (isset(<span class="variable">$_SERVER</span>[<span class="string">'HTTP_HOST'</span>]) ? <span class="variable">$_SERVER</span>[<span class="string">'HTTP_HOST'</span>] : <span class="string">''</span>) . <span class="variable">$sitepath</span>);</span><br><span class="line"><span class="variable">$_W</span>[<span class="string">'siteroot'</span>] = <span class="string">'w7.voidking.com'</span>;</span><br></pre></td></tr></table></figure><p>然后，请求地址就全部变成 w7.voidking.com ，nice。</p><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>但是，一些请求报错：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Access</span> <span class="keyword">to</span> XMLHttpRequest at <span class="string">'javascript:;'</span> <span class="keyword">from</span> origin <span class="string">'http://w7.voidking.com'</span> has been blocked <span class="keyword">by</span> CORS <span class="keyword">policy</span>: <span class="keyword">Cross</span> origin requests are <span class="keyword">only</span> supported <span class="keyword">for</span> protocol schemes: http, data, chrome, chrome-<span class="keyword">extension</span>, https.</span><br></pre></td></tr></table></figure><p>明明都是同一个url，居然还是跨域错误，没有找到解决办法。</p><h2 id="重装微擎"><a href="#重装微擎" class="headerlink" title="重装微擎"></a>重装微擎</h2><p>既然自己安装微擎问题这么多，那就使用官网给的docker镜像好了，参考<a href="https://www.kancloud.cn/we7pengpeng/weengine/1369875" target="_blank" rel="noopener">docker安装微擎</a>。</p><p>1、删除原有环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">stop vk-php</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">rm vk-php</span></span><br></pre></td></tr></table></figure><p>2、启动新的容器</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name vk-php -d \</span><br><span class="line">-p <span class="number">8080</span>:<span class="number">80</span> \</span><br><span class="line">-v /opt/w7/<span class="symbol">mysql:</span>/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span> \</span></span><br><span class="line">-v /opt/w7/<span class="symbol">html:</span>/var/www/html \</span><br><span class="line">-e MYSQL\_ROOT\_PASSWORD=<span class="number">123456</span> -d \</span><br><span class="line">--restart=always \</span><br><span class="line">ccr.ccs.tencentyun.com/weiqing/<span class="symbol">nginxphpmysql:</span><span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>3、重新安装微擎<br><a href="http://ip:8080/install.php" target="_blank" rel="noopener">http://ip:8080/install.php</a><br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/newinstall.jpg?imageView2/0/w/700" alt=""></p><p>4、设置用户名密码<br><img src="http://cdn.voidking.com/@/imgs/docker-apache-php/setting.jpg?imageView2/0/w/700" alt=""></p><p>5、同样修改微擎源码，修改站点URL。</p><p>然后，同样有跨域问题，但是站点已经可以正常使用了，就先这么滴吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-centos-php-envirenment/&quot;&gt;《在CentOS7上配置PHP运行环境》&lt;/a&gt;一文中学习了安装配置LNMP环境，&lt;a href=&quot;https://www.voidking.com/dev-centos-apache-php/&quot;&gt;《CentOS安装Apache和PHP环境》&lt;/a&gt;一文中学习了安装配置Apache和PHP环境。&lt;/p&gt;
&lt;p&gt;本文学习使用Docker安装配置Apache和PHP，与Mysql结合，搭建一个容器化的LAMP环境，部署微擎服务。&lt;/p&gt;
&lt;p&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.130。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="后端" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
      <category term="php" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%90%8E%E7%AB%AF/php/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="apache" scheme="https://www.voidking.com/tags/apache/"/>
    
      <category term="php" scheme="https://www.voidking.com/tags/php/"/>
    
  </entry>
  
</feed>
