<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习的郝</title>
  
  <subtitle>好好学习，天天向上！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.voidking.com/"/>
  <updated>2021-04-17T13:21:53.981Z</updated>
  <id>https://www.voidking.com/</id>
  
  <author>
    <name>好好学习的郝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Travis CI部署项目到服务器</title>
    <link href="https://www.voidking.com/dev-travis-ci-deploy-to-server/"/>
    <id>https://www.voidking.com/dev-travis-ci-deploy-to-server/</id>
    <published>2021-04-11T08:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-hexo-travis-ci/">《Hexo配置Travis CI自动发布》</a>一文中，我们学习了使用travis-ci构建发布hexo项目的方法。</p><p>因为项目的特殊性，所以发布时只是把代码push到了git仓库，并没有把代码发布到我们自己的服务。本文，我们就来学习一下怎样通过travis-ci，把项目发布到我们自己的服务器。</p><p>需求：<br>已知hexo项目部署在github，百度抓取不到github的内容，因此我们想要在自己的服务器也部署一份代码，国内的流量打到自己的服务器。实现国内流量 -&gt; 阿里云服务器，国外流量 -&gt; github pages。<br>配置 hexo-deploy ，在发布时会同时发布静态页面到 <a href="https://github.com/voidking/voidking.github.io.git" target="_blank" rel="noopener">voidking.github.io</a> 和 <a href="https://gitee.com/voidking/voidking.git" target="_blank" rel="noopener">voidking</a>。<br>阿里云服务器上有项目 /opt/voidking ，项目仓库为 <a href="https://gitee.com/voidking/voidking.git" target="_blank" rel="noopener">voidking</a>。<br>现在想要实现的是，当使用 hexo-deploy 之后，阿里云服务器上的代码能够自动更新。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>给 voidking.github.io 项目配置travis-ci，当静态页面更新完成后，在阿里云服务器上执行 git pull。<br>中间需要解决的主要问题是： travis-ci 访问阿里云服务器的权限问题。<br>另外，因为 voidking.github.io 项目是线上项目，所以我们创建一个 travis-test 项目用来测试travis-ci的配置。</p><h1 id="配置travis-ci"><a href="#配置travis-ci" class="headerlink" title="配置travis-ci"></a>配置travis-ci</h1><h2 id="服务器密钥配置"><a href="#服务器密钥配置" class="headerlink" title="服务器密钥配置"></a>服务器密钥配置</h2><p>1、创建一个用户专门用来更新代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m voidking -s /bin/bash</span><br><span class="line">passwd voidking</span><br><span class="line">chmod voidking -R /opt/voidking</span><br></pre></td></tr></table></figure><p>2、生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su voidking</span><br><span class="line">cd ~</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>执行完之后，.ssh目录下生成了 id_rsa 和 id_rsa.pub。</p><p>3、使密钥生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALI_IP="8.136.11.123"</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub voidking@$&#123;ALI_IP&#125;</span><br><span class="line">ssh voidking@$&#123;ALI_IP&#125;</span><br></pre></td></tr></table></figure><h2 id="安装travis-client"><a href="#安装travis-client" class="headerlink" title="安装travis client"></a>安装travis client</h2><p>直接安装travis破坏服务器环境，因此最好使用Docker安装travis。<br>1、运行travis容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull ruby:slim</span><br><span class="line">docker run --name travis -it -d ruby:slim /bin/bash</span><br><span class="line">docker exec -it travis /bin/bash</span><br></pre></td></tr></table></figure><p>2、容器内安装travis client</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span></span><br><span class="line">gem install travis</span><br><span class="line">travis -h</span><br></pre></td></tr></table></figure><h2 id="travis-ci密钥配置"><a href="#travis-ci密钥配置" class="headerlink" title="travis-ci密钥配置"></a>travis-ci密钥配置</h2><p>1、拷贝密钥到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/voidking/.ssh/id_rsa travis:/tmp</span><br><span class="line">docker exec -it travis /bin/bash</span><br></pre></td></tr></table></figure><p>2、登录travis-ci</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">travis login --com --github-token xxxxxx</span><br></pre></td></tr></table></figure><p>3、对id_rsa加密，生成id_rsa.enc；同时生成服务端解密命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch .travis.yml</span><br><span class="line">travis encrypt-file id_rsa --add --com --repo=voidking/travis-test</span><br></pre></td></tr></table></figure><p>详情参考<a href="https://docs.travis-ci.com/user/encrypting-files" target="_blank" rel="noopener">Encrypting Files</a>。</p><p>执行完命令，会生成加密文件 id_rsa.enc，.travis.yml 中会被写入解密命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before_install:</span><br><span class="line">- openssl aes-256-cbc -K <span class="variable">$encrypted_f217180e22ee_key</span> -iv <span class="variable">$encrypted_f217180e22ee_iv</span> -<span class="keyword">in</span> id_rsa.<span class="keyword">enc</span> -<span class="keyword">out</span> id_rsa -<span class="keyword">d</span></span><br></pre></td></tr></table></figure><h2 id="travis-yml配置"><a href="#travis-yml配置" class="headerlink" title="travis.yml配置"></a>travis.yml配置</h2><p>1、访问Travis CI Pro，找到 voidking.github.io 项目，Settings，在Environment Variables一栏填入Name为GITEE_TOKEN，VALUE为gitee的access token。</p><p>2、在 travis-test 项目中放入 id_rsa.enc</p><p>3、在 travis-test 项目中创建 .travis.yml，内容为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">3.6</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># build main branch only</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ALI_IP:</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GIT_USER:</span> <span class="string">voidking</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GITEE_PAGES_REPO:</span> <span class="string">gitee.com/voidking/voidking.git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.136</span><span class="number">.13</span><span class="number">.58</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_f217180e22ee_key</span> <span class="string">-iv</span> <span class="string">$encrypted_f217180e22ee_iv</span> <span class="string">-in</span> <span class="string">id_rsa.enc</span> <span class="string">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="string">-d</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh</span> <span class="string">voidking@$&#123;ALI_IP&#125;</span> <span class="string">"cd /opt/nginx/html/voidking/ &amp;&amp; git pull --force --quiet \"https://$&#123;GIT_USER&#125;:$&#123;GITEE_TOKEN&#125;@$&#123;GITEE_PAGES_REPO&#125;\" master:master"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">echo</span> <span class="string">"deploy success"</span></span><br></pre></td></tr></table></figure><p>4、提交代码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commmit -m <span class="string">"添加travis.yml"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>5、验证<br>打开<a href="https://travis-ci.com/github/voidking/travis-test" target="_blank" rel="noopener">travis voidking/travis-test</a> ，可以看到脚本已经成功执行。<br><img src="http://cdn.voidking.com/@/imgs/travis-ci-deploy-to-server/success.png?imageView2/0/w/800" alt=""></p><p>登录阿里云服务器，git log查看代码版本，确实也已经更新到了最新版。nice！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-travis-ci/&quot;&gt;《Hexo配置Travis CI自动发布》&lt;/a&gt;一文中，我们学习了使用travis-ci构建发布hexo项目的方法。&lt;/p&gt;
&lt;p&gt;因为项目的特殊性，所以发布时只是把代码push到了git仓库，并没有把代码发布到我们自己的服务。本文，我们就来学习一下怎样通过travis-ci，把项目发布到我们自己的服务器。&lt;/p&gt;
&lt;p&gt;需求：&lt;br&gt;已知hexo项目部署在github，百度抓取不到github的内容，因此我们想要在自己的服务器也部署一份代码，国内的流量打到自己的服务器。实现国内流量 -&amp;gt; 阿里云服务器，国外流量 -&amp;gt; github pages。&lt;br&gt;配置 hexo-deploy ，在发布时会同时发布静态页面到 &lt;a href=&quot;https://github.com/voidking/voidking.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking.github.io&lt;/a&gt; 和 &lt;a href=&quot;https://gitee.com/voidking/voidking.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking&lt;/a&gt;。&lt;br&gt;阿里云服务器上有项目 /opt/voidking ，项目仓库为 &lt;a href=&quot;https://gitee.com/voidking/voidking.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;voidking&lt;/a&gt;。&lt;br&gt;现在想要实现的是，当使用 hexo-deploy 之后，阿里云服务器上的代码能够自动更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
      <category term="CICD" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/CICD/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
      <category term="cicd" scheme="https://www.voidking.com/tags/cicd/"/>
    
  </entry>
  
  <entry>
    <title>通用缩写表</title>
    <link href="https://www.voidking.com/dev-general-abbr/"/>
    <id>https://www.voidking.com/dev-general-abbr/</id>
    <published>2021-03-07T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.965Z</updated>
    
    <content type="html"><![CDATA[<p>1、本缩写表是《编码命名规范》的附录。</p><p>2、本缩写表中列出的都是通用性缩写，不提供标准缩写，如：Win9x、COM 等。</p><p>3、使用本缩写表里的缩写时，请对其进行必要的注释说明。</p><p>4、除少数情况以外，大部分缩写与大小写无关。</p><a id="more"></a><table><thead><tr><th align="center">缩写</th><th align="center">全称</th></tr></thead><tbody><tr><td align="center">addr</td><td align="center">Address</td></tr><tr><td align="center">adm</td><td align="center">Administrator</td></tr><tr><td align="center">app</td><td align="center">Application</td></tr><tr><td align="center">arg</td><td align="center">Argument</td></tr><tr><td align="center">asm</td><td align="center">assemble</td></tr><tr><td align="center">asyn</td><td align="center">asynchronization</td></tr><tr><td align="center">avg</td><td align="center">average</td></tr><tr><td align="center">DB</td><td align="center">Database</td></tr><tr><td align="center">bk</td><td align="center">back</td></tr><tr><td align="center">bmp</td><td align="center">Bitmap</td></tr><tr><td align="center">btn</td><td align="center">Button</td></tr><tr><td align="center">buf</td><td align="center">Buffer</td></tr><tr><td align="center">calc</td><td align="center">Calculate</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">chg</td><td align="center">Change</td></tr><tr><td align="center">clk</td><td align="center">Click</td></tr><tr><td align="center">clr</td><td align="center">color</td></tr><tr><td align="center">cmd</td><td align="center">Command</td></tr><tr><td align="center">cmp</td><td align="center">Compare</td></tr><tr><td align="center">col</td><td align="center">Column</td></tr><tr><td align="center">coord</td><td align="center">coordinates</td></tr><tr><td align="center">cpy</td><td align="center">copy</td></tr><tr><td align="center">ctl/ctrl</td><td align="center">Control</td></tr><tr><td align="center">cur</td><td align="center">Current</td></tr><tr><td align="center">cyl</td><td align="center">Cylinder</td></tr><tr><td align="center">dbg</td><td align="center">Debug</td></tr><tr><td align="center">dbl</td><td align="center">Double</td></tr><tr><td align="center">dec</td><td align="center">Decrease</td></tr><tr><td align="center">def</td><td align="center">default</td></tr><tr><td align="center">del</td><td align="center">Delete</td></tr><tr><td align="center">dest/dst</td><td align="center">Destination</td></tr><tr><td align="center">dev</td><td align="center">Device</td></tr><tr><td align="center">dict</td><td align="center">dictionary</td></tr><tr><td align="center">diff</td><td align="center">different</td></tr><tr><td align="center">dir</td><td align="center">directory</td></tr><tr><td align="center">disp</td><td align="center">Display</td></tr><tr><td align="center">div</td><td align="center">Divide</td></tr><tr><td align="center">dlg</td><td align="center">Dialog</td></tr><tr><td align="center">doc</td><td align="center">Document</td></tr><tr><td align="center">drv</td><td align="center">Driver</td></tr><tr><td align="center">dyna</td><td align="center">Dynamic</td></tr><tr><td align="center">env</td><td align="center">Environment</td></tr><tr><td align="center">err</td><td align="center">error</td></tr><tr><td align="center">ex/ext</td><td align="center">Extend</td></tr><tr><td align="center">exec</td><td align="center">execute</td></tr><tr><td align="center">flg</td><td align="center">flag</td></tr><tr><td align="center">frm</td><td align="center">Frame</td></tr><tr><td align="center">func/fn</td><td align="center">Function</td></tr><tr><td align="center">grp</td><td align="center">group</td></tr><tr><td align="center">horz</td><td align="center">Horizontal</td></tr><tr><td align="center">idx/ndx</td><td align="center">Index</td></tr><tr><td align="center">img</td><td align="center">Image</td></tr><tr><td align="center">impl</td><td align="center">Implement</td></tr><tr><td align="center">inc</td><td align="center">Increase</td></tr><tr><td align="center">info</td><td align="center">Information</td></tr><tr><td align="center">init</td><td align="center">Initial/Initialize/Initialization</td></tr><tr><td align="center">ins</td><td align="center">Insert</td></tr><tr><td align="center">inst</td><td align="center">Instance</td></tr><tr><td align="center">INT/intr</td><td align="center">Interrupt</td></tr><tr><td align="center">len</td><td align="center">Length</td></tr><tr><td align="center">lib</td><td align="center">Library</td></tr><tr><td align="center">lnk</td><td align="center">Link</td></tr><tr><td align="center">log</td><td align="center">logical</td></tr><tr><td align="center">lst</td><td align="center">List</td></tr><tr><td align="center">max</td><td align="center">maximum</td></tr><tr><td align="center">mem</td><td align="center">Memory</td></tr><tr><td align="center">mgr/man</td><td align="center">Manage/Manager</td></tr><tr><td align="center">mid</td><td align="center">middle</td></tr><tr><td align="center">min</td><td align="center">minimum</td></tr><tr><td align="center">msg</td><td align="center">Message</td></tr><tr><td align="center">mul</td><td align="center">Multiply</td></tr><tr><td align="center">num</td><td align="center">Number</td></tr><tr><td align="center">obj</td><td align="center">Object</td></tr><tr><td align="center">ofs</td><td align="center">Offset</td></tr><tr><td align="center">org</td><td align="center">Origin</td></tr><tr><td align="center">param</td><td align="center">Parameter</td></tr><tr><td align="center">pic</td><td align="center">picture</td></tr><tr><td align="center">pkg</td><td align="center">package</td></tr><tr><td align="center">pnt/pt</td><td align="center">Point</td></tr><tr><td align="center">pos</td><td align="center">Position</td></tr><tr><td align="center">pre/prev</td><td align="center">previous</td></tr><tr><td align="center">prg</td><td align="center">program</td></tr><tr><td align="center">prn</td><td align="center">Print</td></tr><tr><td align="center">proc</td><td align="center">Process</td></tr><tr><td align="center">prop</td><td align="center">Properties</td></tr><tr><td align="center">psw</td><td align="center">Password</td></tr><tr><td align="center">ptr</td><td align="center">Pointer</td></tr><tr><td align="center">pub</td><td align="center">Public</td></tr><tr><td align="center">rc</td><td align="center">rect</td></tr><tr><td align="center">ref</td><td align="center">Reference</td></tr><tr><td align="center">reg</td><td align="center">Register</td></tr><tr><td align="center">req</td><td align="center">request</td></tr><tr><td align="center">res</td><td align="center">Resource</td></tr><tr><td align="center">ret</td><td align="center">return</td></tr><tr><td align="center">rgn</td><td align="center">region</td></tr><tr><td align="center">scr</td><td align="center">screen</td></tr><tr><td align="center">sec</td><td align="center">Second</td></tr><tr><td align="center">seg</td><td align="center">Segment</td></tr><tr><td align="center">sel</td><td align="center">Select</td></tr><tr><td align="center">src</td><td align="center">Source</td></tr><tr><td align="center">std</td><td align="center">Standard</td></tr><tr><td align="center">stg</td><td align="center">Storage</td></tr><tr><td align="center">stm</td><td align="center">Stream</td></tr><tr><td align="center">str</td><td align="center">String</td></tr><tr><td align="center">sub</td><td align="center">Subtract</td></tr><tr><td align="center">sum</td><td align="center">summation</td></tr><tr><td align="center">svr</td><td align="center">Server</td></tr><tr><td align="center">sync</td><td align="center">Synchronization</td></tr><tr><td align="center">sys</td><td align="center">System</td></tr><tr><td align="center">tbl</td><td align="center">Table</td></tr><tr><td align="center">temp/tmp</td><td align="center">Temporary</td></tr><tr><td align="center">tran/trans</td><td align="center">translate/transation/transparent</td></tr><tr><td align="center">tst</td><td align="center">Test</td></tr><tr><td align="center">txt</td><td align="center">text</td></tr><tr><td align="center">unk</td><td align="center">Unknown</td></tr><tr><td align="center">upd</td><td align="center">Update</td></tr><tr><td align="center">upg</td><td align="center">Upgrade</td></tr><tr><td align="center">util</td><td align="center">Utility</td></tr><tr><td align="center">var</td><td align="center">Variable</td></tr><tr><td align="center">ver</td><td align="center">Version</td></tr><tr><td align="center">vert</td><td align="center">Vertical</td></tr><tr><td align="center">vir</td><td align="center">Virus</td></tr><tr><td align="center">wnd</td><td align="center">Window</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、本缩写表是《编码命名规范》的附录。&lt;/p&gt;
&lt;p&gt;2、本缩写表中列出的都是通用性缩写，不提供标准缩写，如：Win9x、COM 等。&lt;/p&gt;
&lt;p&gt;3、使用本缩写表里的缩写时，请对其进行必要的注释说明。&lt;/p&gt;
&lt;p&gt;4、除少数情况以外，大部分缩写与大小写无关。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
    
      <category term="转载" scheme="https://www.voidking.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo本地搜索加速</title>
    <link href="https://www.voidking.com/dev-hexo-local-search-accelerate/"/>
    <id>https://www.voidking.com/dev-hexo-local-search-accelerate/</id>
    <published>2021-02-24T13:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着文章数量的增长，search.xml文件越来越大。因此在加载这个文件时，需要的时间很长，而且偶尔会出现加载不出来的情况。</p><p>有没有什么办法能够加快加载速度呢？必须是有的，本文就来研究一下。</p><p><a href="https://www.voidking.com/dev-hexo-gulp/">《Hexo使用Gulp压缩静态资源》</a>一文中，提到search.xml大小为3.5M。今天又看了一下，文件大小变成了4.3M（加载时会压缩传输，大小约为1.3M）。从文中的实验可以得出结论，在文件大小方面，没有什么优化的空间了。</p><p>再想优化，就得从网络方面入手：CDN加速。主要参考<a href="https://zhuanlan.zhihu.com/p/76951130" target="_blank" rel="noopener">jsDelivr+Github 使用方法</a>。</p><p>更多Hexo相关内容，参考<a href="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/">Hexo系列文章</a>。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>修改 search.xml 的文件链接，改成cdn的地址。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>1、测试jsdelivr链接，search.xml的cdn地址为<br><a href="https://cdn.jsdelivr.net/gh/voidking/voidking.github.io/search.xml" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/voidking/voidking.github.io/search.xml</a></p><p>2、编辑 next/source/js/local-search.js ，如下修改：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const path = CONFIG.root + searchPath;</span></span><br><span class="line"><span class="keyword">const</span> jsdelivr = <span class="symbol">'https</span>:<span class="comment">//cdn.jsdelivr.net/gh/'</span></span><br><span class="line"><span class="keyword">const</span> userRepo = <span class="symbol">'voidking</span>/voidking.github.io/'</span><br><span class="line"><span class="keyword">const</span> path = jsdelivr + userRepo + searchPath;</span><br></pre></td></tr></table></figure><p>3、本地测试，提交代码，使用修改后的主题进行部署</p><p>实测加载速度飞快，4.3M的search.xml能够稳定在2秒内加载完毕，完美。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;随着文章数量的增长，search.xml文件越来越大。因此在加载这个文件时，需要的时间很长，而且偶尔会出现加载不出来的情况。&lt;/p&gt;
&lt;p&gt;有没有什么办法能够加快加载速度呢？必须是有的，本文就来研究一下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-hexo-gulp/&quot;&gt;《Hexo使用Gulp压缩静态资源》&lt;/a&gt;一文中，提到search.xml大小为3.5M。今天又看了一下，文件大小变成了4.3M（加载时会压缩传输，大小约为1.3M）。从文中的实验可以得出结论，在文件大小方面，没有什么优化的空间了。&lt;/p&gt;
&lt;p&gt;再想优化，就得从网络方面入手：CDN加速。主要参考&lt;a href=&quot;https://zhuanlan.zhihu.com/p/76951130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jsDelivr+Github 使用方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;更多Hexo相关内容，参考&lt;a href=&quot;https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/&quot;&gt;Hexo系列文章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="hexo" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.voidking.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown编辑器</title>
    <link href="https://www.voidking.com/dev-markdown-editor/"/>
    <id>https://www.voidking.com/dev-markdown-editor/</id>
    <published>2021-02-13T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假设现在要写一篇markdown格式文章，使用什么编辑器比较好？答：<a href="https://www.sublimetext.com/" target="_blank" rel="noopener">sublime</a>或者<a href="https://typora.io/" target="_blank" rel="noopener">typora</a>。</p><p>假设现在要把一篇markdown格式文章导出成pdf文档，使用什么编辑器比较好？答：typora。</p><p>假设现在要把一篇markdown格式文章发布成微信公众号文章，使用什么编辑器比较好？答：<a href="https://github.com/lyricat/wechat-format" target="_blank" rel="noopener">wechat-format</a>。</p><p>本文主要介绍三款 markdown 编辑器，分别是 sublime、typora和wechat-format。<br>此外，还会介绍几个在线markdown编辑器，测试和预览都很方便。</p><a id="more"></a><h1 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h1><p>.md 结尾的文件，在使用 sublime 进行编辑时会自动语法高亮。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/markdown.png?imageView2/0/w/800" alt=""><br>之所以推荐sublime，是因为这个编辑器是个万能的编辑器，而且非常轻量。<br>使用了六年了，依然情有独钟。</p><h1 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>typora是近两年崛起的markdown编辑器神器。<br>传统的markdown编辑器，左边是编辑器，右边是预览。typora另辟蹊径，没有左右分开，而是把编辑和预览结合在一起，随时切换（command+/），更可以在预览时进行编辑。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora1.png?imageView2/0/w/800" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora2.png?imageView2/0/w/800" alt=""></p><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>typora提供各种主题，更是支持用户自定义主题，简单好用。下面我们按照自己的需求来定制主题，熟悉一下自定义主题的流程。</p><p>已知需求为：</p><ul><li>github主题自己很喜欢，但是标题字号太大，想要改小一点。</li><li>标题在显示的时候自动编号。</li></ul><p>1、Typora，偏好设置，外观，打开主题文件夹<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/folder.png?imageView2/0/w/800" alt=""></p><p>2、备份github.css为github.css.bak</p><p>3、编辑github.css，修改字号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.225</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.15em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.43</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.05em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h5</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、编辑github.css，给标题前添加自动编号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 标题自动编号 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">counter-reset</span>: h1counter; &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">counter-reset</span>: h2counter; &#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123; <span class="attribute">counter-reset</span>: h3counter; &#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">counter-reset</span>: h4counter; &#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123; <span class="attribute">counter-reset</span>: h5counter; &#125;</span><br><span class="line"><span class="selector-tag">h5</span> &#123; <span class="attribute">counter-reset</span>: h6counter; &#125;</span><br><span class="line"><span class="selector-tag">h6</span> &#123; &#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h1counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h2counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h3counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h4counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h5counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h5counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">counter-increment</span>: h6counter;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(h1counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h2counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h3counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h4counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h5counter) <span class="string">"."</span></span><br><span class="line">            <span class="built_in">counter</span>(h6counter) <span class="string">".\0000a0\0000a0"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、重启typora<br>可见标题字号变小了，同时添加了编号。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora3.png?imageView2/0/w/800" alt=""><br>但是，如果直接复制粘贴内容到微信公众号，这些标题编号不会被复制。而且，换行效果也没有了。<br>因此，从typora直接复制粘贴到微信公众号，不是一个好的方案。</p><h2 id="导出pdf"><a href="#导出pdf" class="headerlink" title="导出pdf"></a>导出pdf</h2><p>文件，导出，PDF。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/typora2pdf.png?imageView2/0/w/800" alt=""><br>如上，typora导出的pdf文档，简直完美。</p><h1 id="wechat-format"><a href="#wechat-format" class="headerlink" title="wechat-format"></a>wechat-format</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>wechat-format最大的优点是：适应微信公众号。比如，微信不支持外链，wechat-format生成的预览会包含 reference。<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format1.png?imageView2/0/h/500" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format2.png?imageView2/0/h/500" alt=""><br>但是，标题居中效果不是我想要的，标题也没有自动编号，所以也需要自定义一下。</p><h2 id="自定义主题-1"><a href="#自定义主题-1" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>下载wechat-format源码，主要修改：</p><ul><li>src/assets/scripts/themes/default.js</li><li>src/assets/scripts/renderers/wx-renderer.js</li><li>src/assets/css/app.css</li></ul><p>修改后的代码参考 <a href="https://github.com/voidking/wechat-format/tree/root" target="_blank" rel="noopener">wechat-format</a>，最终效果如下<br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format3.png?imageView2/0/h/500" alt=""><br><img src="http://cdn.voidking.com/@/imgs/markdown-editor/wechat-format4.png?imageView2/0/h/500" alt=""></p><h2 id="失败的尝试"><a href="#失败的尝试" class="headerlink" title="失败的尝试"></a>失败的尝试</h2><p>但是，修改完成之后，复制粘贴到微信公众号，这些标题编号依然不会被复制。<br>那么，怎样才能复制到这些编号？答：使这些编号变成元素，而不是样式。所以，需要使用js给页面添加编号元素。<br>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.cnblogs.com/qiudeqing/p/3229583.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">number</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> headings;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.querySelectorAll)</span><br><span class="line">        headings = <span class="built_in">document</span>.querySelectorAll(<span class="string">"h1,h2,h3,h4,h5,h6"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        headings = findHeadings(<span class="built_in">document</span>.body, []);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findHeadings</span>(<span class="params">root, sects</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> c = root.firstChild; c != <span class="literal">null</span>; c = c.nextSibling) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.nodeType !== <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (c.tagName.length == <span class="number">2</span> &amp;&amp; c.tagName.charAt(<span class="number">0</span>) == <span class="string">"H"</span>)</span><br><span class="line">                sects.push(c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                findHeadings(c, sects);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sects;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sectionNumbers = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> h = <span class="number">0</span>; h &lt; headings.length; h++) &#123;</span><br><span class="line">        <span class="keyword">var</span> heading = headings[h];</span><br><span class="line">        <span class="keyword">var</span> level = <span class="built_in">parseInt</span>(heading.tagName.charAt(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(level) || level &lt; <span class="number">1</span> || level &gt; <span class="number">6</span>) <span class="keyword">continue</span>;</span><br><span class="line">        sectionNumbers[level<span class="number">-1</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = level; i &lt; <span class="number">6</span>; i++) sectionNumbers[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> sectionNumber = sectionNumbers.slice(<span class="number">0</span>,level).join(<span class="string">"."</span>) + <span class="string">". "</span>;</span><br><span class="line">        <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">        span.className = <span class="string">"TOCSectNum"</span>;</span><br><span class="line">        span.innerHTML = sectionNumber;</span><br><span class="line">        heading.insertBefore(span, heading.firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，想要把这个代码应用到wechat-format，是有难度的，假期搞了一天，最终效果不理想，暂时放弃。<br>思路：修改 src/assets/scripts/editor.js ，把number函数改写到这个文件里。中间会用到dom转str和str转dom，代码附上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/DOMParser</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/XMLSerializer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trans</span>(<span class="params">str</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> parser = <span class="keyword">new</span> DOMParser();</span><br><span class="line">    <span class="keyword">var</span> doc=parser.parseFromString(str, <span class="string">"text/xml"</span>);</span><br><span class="line">    doc = number(doc);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line">    <span class="keyword">return</span> s.serializeToString(doc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在线markdown编辑器"><a href="#在线markdown编辑器" class="headerlink" title="在线markdown编辑器"></a>在线markdown编辑器</h1><h2 id="mdnice"><a href="#mdnice" class="headerlink" title="mdnice"></a>mdnice</h2><p><a href="https://www.mdnice.com/" target="_blank" rel="noopener">Markdown Nice</a>是一个支持自定义样式的 Markdown 编辑器，支持导出成微信公众号文章和知乎文章。</p><p>值得一提的是，mdnice导出的微信公众号文章，排版非常nice，比 wechat-format 还要美观。<br>尝试了自定义样式，添加了标题编号，同样无法复制到微信公众号。</p><h2 id="openwrite"><a href="#openwrite" class="headerlink" title="openwrite"></a>openwrite</h2><p><a href="https://openwrite.cn/" target="_blank" rel="noopener">OpenWrite</a>是一个博客群发平台，支持一键发文到微信公众号、知乎、头条、博客园、CSDN等平台。其中一项功能是Markdown格式文章导出微信公众号预览。</p><h2 id="Cmd-Markdown"><a href="#Cmd-Markdown" class="headerlink" title="Cmd Markdown"></a>Cmd Markdown</h2><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown</a>是一个用了很多年的在线markdown编辑器，稳定靠谱，支持高亮代码块、LaTeX 公式、流程图。</p><h2 id="马克飞象"><a href="#马克飞象" class="headerlink" title="马克飞象"></a>马克飞象</h2><p><a href="https://maxiang.io/#" target="_blank" rel="noopener">马克飞象</a>是一款专为印象笔记（Evernote）打造的Markdown编辑器，支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传。马克飞象同时提供桌面客户端以及离线Chrome App，支持移动端 Web。</p><h2 id="StackEdit"><a href="#StackEdit" class="headerlink" title="StackEdit"></a>StackEdit</h2><p><a href="https://stackedit.io/app#" target="_blank" rel="noopener">StackEdit</a>支持google登录，发布文章到web（github、gitlab、wordpress等），支持高亮代码块、LaTeX 公式、流程图。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;假设现在要写一篇markdown格式文章，使用什么编辑器比较好？答：&lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime&lt;/a&gt;或者&lt;a href=&quot;https://typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;typora&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;假设现在要把一篇markdown格式文章导出成pdf文档，使用什么编辑器比较好？答：typora。&lt;/p&gt;
&lt;p&gt;假设现在要把一篇markdown格式文章发布成微信公众号文章，使用什么编辑器比较好？答：&lt;a href=&quot;https://github.com/lyricat/wechat-format&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wechat-format&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文主要介绍三款 markdown 编辑器，分别是 sublime、typora和wechat-format。&lt;br&gt;此外，还会介绍几个在线markdown编辑器，测试和预览都很方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="编辑器" scheme="https://www.voidking.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="sublime" scheme="https://www.voidking.com/tags/sublime/"/>
    
      <category term="markdown" scheme="https://www.voidking.com/tags/markdown/"/>
    
      <category term="typora" scheme="https://www.voidking.com/tags/typora/"/>
    
      <category term="wechat-format" scheme="https://www.voidking.com/tags/wechat-format/"/>
    
  </entry>
  
  <entry>
    <title>Shell和Python互相调用</title>
    <link href="https://www.voidking.com/dev-shell-python/"/>
    <id>https://www.voidking.com/dev-shell-python/</id>
    <published>2021-01-13T13:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在linux上，最常用的编程语言是shell，其次是python。而这两种语言，很多时候需要配合使用。本文就研究一下这两种语言互相调用的方法。</p><p>参考文档：</p><ul><li><a href="https://www.voidking.com/dev-shell-script-program-1/">《Shell脚本编程》</a></li><li><a href="https://www.voidking.com/dev-python-start/">《Python基础》</a></li></ul><a id="more"></a><h1 id="shell调用python"><a href="#shell调用python" class="headerlink" title="shell调用python"></a>shell调用python</h1><h2 id="调用python脚本"><a href="#调用python脚本" class="headerlink" title="调用python脚本"></a>调用python脚本</h2><p>shell调用python脚本，直接调用即可，例如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> main.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><h2 id="调用python模块"><a href="#调用python模块" class="headerlink" title="调用python模块"></a>调用python模块</h2><p>举个简单的例子，我们想要对curl获取的结果进行json格式化。<br>假设安装了jq，可以使用jq命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span> <span class="string">| jq</span></span><br></pre></td></tr></table></figure><p>假设没有安装jq，那我们可以使用python的 json.tool 模块：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span> <span class="string">| python -m json.tool</span></span><br></pre></td></tr></table></figure><h2 id="调用python函数"><a href="#调用python函数" class="headerlink" title="调用python函数"></a>调用python函数</h2><p>1、test.py 内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#scriptname:test.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helloworld</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"helloworld"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> helloworld()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"haojin"</span>,<span class="number">100</span>,<span class="string">"beijing"</span></span><br></pre></td></tr></table></figure><p>2、shell中调用 test.py 中的方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python -c 'import test;print test.helloworld<span class="literal">()</span>'</span><br><span class="line">python -c 'import test;test.echo<span class="literal">()</span>'</span><br><span class="line"></span><br><span class="line">res=<span class="constructor">$(<span class="params">python</span> -<span class="params">c</span> '<span class="params">import</span> <span class="params">test</span>;<span class="params">print</span> <span class="params">test</span>.<span class="params">get_user</span>()</span>')</span><br><span class="line">name=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f1</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>,$<span class="operator">/</span><span class="operator">/</span>' | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>^(<span class="operator">/</span><span class="operator">/</span>' | <span class="params">sed</span> <span class="string">"s/\'//g"</span>)</span></span><br><span class="line">score=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f2</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>,$<span class="operator">/</span><span class="operator">/</span>')</span></span><br><span class="line">loc=<span class="constructor">$(<span class="params">echo</span> $<span class="params">res</span> | <span class="params">cut</span> -<span class="params">d</span>' ' -<span class="params">f3</span> | <span class="params">sed</span> '<span class="params">s</span><span class="operator">/</span>)</span>$<span class="comment">//' | sed "s/\'//g")</span></span><br></pre></td></tr></table></figure><h1 id="python调用shell"><a href="#python调用shell" class="headerlink" title="python调用shell"></a>python调用shell</h1><h2 id="调用shell命令"><a href="#调用shell命令" class="headerlink" title="调用shell命令"></a>调用shell命令</h2><p>main.py内容为</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">val = <span class="built_in">os</span>.system(<span class="string">'ls -al'</span>)</span><br><span class="line"><span class="built_in">print</span> val</span><br></pre></td></tr></table></figure><p>其中，val的值是exit code。</p><p>执行main.py，<code>python main.py</code></p><h2 id="调用shell脚本"><a href="#调用shell脚本" class="headerlink" title="调用shell脚本"></a>调用shell脚本</h2><p>1、main.sh 内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>2、python 调用 main.sh</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line">val = <span class="built_in">os</span>.system(<span class="string">'sh main.sh'</span>)</span><br><span class="line"><span class="built_in">print</span> val</span><br></pre></td></tr></table></figure><h2 id="获取shell指令的结果"><a href="#获取shell指令的结果" class="headerlink" title="获取shell指令的结果"></a>获取shell指令的结果</h2><p>例子：获取echo命令结果。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">res = <span class="built_in">os</span>.<span class="built_in">popen</span>(<span class="string">'echo "hello"'</span>)</span><br><span class="line"><span class="built_in">print</span> res.<span class="built_in">read</span>()</span><br><span class="line">res.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>高级例子：获取curl命令的返回结果，转化成dict。<br>1、main.sh 内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">curl -s <span class="string">"http://rap2api.taobao.org/app/mock/241888/example/1578301745121"</span></span><br></pre></td></tr></table></figure><p>2、python 调用 main.sh</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="title">res</span> = os.popen('sh main.sh')</span><br><span class="line"><span class="class"><span class="keyword">data</span> = json.loads(<span class="title">res</span>.<span class="title">read</span>())</span></span><br><span class="line"><span class="title">res</span>.close()</span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['number']</span></span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['string']</span></span><br><span class="line"><span class="title">print</span> <span class="class"><span class="keyword">data</span>['array'][0]['foo']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在linux上，最常用的编程语言是shell，其次是python。而这两种语言，很多时候需要配合使用。本文就研究一下这两种语言互相调用的方法。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.voidking.com/dev-shell-script-program-1/&quot;&gt;《Shell脚本编程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.voidking.com/dev-python-start/&quot;&gt;《Python基础》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/python/"/>
    
      <category term="shell" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/shell/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="linux" scheme="https://www.voidking.com/tags/linux/"/>
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装配置Jupyter</title>
    <link href="https://www.voidking.com/dev-docker-jupyter/"/>
    <id>https://www.voidking.com/dev-docker-jupyter/</id>
    <published>2021-01-03T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-jupyter-notebook/">《Jupyter notebook》</a>一文中学习了jupyter的使用，本文学习一下怎样使用docker安装jupyter，并且配置访问密码。</p><p>前置条件是安装配置好了docker环境，安装方法参考<a href="https://www.voidking.com/dev-docker-start/">《Docker入门》</a>。已知docker宿主机IP为192.168.56.130。</p><a id="more"></a><h1 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h1><p>1、登录dockerhub查看需要的<a href="https://hub.docker.com/r/jupyter/base-notebook/" target="_blank" rel="noopener">Jupyter - Docker Official Images</a>。</p><p>2、下载jupyter镜像（以6.1.6为例）<br><code>docker pull jupyter/base-notebook:notebook-6.1.6</code></p><p>3、创建配置目录</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/jupyter/jovyan</span><br><span class="line">chmod <span class="number">777</span> /<span class="keyword">opt</span>/jupyter/jovyan</span><br></pre></td></tr></table></figure><p>4、启动jupyter服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name vk-jupyter -d \</span><br><span class="line">-p <span class="number">8888</span>:<span class="number">8888</span> \</span><br><span class="line">-v /opt/jupyter/jovyan:/home/jovyan \</span><br><span class="line">jupyter/base-notebook:notebook<span class="number">-6.1</span><span class="number">.6</span></span><br></pre></td></tr></table></figure><p>以上命令：</p><ul><li>命名容器为vk-jupyter，后台运行</li><li>映射宿主机8888端口到容器的8888端口</li><li>挂载宿主机目录/opt/jupyter/jovyan到容器目录/home/jovyan</li></ul><p>更多启动命令参数可以参考<a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Jupyter Docker Stacks</a>。</p><p>5、验证安装<br><code>docker ps</code>，jupyter启动正常的话就可以看到vk-jupyter容器。</p><p>浏览器访问 <a href="http://192.168.56.130:8888" target="_blank" rel="noopener">http://192.168.56.130:8888</a> ，可以看到Jupyter登录页面。</p><p>6、登录<br><code>docker exec -it vk-jupyter jupyter notebook list</code><br>可以查看到登录需要的token，使用token即可登录进入jupyter编辑页面。</p><h1 id="配置jupyter"><a href="#配置jupyter" class="headerlink" title="配置jupyter"></a>配置jupyter</h1><p>1、设置密码</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it vk-<span class="keyword">jupyter </span><span class="keyword">jupyter </span>notebook password</span><br><span class="line">docker restart vk-<span class="keyword">jupyter</span></span><br></pre></td></tr></table></figure><p>2、使用密码<br>浏览器访问 <a href="http://192.168.56.130:8888" target="_blank" rel="noopener">http://192.168.56.130:8888</a><br>此时使用自己设置的密码就可以访问jupyter了。</p><p>3、根目录<br>jupyter编辑器的默认根目录为 /home/jovyan ，对应宿主机目录 /opt/jupyter/jovyan ，创建的目录和文件都去这个路径下面去找。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-jupyter-notebook/&quot;&gt;《Jupyter notebook》&lt;/a&gt;一文中学习了jupyter的使用，本文学习一下怎样使用docker安装jupyter，并且配置访问密码。&lt;/p&gt;
&lt;p&gt;前置条件是安装配置好了docker环境，安装方法参考&lt;a href=&quot;https://www.voidking.com/dev-docker-start/&quot;&gt;《Docker入门》&lt;/a&gt;。已知docker宿主机IP为192.168.56.130。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用IDEA合并代码的个人实践</title>
    <link href="https://www.voidking.com/dev-idea-git-merge-code/"/>
    <id>https://www.voidking.com/dev-idea-git-merge-code/</id>
    <published>2020-09-11T00:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>团队合作开发，肯定会涉及到代码合并的问题。<br>以前在代码合并的时候，喜欢使用beyond compare。同一个项目拷贝两份，一个保持最新代码，一个用于开发，开发完成后使用beyond compare把开发代码合并到最新代码。然后push到远程分支，提一个MR。<br>后来发现，使用IDEA配合Git命令来合并代码，简直完美。本文就来记录一下这种方法，供大家参考。</p><p>已知项目名为 voidking，有很多分支，其中 pre 分支用来发布服务到预发环境，master分支用来发布服务到生产环境。代码合并后，创建pre或者prod开头的tag，触发CICD。</p><a id="more"></a><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>1、在github或者gitlab新建一个issue，描述清楚问题或者功能。<br>2、针对这个issue，创建一个分支。这个分支会以issue的标题命名，前面加上issue的编号。假设生成的branch为 3-add-new-feat 。<br>3、拉取最新代码后，本地创建自己的分支<br><code>git checkout -b haojin</code></p><p>4、一顿复制粘贴，功能完成，commit自己的代码。</p><h1 id="pre分支代码合并"><a href="#pre分支代码合并" class="headerlink" title="pre分支代码合并"></a>pre分支代码合并</h1><p>到了代码合并的步骤，表演开始。</p><p>1、拉取最新代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>2、创建mergepre分支</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span>mergepre origin/pre</span><br></pre></td></tr></table></figure><p>3、使用IDEA合并代码<br>点击界面右下角Git Branches，选择 haojin 分支，Show Diff with Working Tree。<br>根据自己的修改，合并代码到当前的mergepre分支，修改完成后commit代码。</p><p>4、push代码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> HEAD:haojin --force</span><br></pre></td></tr></table></figure><p>需要注意的是，这里我们把mergepre的分支push到了远程的haojin分支，并没有push到 3-add-new-feat 。这是因为，3-add-new-feat这个分支我们留着，代码合并到master分支时使用。</p><p>点击出现的链接，或者在gitlab上的haojin分支点击创建MR，进入创建MR的页面。</p><p>5、选择要合并到的分支为 pre ，可以看到代码的变更，再次检查。</p><p>6、检查没问题的话，提交MR即可。</p><h1 id="master分支代码合并"><a href="#master分支代码合并" class="headerlink" title="master分支代码合并"></a>master分支代码合并</h1><p>以上，假设我们已经合并了自己的代码到 pre 分支。并且在预发环境发版验证通过，没有问题。接下来就可以合并代码到 master 分支了。</p><p>1、拉取最新代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>2、创建mergeprod分支</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span>mergeprod</span><br></pre></td></tr></table></figure><p>3、使用IDEA合并代码<br>点击界面右下角Git Branches，选择 haojin 分支，Show Diff with Working Tree。<br>根据自己的修改，合并代码到当前的mergeprod分支，修改完成后commit代码。</p><p>4、push代码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> HEAD:<span class="number">3</span>-add-<span class="built_in">new</span>-feat</span><br></pre></td></tr></table></figure><p>点击出现的链接，或者在gitlab上的haojin分支点击创建MR，进入创建MR的页面。</p><p>5、选择要合并到的分支为 master ，可以看到代码的变更，再次检查。</p><p>6、检查没问题的话，提交MR即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;团队合作开发，肯定会涉及到代码合并的问题。&lt;br&gt;以前在代码合并的时候，喜欢使用beyond compare。同一个项目拷贝两份，一个保持最新代码，一个用于开发，开发完成后使用beyond compare把开发代码合并到最新代码。然后push到远程分支，提一个MR。&lt;br&gt;后来发现，使用IDEA配合Git命令来合并代码，简直完美。本文就来记录一下这种方法，供大家参考。&lt;/p&gt;
&lt;p&gt;已知项目名为 voidking，有很多分支，其中 pre 分支用来发布服务到预发环境，master分支用来发布服务到生产环境。代码合并后，创建pre或者prod开头的tag，触发CICD。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/git/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="git" scheme="https://www.voidking.com/tags/git/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Go语言开发的小技巧</title>
    <link href="https://www.voidking.com/dev-golang-skills/"/>
    <id>https://www.voidking.com/dev-golang-skills/</id>
    <published>2020-09-10T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学到了一些Go语言开发时的小技巧，做下记录。</p><h1 id="提高下载速度"><a href="#提高下载速度" class="headerlink" title="提高下载速度"></a>提高下载速度</h1><p>方法一：科学上网</p><p>方法二：配置代理，详情参考<a href="https://www.voidking.com/dev-golang-gpm/">《Golang包管理工具》</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export GOPROXY=https://goproxy.cn</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPROXY</span>=https://goproxy.io</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GO111MODULE</span>=on</span><br><span class="line">go <span class="builtin-name">get</span> -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure><p>方法三：使用gopm</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go <span class="builtin-name">get</span> -v github.com/gpmgo/gopm</span><br><span class="line">gopm <span class="builtin-name">get</span> -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="编译安装软件"><a href="#编译安装软件" class="headerlink" title="编译安装软件"></a>编译安装软件</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/g</span>oimports</span><br><span class="line">go install golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/g</span>oimports</span><br></pre></td></tr></table></figure><h1 id="自动格式化"><a href="#自动格式化" class="headerlink" title="自动格式化"></a>自动格式化</h1><p>Golang希望统一代码风格，因此推出了gofmt工具。gofmt可以格式化单个文件，也可以格式化整个目录下的所有go文件。<br>除了gofmt工具，go语言中还有一个go fmt命令，该命令是gofmt的简单封装。</p><p>在IDEA中，怎样使用gofmt呢？<br>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索File，找到File Watchers插件并安装。<br>3、Tools，File Watchers，添加或修改gofmt模版。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> type：Go</span><br><span class="line">Scope：Project <span class="keyword">files</span></span><br><span class="line">Program：/usr/local/go/bin/gofmt</span><br><span class="line">Arguments：-l -w -s <span class="symbol">$</span>FilePath<span class="symbol">$</span></span><br><span class="line">Output paths to refresh：<span class="symbol">$</span>FilePath<span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>4、勾选Enabled。</p><p>保存源码时，就会执行代码格式化了。</p><h1 id="自动引入依赖包"><a href="#自动引入依赖包" class="headerlink" title="自动引入依赖包"></a>自动引入依赖包</h1><p>参考上一节自动格式化，配置 goimports ，自动引入依赖包。</p><h1 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h1><p>如果对一个包或者函数不熟悉，可以使用go doc命令查看文档。比如：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="meta">doc</span> http.ListenAndServe</span><br></pre></td></tr></table></figure><p>如果想要看一个项目的帮助文档，可以使用godoc工具启动一个文档服务器。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -v golang.org<span class="regexp">/x/</span>tools<span class="regexp">/cmd/</span>godoc</span><br><span class="line">godoc -<span class="string">http :</span><span class="number">6060</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>Debugging Sucks! Testing Rocks!<br>Go语言支持三种测试：单元测试、性能测试和http测试，下面分别来看一下。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>Go语言单元测试函数以Test为前缀，详情参考<a href="https://books.studygolang.com/gopl-zh/ch11/ch11-02.html" target="_blank" rel="noopener">测试函数</a>。</p><p>实际开发中推荐使用表格驱动测试，就是把测试数据和测试逻辑分开。比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestShortFilename</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">        in       <span class="keyword">string</span></span><br><span class="line">        expected <span class="keyword">string</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;<span class="string">"???"</span>, <span class="string">"???"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"hello/filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"main/hello/filename.go"</span>, <span class="string">"filename.go"</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        actual := getShortFilename(tt.in)</span><br><span class="line">        <span class="keyword">if</span> strings.Compare(actual, tt.expected) != <span class="number">0</span> &#123;</span><br><span class="line">            t.Fail()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IDEA中查看代码覆盖率：<br>在单元测试函数左边，会出现一个三角箭头，点击它，选择 Run ‘Testxxx’ with Coverage，即可看到代码覆盖率。绿线代表覆盖到了，红线代表没有覆盖到。</p><p>也可以使用命令查看代码覆盖率：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go test <span class="attribute">-coverprofile</span>=c.out</span><br><span class="line">go<span class="built_in"> tool </span>cover</span><br><span class="line">go<span class="built_in"> tool </span>cover <span class="attribute">html</span>=c.out</span><br></pre></td></tr></table></figure><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>1、编写性能测试函数，以Benchmark为前缀，详情参考<a href="https://books.studygolang.com/gopl-zh/ch11/ch11-04.html" target="_blank" rel="noopener">基准测试</a>。</p><p>2、运行基准测试</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">go</span> test -<span class="keyword">bench </span>.</span><br></pre></td></tr></table></figure><p>3、详细分析（文本）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go test bench . -cpuprofile cpu.out</span><br><span class="line">go<span class="built_in"> tool </span>pprof -text <span class="attribute">-nodecount</span>=10 ./cpu.test cpu.out</span><br></pre></td></tr></table></figure><p>4、详细分析（图表）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go<span class="built_in"> tool </span>pprof cpu.out</span><br><span class="line">web</span><br></pre></td></tr></table></figure><p>PS：需要安装<a href="http://www.graphviz.org/" target="_blank" rel="noopener">graphviz</a>，以便生成图表。</p><h2 id="http测试"><a href="#http测试" class="headerlink" title="http测试"></a>http测试</h2><p>Go语言的http测试使用 net/http/httptest 包，测试方法可以分为两种：一种是使用假的Request/Response，速度快，测试粒度小，适用于测试函数和方法；另外一种是启动http服务器，速度慢，代码覆盖量更大，适用于测试和模拟后端接口。</p><p>先说第一种，使用假的Request/Response：<br>1、已知函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="constructor">HelloHandler(<span class="params">w</span> <span class="params">http</span>.ResponseWriter, <span class="params">r</span> <span class="operator">*</span><span class="params">http</span>.Request)</span> &#123;</span><br><span class="line">w.<span class="constructor">Write([]<span class="params">byte</span>(<span class="string">"hello world"</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloHandler</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">req := httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://www.voidking.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">HelloHandler(w, req)</span><br><span class="line">bytes, _ := ioutil.ReadAll(w.Result().Body)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(bytes) != <span class="string">"hello world"</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"expected hello world, but got"</span>, <span class="keyword">string</span>(bytes))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行测试<br><code>go test -v .</code></p><p>再说第二种，启动http服务器。<br>1、已知函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="constructor">HelloHandler(<span class="params">w</span> <span class="params">http</span>.ResponseWriter, <span class="params">r</span> <span class="operator">*</span><span class="params">http</span>.Request)</span> &#123;</span><br><span class="line">w.<span class="constructor">Write([]<span class="params">byte</span>(<span class="string">"hello world"</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloHandler</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ts := httptest.NewServer(http.HandlerFunc(HelloHandler))</span><br><span class="line"><span class="keyword">defer</span> ts.Close()</span><br><span class="line"> </span><br><span class="line">res, err := http.Get(ts.URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">bytes, err := ioutil.ReadAll(res.Body)</span><br><span class="line">res.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(bytes) != <span class="string">"hello world"</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"expected hello world, but got"</span>, <span class="keyword">string</span>(bytes))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行测试<br><code>go test -v .</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近学到了一些Go语言开发时的小技巧，做下记录。&lt;/p&gt;
&lt;h1 id=&quot;提高下载速度&quot;&gt;&lt;a href=&quot;#提高下载速度&quot; class=&quot;headerlink&quot; title=&quot;提高下载速度&quot;&gt;&lt;/a&gt;提高下载速度&lt;/h1&gt;&lt;p&gt;方法一：科学上网&lt;/p&gt;
&lt;p&gt;方法二：配置代理，详情参考&lt;a href=&quot;https://www.voidking.com/dev-golang-gpm/&quot;&gt;《Golang包管理工具》&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# export GOPROXY=https://goproxy.cn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;GOPROXY&lt;/span&gt;=https://goproxy.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;GO111MODULE&lt;/span&gt;=on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v golang.org/x/tools/cmd/goimports&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;方法三：使用gopm&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v github.com/gpmgo/gopm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gopm &lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; -v golang.org/x/tools/cmd/goimports&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="开发" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/"/>
    
      <category term="golang" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%BC%80%E5%8F%91/golang/"/>
    
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>使用IDEA开发Golang和Python</title>
    <link href="https://www.voidking.com/dev-idea-golang-python/"/>
    <id>https://www.voidking.com/dev-idea-golang-python/</id>
    <published>2020-09-09T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>突然发现，自己安装了三款 JetBrains 的产品：IDEA、GoLand和PyCharm。这三款软件大小差不多，长得差不多，用起来也差不多。唯一的差别，就是自己在使用不同的编程语言写代码时，需要在它们之间来回切换。<br>能不能，只保留其中一款呢？一个IDE，所有编程语言通用，或者至少能够保证Java、Golang、Python通用。<br>这个需求是合理的，而且是很简单的配置就可以实现的，本文就来总结一下IDEA配置开发Golang和Python的方法。</p><a id="more"></a><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>IDEA本身就是适用于Java开发的，具体配置方法可以参考<a href="https://www.voidking.com/dev-idea-config/">《IDEA的常用配置》</a>和<a href="https://www.voidking.com/dev-idea-maven-javaweb/">《使用IDEA新建Maven JavaWeb项目》</a>。</p><p>此外，IDEA还支持Android开发，可以参考<a href="https://www.voidking.com/dev-android-as/">《Android开发——Android Studio》</a>进行配置。</p><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><p>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索Go，找到Go插件并安装。<br>This plugin extends IntelliJ platform with Go-specific coding assistance and tool integrations, and has everything you could find in GoLand.<br>3、重启IDEA。菜单栏，IntelliJ IDEA，Preferences…。<br>4、Languages &amp; Frameworks，Go。<br>5、配置好GOROOT和GOPATH。</p><p>上面的IDEA配置，和Goland几乎相同，然后就可以像Goland一样开发Go语言程序了。</p><p>Go项目Debug的配置方法，参考<a href="https://www.voidking.com/dev-beego-start-2/">《beego入门篇——下》</a>中的调试一节。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>配置方法参考<a href="https://www.jetbrains.com/help/idea/configuring-python-sdk.html" target="_blank" rel="noopener">Configure a Python SDK</a>。</p><p>1、菜单栏，IntelliJ IDEA，Preferences…。<br>2、Plugins，搜索Python，找到Python插件并安装。<br>The Python plug-in provides smart editing for Python scripts. The feature set of the plugin corresponds to PyCharm IDE Professional Edition.<br>3、重启IDEA。菜单栏，File，Project Structure…。<br>4、Platform Settings，加号，Add Python SDK…。<br>5、Project Settings，Project SDK，选择新添加的Python SDK。</p><p>上面的IDEA配置，和PyCharm有所不同。PyCharm中的Python SDK配置，位置在Preferences，Project: project_name。</p><p>Python项目Debug的配置方法，参考<a href="https://www.voidking.com/dev-pycharm-debug/">《PyCharm调试》</a>。不同的是，如果Debug Configurations窗口点击加号，第一眼看不到Python，那么Python在Other层级下。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>以上，IDEA就成了一个全能IDE，可以开发Java、Golang和Python。如果需要支持其他语言，同样的方法，查找并安装插件即可。<br>Goland和PyCharm可以卸载了，nice。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;突然发现，自己安装了三款 JetBrains 的产品：IDEA、GoLand和PyCharm。这三款软件大小差不多，长得差不多，用起来也差不多。唯一的差别，就是自己在使用不同的编程语言写代码时，需要在它们之间来回切换。&lt;br&gt;能不能，只保留其中一款呢？一个IDE，所有编程语言通用，或者至少能够保证Java、Golang、Python通用。&lt;br&gt;这个需求是合理的，而且是很简单的配置就可以实现的，本文就来总结一下IDEA配置开发Golang和Python的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="编辑器" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="python" scheme="https://www.voidking.com/tags/python/"/>
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
      <category term="java" scheme="https://www.voidking.com/tags/java/"/>
    
      <category term="idea" scheme="https://www.voidking.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>git commit message进阶</title>
    <link href="https://www.voidking.com/dev-git-commit-message/"/>
    <id>https://www.voidking.com/dev-git-commit-message/</id>
    <published>2020-07-30T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="还可以更好"><a href="#还可以更好" class="headerlink" title="还可以更好"></a>还可以更好</h1><p>使用git很多年，也提交了很多代码，自以为使用习惯良好。因为每次提交代码，我都会在git commit message中说明清楚修改的内容。但是，偶然间读到一些关于commit message的文章，才发现还有很多进步的空间。</p><p>本文就来学习一下编写更高质量的提交信息，主要参考 <a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南</a>、<a href="https://juejin.im/post/6844903606815064077" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a> 和 <a href="https://www.conventionalcommits.org/" target="_blank" rel="noopener">Conventional Commits</a>。</p><a id="more"></a><h1 id="约定式提交"><a href="#约定式提交" class="headerlink" title="约定式提交"></a>约定式提交</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>约定式提交规范是一种基于提交消息的轻量级约定。它提供了一组用于创建清晰的提交历史的简单规则；这使得编写基于规范的自动化工具变得更容易。 这个约定与 <a href="http://semver.org/" target="_blank" rel="noopener">SemVer</a> 相吻合， 在提交信息中描述新特性、bug 修复和破坏性变更。</p><p>约定式提交优点：</p><ul><li>自动化生成 CHANGELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度。</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>提交说明的结构如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;<span class="selector-attr">[可选的作用域]</span>: &lt;描述&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[可选的正文]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[可选的脚注]</span></span><br></pre></td></tr></table></figure><p>提交方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "</span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> &lt;类型&gt;[可选的作用域]: &lt;描述&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> [可选的正文]</span></span><br><span class="line"><span class="meta">dquote&gt;</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> [可选的脚注]</span></span><br><span class="line"><span class="meta">dquote&gt;</span><span class="bash"> <span class="string">"</span></span></span><br></pre></td></tr></table></figure><p>提交说明包含了下面的结构化元素，以向类库使用者表明其意图：</p><table><thead><tr><th>类型</th><th align="left">描述</th></tr></thead><tbody><tr><td>fix</td><td align="left">在代码库中修复了一个 bug（这和语义化版本中的 PATCH 相对应）。</td></tr><tr><td>feat</td><td align="left">在代码库中新增了一个功能（这和语义化版本中的 MINOR 相对应）。</td></tr><tr><td>docs</td><td align="left">文档相关的改动。</td></tr><tr><td>refactor</td><td align="left">重构</td></tr><tr><td>improvement</td><td align="left">性能提升</td></tr><tr><td>test</td><td align="left">测试用例修改</td></tr><tr><td>style</td><td align="left">代码格式修改, 注意不是 css 修改</td></tr><tr><td>chore</td><td align="left">其他修改, 比如构建流程, 依赖管理。</td></tr><tr><td>Close</td><td align="left">在可选的正文或脚注的起始位置，关闭issue</td></tr><tr><td>BREAKING CHANGE</td><td align="left">在可选的正文或脚注的起始位置，表示引入了破坏性 API 变更（这和语义化版本中的 MAJOR 相对应）。 破坏性变更可以是任意类型提交的一部分。</td></tr></tbody></table><p>以上类型都是可选的，其他类型也被允许，根据需要定义项目的提交规范就好。并且在语义化版本中没有隐式的影响（除非他们包含 BREAKING CHANGE）。<br>可以为提交类型添加一个围在圆括号内的作用域，以为其提供额外的上下文信息。例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">feat</span><span class="params">(parser)</span></span>: adds ability to parse arrays.</span><br></pre></td></tr></table></figure><p>可以在类型/作用域前缀之后，<code>:</code> 之前，附加 <code>!</code> 字符，以进一步提醒注意破坏性变更。当有 <code>!</code> 前缀时，正文或脚注内必须包含 BREAKING CHANGE: description</p><p>约定式提交和 SemVer 的关联：fix 类型提交应当对应到 PATCH 版本。feat 类型提交应该对应到 MINOR 版本。带有 BREAKING CHANGE 的提交不管类型如何，都应该对应到 MAJOR 版本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/yargs/yargs" target="_blank" rel="noopener">yargs</a>：广受欢迎的命令行参数解析器。</li><li><a href="https://github.com/istanbuljs/istanbuljs" target="_blank" rel="noopener">istanbuljs</a>：一套为 JavaScript 测试生成测试覆盖率的开源工具和类库。</li><li><a href="https://github.com/dmfay/massive-js" target="_blank" rel="noopener">massive.js</a>：一个用于 Node 和 PostgreSQL 的数据访问类库。</li><li><a href="https://github.com/electron/electron" target="_blank" rel="noopener">electron</a>：用 JavaScript、HTML 和 CSS 构建跨平台应用。</li><li><a href="https://github.com/LeDDGroup/scroll-utility" target="_blank" rel="noopener">scroll-utility</a>：一个居中元素和平滑动画的滚屏工具包实例。</li><li><a href="https://github.com/BlazeUI/blaze" target="_blank" rel="noopener">Blaze UI</a>：无框架开源 UI 套件。</li><li><a href="https://github.com/monicahq/monica" target="_blank" rel="noopener">Monica</a>：一个开源的人际关系管理系统。</li><li><a href="https://mhy.js.org/" target="_blank" rel="noopener">mhy</a>：一个零配置、开箱即用的、多用途工具箱与开发环境。</li><li><a href="https://github.com/lamartire/sharec" target="_blank" rel="noopener">sharec</a>：一个用于模板和配置文件版本化的极简工具。</li></ul><h1 id="提交帮助工具"><a href="#提交帮助工具" class="headerlink" title="提交帮助工具"></a>提交帮助工具</h1><h2 id="git-commit提示"><a href="#git-commit提示" class="headerlink" title="git commit提示"></a>git commit提示</h2><p>1、修改 <code>~/.gitconfig</code> ，添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[commit]</span></span><br><span class="line"><span class="attr">template</span> = ~/.gitmessage</span><br></pre></td></tr></table></figure><p>2、新建 <code>~/.gitmessage</code> ，内容为</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># head: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span><br><span class="line"><span class="meta"># - type: feat, fix, docs, style, refactor, test, chore</span></span><br><span class="line"><span class="meta"># - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)</span></span><br><span class="line"><span class="meta"># - subject: start with verb (such as 'change'), 50-character line</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># body: 72-character wrapped. This should answer:</span></span><br><span class="line"><span class="meta"># * Why was this change necessary?</span></span><br><span class="line"><span class="meta"># * How does it address the problem?</span></span><br><span class="line"><span class="meta"># * Are there any side effects?</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># footer: </span></span><br><span class="line"><span class="meta"># - Include a link to the ticket, if any.</span></span><br><span class="line"><span class="meta"># - BREAKING CHANGE</span></span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure><p>3、使用提示<br><code>git commit</code></p><h2 id="commitizen"><a href="#commitizen" class="headerlink" title="commitizen"></a>commitizen</h2><p>参考 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;还可以更好&quot;&gt;&lt;a href=&quot;#还可以更好&quot; class=&quot;headerlink&quot; title=&quot;还可以更好&quot;&gt;&lt;/a&gt;还可以更好&lt;/h1&gt;&lt;p&gt;使用git很多年，也提交了很多代码，自以为使用习惯良好。因为每次提交代码，我都会在git commit message中说明清楚修改的内容。但是，偶然间读到一些关于commit message的文章，才发现还有很多进步的空间。&lt;/p&gt;
&lt;p&gt;本文就来学习一下编写更高质量的提交信息，主要参考 &lt;a href=&quot;https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Commit message 和 Change log 编写指南&lt;/a&gt;、&lt;a href=&quot;https://juejin.im/post/6844903606815064077&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;优雅的提交你的 Git Commit Message&lt;/a&gt; 和 &lt;a href=&quot;https://www.conventionalcommits.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Conventional Commits&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="工具" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E5%B7%A5%E5%85%B7/git/"/>
    
    
      <category term="git" scheme="https://www.voidking.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>K8S中的网络策略</title>
    <link href="https://www.voidking.com/dev-k8s-network-policy/"/>
    <id>https://www.voidking.com/dev-k8s-network-policy/</id>
    <published>2020-07-29T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="怎样限制Pod中的网络流量？"><a href="#怎样限制Pod中的网络流量？" class="headerlink" title="怎样限制Pod中的网络流量？"></a>怎样限制Pod中的网络流量？</h1><p>已知pod名为 webapp ，label为 <code>name=webapp</code> 。现在想要模拟无法访问数据库，限制它的流量，禁止它访问 10.0.0.0/24 网段的所有3306端口，该怎么实现？</p><p>方法一：使用NetworkPolicy限流<br>方法二：开启pod特权模式，在pod内部使用iptables限流<br>方法三：登录pod所在宿主机，在pod所在ns中使用iptables限流</p><a id="more"></a><h1 id="NetworkPolicy"><a href="#NetworkPolicy" class="headerlink" title="NetworkPolicy"></a>NetworkPolicy</h1><p>网络策略（NetworkPolicy）是一种关于 Pod 间及与其他网络端点间所允许的通信规则的规范。<br>NetworkPolicy 资源使用 标签 选择 Pod，并定义选定 Pod 所允许的通信规则。</p><p>网络策略通过网络插件来实现。要使用网络策略，用户必须使用支持 NetworkPolicy 的网络解决方案。创建一个资源对象，而没有控制器来使它生效的话，是没有任何作用的。</p><p>默认情况下，Pod 是非隔离的，它们接受任何来源的流量。<br>Pod 可以通过相关的网络策略进行隔离。一旦命名空间中有网络策略选择了特定的 Pod，该 Pod 会拒绝网络策略所不允许的连接。 (命名空间下其他未被网络策略所选择的 Pod 会继续接收所有的流量)<br>网络策略不会冲突，它们是附加的。如果任何一个或多个策略选择了一个 Pod, 则该 Pod 受限于这些策略的 ingress/egress 规则的并集。因此评估的顺序并不会影响策略的结果。</p><p>更多内容参考<a href="https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/" target="_blank" rel="noopener">网络策略</a>和<a href="https://community.qingcloud.com/assets/uploads/files/1567145042807-networkpolicy%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.pdf" target="_blank" rel="noopener">NetworkPolicy最佳实践</a>。</p><p>基础规则：</p><ul><li>如果 Pod 没有被 NetworkPolicy 匹配到，那么它的流量是被允许的 </li><li>如果 Pod 被 NetworkPolicy 匹配到，但是没有出口/入口规则被匹配到，那么它的出口/入口流量是被禁止的</li><li>只能指定规则来允许流量通行，而不能直接禁止流量通行</li><li>NetworkPolicy 中的 Rule 之间的匹配逻辑是 OR</li><li>NetworkPolicy 默认的作用域是 Pod 所在的 Namespace</li></ul><p>1、创建np.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-network-policy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">policyTypes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Egress</span></span><br><span class="line">  <span class="attr">ingress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ipBlock:</span></span><br><span class="line">        <span class="attr">cidr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">        <span class="attr">except:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure><p>这种实现方式，其实有一个问题，就是限流时不止限制了3306端口，还限制了 10.0.0.0/24 网段的所有端口。<br>能不能只限制 10.0.0.0/24 网段的 3306 端口呢？理论上可以实现，然而我不会。。。</p><p>2、执行限流</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f <span class="built_in">np</span>.yaml</span><br></pre></td></tr></table></figure><p>3、解除限流</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">delete</span> -f <span class="built_in">np</span>.yaml</span><br></pre></td></tr></table></figure><h1 id="pod特权模式限流"><a href="#pod特权模式限流" class="headerlink" title="pod特权模式限流"></a>pod特权模式限流</h1><p>1、在pod定义中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">securityContext:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#runAsUser: 0</span></span><br></pre></td></tr></table></figure><p>2、在pod内部执行限流</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A <span class="keyword">OUTPUT</span> -p tcp --dport <span class="number">3306</span> -j <span class="built_in">DROP</span></span><br></pre></td></tr></table></figure><p>3、解除限流</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t<span class="built_in"> nat </span>-nL --line-number</span><br><span class="line">iptables -D OUTPUT 1</span><br></pre></td></tr></table></figure><h1 id="宿主机限流"><a href="#宿主机限流" class="headerlink" title="宿主机限流"></a>宿主机限流</h1><p>1、登录宿主机</p><p>2、查找容器pid</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">ps</span> | <span class="keyword">grep</span> webapp</span><br><span class="line">docker inspect <span class="symbol">&lt;container_id&gt;</span> | <span class="keyword">grep</span> pid -i</span><br></pre></td></tr></table></figure><p>3、执行限流</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter -<span class="built_in">t</span> &lt;pid&gt; -<span class="built_in">n</span> iptables -A OUTPUT -p tcp --dport <span class="number">3306</span> -j DROP</span><br></pre></td></tr></table></figure><p>4、解除限流</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nsenter -t &lt;pid&gt; -n iptables -t<span class="built_in"> nat </span>-nL --line-number</span><br><span class="line">nsenter -t 8993 -n iptables -D OUTPUT 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;怎样限制Pod中的网络流量？&quot;&gt;&lt;a href=&quot;#怎样限制Pod中的网络流量？&quot; class=&quot;headerlink&quot; title=&quot;怎样限制Pod中的网络流量？&quot;&gt;&lt;/a&gt;怎样限制Pod中的网络流量？&lt;/h1&gt;&lt;p&gt;已知pod名为 webapp ，label为 &lt;code&gt;name=webapp&lt;/code&gt; 。现在想要模拟无法访问数据库，限制它的流量，禁止它访问 10.0.0.0/24 网段的所有3306端口，该怎么实现？&lt;/p&gt;
&lt;p&gt;方法一：使用NetworkPolicy限流&lt;br&gt;方法二：开启pod特权模式，在pod内部使用iptables限流&lt;br&gt;方法三：登录pod所在宿主机，在pod所在ns中使用iptables限流&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="网络" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="网络" scheme="https://www.voidking.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>jq命令的安装使用</title>
    <link href="https://www.voidking.com/dev-jq-command/"/>
    <id>https://www.voidking.com/dev-jq-command/</id>
    <published>2020-07-21T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jq命令简介"><a href="#jq命令简介" class="headerlink" title="jq命令简介"></a>jq命令简介</h1><p>jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。</p><p>更多内容，参考 <a href="https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html" target="_blank" rel="noopener">命令行 JSON 处理工具 jq 的使用介绍</a>。</p><a id="more"></a><h1 id="安装jq"><a href="#安装jq" class="headerlink" title="安装jq"></a>安装jq</h1><p>1、macos</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span><span class="keyword">jq</span></span><br></pre></td></tr></table></figure><p>2、linux</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/stedolan/</span>jq<span class="regexp">/releases/</span>download<span class="regexp">/jq-1.6/</span>jq-linux64</span><br><span class="line">chmod a+x jq-linux64 &amp;&amp; mv jq-linux64 <span class="regexp">/usr/</span>bin<span class="regexp">/jq</span></span><br></pre></td></tr></table></figure><p>3、centos</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span></span><br><span class="line">yum <span class="keyword">install</span> jq</span><br></pre></td></tr></table></figure><p>4、ubuntu</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apt</span> <span class="string">update</span></span><br><span class="line"><span class="attr">apt</span> <span class="string">install -y jq</span></span><br></pre></td></tr></table></figure><h1 id="jq表达式"><a href="#jq表达式" class="headerlink" title="jq表达式"></a>jq表达式</h1><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq .</span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq <span class="string">.name</span></span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>&#125;' | jq -r <span class="string">.name</span></span><br></pre></td></tr></table></figure><p>用户在使用jq时，需要使用jq支持的语法来构建表达式(filters)并将其传给jq。jq根据语法规则解析表达式，并应用在输入的JSON数据上从而得到需要的结果。</p><p>上面例子中的 <code>.</code> 和 <code>.name</code> 就是表达式。<br><code>.</code> 符号表示对表达式输入的整个JSON对象的引用，<code>.name</code>和<code>.name?</code>表示获取JSON对象的属性。当输入不是JSON对象或数组时，带着问号的方式不会抛出异常。</p><p>选项的含义查看jq帮助即可，比如-r表示输出raw格式内容。</p><h2 id="串行操作"><a href="#串行操作" class="headerlink" title="串行操作"></a>串行操作</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq <span class="string">.name.firstname</span></span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq '<span class="string">.name</span> | <span class="string">.firstname</span>'</span><br><span class="line"><span class="keyword">echo</span> '&#123;<span class="string">"name"</span>:&#123;<span class="string">"firstname"</span>:<span class="string">"Void"</span>,<span class="string">"lastname"</span>:<span class="string">"King"</span>&#125;&#125;' | jq '<span class="string">.name</span> | <span class="string">.firstname</span>,<span class="string">.lastname</span>'</span><br></pre></td></tr></table></figure><p>jq表达式支持串行化操作。一个复杂的表达式可以由多个简单的表达式组成，以管道符号 <code>|</code> 分割，串行化执行。管道前面表达式的输出，是管道后面表达式的输入。</p><p>逗号 <code>,</code> 表示对同一个输入应用多个表达式。</p><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq .</span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[0:2]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[0,1]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[].name'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[] | .name'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.[] | .["</span>name<span class="string">"]'</span></span><br></pre></td></tr></table></figure><p>jq 提供三种基础表达式来操作数组：<br>迭代器操作<code>.[]</code>，该表达式的输入可以是数组或者JSON对象，输出的是基于数组元素或者JSON对象属性值的迭代器（iterator）。<br>访问特定元素的操作<code>.[index]</code>或<code>.[&quot;attributename&quot;]</code>。用来访问数组元素或者JSON对象的属性值，输出是单个值。<br>数组切片操作<code>.[startindex:endindex]&#39;</code>，其行为类似于 python 语言中数组切片操作。</p><p>一个表达式产生的结果是迭代器时，迭代器的每一个值会分别作为的输入，传给后面的表达式。</p><h1 id="jq运算"><a href="#jq运算" class="headerlink" title="jq运算"></a>jq运算</h1><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.num*3'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.num/3'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str+"</span><span class="number">3</span><span class="string">"'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str*3'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>num<span class="string">":3,"</span>str<span class="string">":"</span><span class="number">343</span><span class="string">"&#125;'</span> | jq <span class="string">'.str/"</span><span class="number">4</span><span class="string">"'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.+[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;]'</span></span><br><span class="line">echo <span class="string">'[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;,&#123;"</span>name<span class="string">":"</span>haojin<span class="string">"&#125;]'</span> | jq <span class="string">'.-[&#123;"</span>name<span class="string">":"</span>voidking<span class="string">"&#125;]'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.+&#123;"</span>name<span class="string">":&#123;"</span>nickname<span class="string">":"</span>Hankin<span class="string">"&#125;&#125;'</span></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.*&#123;"</span>name<span class="string">":&#123;"</span>nickname<span class="string">":"</span>Hankin<span class="string">"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">'&#123;"</span>name<span class="string">":&#123;"</span>firstname<span class="string">":"</span>Void<span class="string">","</span>lastname<span class="string">":"</span>King<span class="string">"&#125;&#125;'</span> | jq <span class="string">'.name.nickname//"</span>Hankin<span class="string">"'</span></span><br><span class="line"></span><br><span class="line">jq -n <span class="string">'([1,2]|.[])+([4,6]|.[])'</span></span><br></pre></td></tr></table></figure><p>jq 内部支持的数据类型有：数字，字符串，数组和对象(object)。</p><p>数字运算：jq支持加减乘除(/)和求余(%)运算。<br>字符串运算：jq 提供字符串的连接、复制、分割运算。<br>数组运算：并集、差集运算。<br>对象运算：合并。<br>比较运算：jq 内部支持的比较运算，规则与js基本相同。<br>逻辑运算: and/or/not。在 jq 逻辑运算中，除了 false 和 null 外，其余的任何值都等同于 true。<br>默认值运算符：双斜杠。<br>迭代器运算：每一个元素拿出来分别运算。</p><h1 id="jq函数"><a href="#jq函数" class="headerlink" title="jq函数"></a>jq函数</h1><p>jq 支持函数。在使用 jq 函数时，我们应该注意区分两个概念：输入和参数。输入可能是整个表达式的输入数据也可能是表达式别的部分的输出。而参数和函数一起构成新的filter来处理输入。<br>和其他编程语言不同的是，在调用函数时，多个参数之间以分号分隔。jq通过内置函数提供了数据处理时常用的操作，例如：映射，过滤、路径操作等。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo '[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]'| jq -r 'map(.+<span class="number">1</span>)'</span><br></pre></td></tr></table></figure><p>在数据处理过程中，我们经常需要将数据从一种形式转换成另外一种形式，或者改变数据的值。<br>jq提供了两个内置映射函数来实现这种转换：map 和 map_values。其中，map处理的对象是数组，而map_values则处理对象属性的值。map 函数的参数为 filter 表达式。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo '[1,2,3,4]'| jq -r 'map(<span class="keyword">select</span>(.&gt;<span class="number">2</span>))<span class="string">'</span></span><br><span class="line"><span class="string">echo '</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="string">'| jq -r '</span>.[]|<span class="keyword">select</span>(.&gt;<span class="number">2</span>)<span class="string">'</span></span><br><span class="line"><span class="string">echo '</span>[&#123;<span class="string">"name"</span>:<span class="string">"voidking"</span>,<span class="string">"age"</span>: <span class="number">18</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"haojin"</span>,<span class="string">"age"</span>: <span class="number">28</span>&#125;]<span class="string">' | jq '</span>.[]|<span class="keyword">select</span>(.name==<span class="string">"haojin"</span>)<span class="string">'</span></span><br></pre></td></tr></table></figure><p>jq中有两种类型的选择过滤操作。<br>第一种是基于数据类型的过滤，如表达式<code>.[]|arrays</code>的结果只包含数组。可以用来过滤的类型过滤器有：arrays, objects, iterables, booleans, numbers, normals, finites, strings, nulls, values, scalars。<br>第二种是select函数。select接受一个条件表达式作为参数。其输入可以是迭代器，或者和map函数配合使用来处理数组。当输入中的某个元素使select参数中的条件表达式结果为真时，则在结果中保留该元素，否则不保留该元素。</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>jq中的path是指从根到某个叶子属性的访问路径。<br>在jq中有两种表示路径的方式：数组表示法和属性表示法。<br>属性表示法类似于我们在filter中访问某个属性值的方式，如<code>.a.b</code>。<br>数组表示法是将路径中的每一部分表示为数组的一个元素。<br>jq提供了一个内置函数path用来实现路径从属性表示法到数组表示法的转换。</p><p>jq还提供了函数用来读取路径的值（getpath）, 设置路径的值（setpath）和删除路径（del）。<br>不过这三个函数对路径的处理并不一致。其中getpath和setpath只接受数组表示法的路径，而del函数只能正确处理属性表示法的路径。</p><p>jq还提供了一个函数paths用来枚举可能存在的路径。在没有参数的情况下，paths函数将输出JSON数据中所有可能的路径。paths函数可以接受一个过滤器，来只输出满足条件的路径。</p><p>jq中提供了一系列的函数用来判断某个元素或者属性是否存在于输入数据中。其中函数has和in用来判断JSON对象或数组是否包含特定的属性或索引。函数contains和inside用来判断参数是否完全包含在输入数据中。对于不同的数据类型，判断是否完全包含的规则不同。对于字符串，如果A是B的子字符串，则认为A完全包含于B。对于对象类型，如果对象A的所有属性在对象B中都能找到且值相同，则认为A完全包含于B。</p><h2 id="数组函数"><a href="#数组函数" class="headerlink" title="数组函数"></a>数组函数</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jq -nr '[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>]|<span class="type">flatten</span>'</span><br><span class="line">jq -nr '[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]|<span class="type">reverse</span>'</span><br><span class="line">jq -nr '[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]|<span class="type">sort</span>'</span><br><span class="line">jq -nr '[&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"a"</span>:<span class="number">2</span>&#125;]|<span class="type">sort_by</span>(.a)'</span><br><span class="line">jq -nr '<span class="string">"abcb"</span>|<span class="type">indices</span>(<span class="string">"b"</span>)'</span><br><span class="line">jq -nr '[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]|<span class="type">indices</span>(<span class="number">3</span>)'</span><br></pre></td></tr></table></figure><p>jq 提供内置函数用于完成数组的扁平化（flatten），反序（reverse），排序（sort、sort_by），比较（min、min_by、max、max_by）和查找（indices、index、rindex）。其中indices函数的输入数据可以是数组，也可以是字符串。和 index函数不同的是，其结果是一个包含所有参数在输入数据中位置的数组。</p><h1 id="jq高级特性"><a href="#jq高级特性" class="headerlink" title="jq高级特性"></a>jq高级特性</h1><p>变量、Reduce、自定义函数和模块等。未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jq命令简介&quot;&gt;&lt;a href=&quot;#jq命令简介&quot; class=&quot;headerlink&quot; title=&quot;jq命令简介&quot;&gt;&lt;/a&gt;jq命令简介&lt;/h1&gt;&lt;p&gt;jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。&lt;/p&gt;
&lt;p&gt;更多内容，参考 &lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;命令行 JSON 处理工具 jq 的使用介绍&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="linux" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/linux/"/>
    
    
      <category term="linux" scheme="https://www.voidking.com/tags/linux/"/>
    
      <category term="shell" scheme="https://www.voidking.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Docker Swarm</title>
    <link href="https://www.voidking.com/dev-docker-swarm/"/>
    <id>https://www.voidking.com/dev-docker-swarm/</id>
    <published>2020-07-10T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Swarm简介"><a href="#Docker-Swarm简介" class="headerlink" title="Docker Swarm简介"></a>Docker Swarm简介</h1><p>Docker Swarm是一个Docker集群调度管理工具。相比于Kubernetes，Swarm内置于Docker，更加轻量，更加简单方便；相应的，就没有Kubernetes那么多强大的特性。</p><p>本文搭建使用Swarm，主要参考<a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener">Swarm mode overview</a> 和 <a href="https://zhuanlan.zhihu.com/p/105420094" target="_blank" rel="noopener">docker swarm（一） 入门 – 搭建一个简单的swarm集群</a>。</p><p>已有两个安装好Docker的机器（swarm-manager和swarm-worker），IP分别为 192.168.56.104 和 192.168.56.105 ，两台主机的hosts都添加：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168.56.104</span> swarm-manager</span><br><span class="line"><span class="number">192.168.56.105</span> swarm-worker</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Swarm集群搭建"><a href="#Swarm集群搭建" class="headerlink" title="Swarm集群搭建"></a>Swarm集群搭建</h1><h2 id="manager-node"><a href="#manager-node" class="headerlink" title="manager node"></a>manager node</h2><p><strong>在swarm-manager节点：</strong></p><p>1、创建swarm manager</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span></span><br></pre></td></tr></table></figure><p>这一步会生成join命令，复制记录一下。</p><p>2、验证安装</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">inf</span>o</span><br><span class="line">docker <span class="keyword">node</span> <span class="title">ls</span></span><br></pre></td></tr></table></figure><p>3、关闭防火墙，方便其他主机加入成为worker</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld</span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></table></figure><h2 id="worker-node"><a href="#worker-node" class="headerlink" title="worker node"></a>worker node</h2><p><strong>在swarm-worker节点：</strong><br>1、关闭防火墙，方便manager调用</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld</span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>2、加入swarm成为worker</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN<span class="number">-1</span><span class="number">-21</span>v9lvwrzapfzdzhq4js6xbtyasak4hdcdhz9p13fch23zdbn9-bneduvi9fi4ba05eywhqbe94z <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span>:<span class="number">2377</span></span><br></pre></td></tr></table></figure><p>PS：脱离swarm<br><code>docker swarm leave</code></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><code>docker node ls</code>，查看节点状态。<br><img src="http://cdn.voidking.com/@/imgs/docker-swarm/nodels.jpg?imageView2/0/w/800" alt=""></p><h1 id="使用Swarm"><a href="#使用Swarm" class="headerlink" title="使用Swarm"></a>使用Swarm</h1><p>1、部署一个服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>create \</span><br><span class="line"><span class="attribute">--name</span>=vk-nginx \</span><br><span class="line">--publish <span class="attribute">published</span>=80,target=80 \</span><br><span class="line">--replicas 1  \</span><br><span class="line">voidking/nginx:v1.0</span><br></pre></td></tr></table></figure><p>2、查看服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>ls</span><br><span class="line">docker inspect vk-nginx</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/servicels.jpg?imageView2/0/w/800" alt=""></p><p>3、访问服务</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="number">192.168</span><span class="number">.56</span><span class="number">.104</span></span><br><span class="line">curl <span class="number">192.168</span><span class="number">.56</span><span class="number">.105</span></span><br></pre></td></tr></table></figure><p>如果此时有一个ip是curl不通的，那么说明有问题，因为所有节点都应该添加端口映射关系。</p><p>4、服务扩容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>scale <span class="attribute">vk-nginx</span>=4</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/scale.jpg?imageView2/0/w/600" alt=""></p><p>5、查看服务在节点的分布</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> service </span>ps vk-nginx</span><br></pre></td></tr></table></figure><p><img src="http://cdn.voidking.com/@/imgs/docker-swarm/serviceps.jpg?imageView2/0/w/800" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-Swarm简介&quot;&gt;&lt;a href=&quot;#Docker-Swarm简介&quot; class=&quot;headerlink&quot; title=&quot;Docker Swarm简介&quot;&gt;&lt;/a&gt;Docker Swarm简介&lt;/h1&gt;&lt;p&gt;Docker Swarm是一个Docker集群调度管理工具。相比于Kubernetes，Swarm内置于Docker，更加轻量，更加简单方便；相应的，就没有Kubernetes那么多强大的特性。&lt;/p&gt;
&lt;p&gt;本文搭建使用Swarm，主要参考&lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Swarm mode overview&lt;/a&gt; 和 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/105420094&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker swarm（一） 入门 – 搭建一个简单的swarm集群&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;已有两个安装好Docker的机器（swarm-manager和swarm-worker），IP分别为 192.168.56.104 和 192.168.56.105 ，两台主机的hosts都添加：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;192.168.56.104&lt;/span&gt; swarm-manager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;192.168.56.105&lt;/span&gt; swarm-worker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/docker/"/>
    
    
      <category term="docker" scheme="https://www.voidking.com/tags/docker/"/>
    
      <category term="swarm" scheme="https://www.voidking.com/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>youtube、youku、爱奇艺等视频平台下载方法</title>
    <link href="https://www.voidking.com/hobby-video-download/"/>
    <id>https://www.voidking.com/hobby-video-download/</id>
    <published>2020-07-04T03:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频下载的痛点"><a href="#视频下载的痛点" class="headerlink" title="视频下载的痛点"></a>视频下载的痛点</h1><p>很多时候，我们在youtube、youku、爱奇艺、腾讯视频、bilibili等视频平台看到了喜欢的视频，想要下载到本地，但是无法下载，要么必须要客户端才能下载。<br>好不容易下载到本地，对于不同平台下载的视频，还必须使用不同的客户端进行播放。<br>如果想要作为教学视频放到PPT中，还必须进行转码，不同平台还得寻找不同的转码方法。</p><p>太难了，好在一些前辈帮我们解决了这些问题，并且开发出了很多好用的工具。本文中，重点推荐两款个人在用的视频下载工具：<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a>和<a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a>。</p><a id="more"></a><h1 id="youtube-dl"><a href="#youtube-dl" class="headerlink" title="youtube-dl"></a>youtube-dl</h1><p>1、访问<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a>，下载需要的版本，这里以macos版本为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl</span><br><span class="line">sudo chmod a+rx /usr/local/bin/youtube-dl</span><br><span class="line"><span class="meta">#</span><span class="bash"> or </span></span><br><span class="line">brew install youtube-dl</span><br></pre></td></tr></table></figure><p>2、查看视频支持的下载格式，下载视频</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -F http://v.youku.com/v_show/id_XODQzMTQ4NDQ=.html</span><br><span class="line">youtube-dl -f mp4 http://v.youku.com/v_show/id_XODQzMTQ4NDQ=.html</span><br></pre></td></tr></table></figure><h1 id="you-get"><a href="#you-get" class="headerlink" title="you-get"></a>you-get</h1><p>1、访问<a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a>，下载需要的版本，这里以macos版本为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install you-get</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">brew install you-get</span><br></pre></td></tr></table></figure><p>2、查看视频支持的下载格式，下载视频</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">you-get -i http:<span class="regexp">//</span>v.youku.com<span class="regexp">/v_show/i</span>d_XODQzMTQ4NDQ=.html</span><br><span class="line">you-get http:<span class="regexp">//</span>v.youku.com<span class="regexp">/v_show/i</span>d_XODQzMTQ4NDQ=.html</span><br><span class="line"><span class="comment">#you-get --itag=18 'https://www.youtube.com/watch?v=jNQXAC9IVRw'</span></span><br></pre></td></tr></table></figure><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>这两个软件功能上没有太大差别，下载速度也没有太大差别。<br>youtube-dl更加轻量，安装也要比you-get快的多（you-get依赖一堆软件）。<br>对于同一个视频，这两个软件支持的下载格式有所不同，比如上面的例子中，youtube-dl支持mp4格式，you-get支持flv格式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视频下载的痛点&quot;&gt;&lt;a href=&quot;#视频下载的痛点&quot; class=&quot;headerlink&quot; title=&quot;视频下载的痛点&quot;&gt;&lt;/a&gt;视频下载的痛点&lt;/h1&gt;&lt;p&gt;很多时候，我们在youtube、youku、爱奇艺、腾讯视频、bilibili等视频平台看到了喜欢的视频，想要下载到本地，但是无法下载，要么必须要客户端才能下载。&lt;br&gt;好不容易下载到本地，对于不同平台下载的视频，还必须使用不同的客户端进行播放。&lt;br&gt;如果想要作为教学视频放到PPT中，还必须进行转码，不同平台还得寻找不同的转码方法。&lt;/p&gt;
&lt;p&gt;太难了，好在一些前辈帮我们解决了这些问题，并且开发出了很多好用的工具。本文中，重点推荐两款个人在用的视频下载工具：&lt;a href=&quot;https://github.com/ytdl-org/youtube-dl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;youtube-dl&lt;/a&gt;和&lt;a href=&quot;https://github.com/soimort/you-get&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;you-get&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱好" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/"/>
    
      <category term="电脑" scheme="https://www.voidking.com/categories/%E7%88%B1%E5%A5%BD/%E7%94%B5%E8%84%91/"/>
    
    
      <category term="下载" scheme="https://www.voidking.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Helm入门篇</title>
    <link href="https://www.voidking.com/dev-helm-start/"/>
    <id>https://www.voidking.com/dev-helm-start/</id>
    <published>2020-06-30T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Helm简介"><a href="#Helm简介" class="headerlink" title="Helm简介"></a>Helm简介</h1><blockquote><p><a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a> is the best way to find, share, and use software built for Kubernetes.</p></blockquote><p>helm是k8s的包管理工具，就像yum之于centos，apt之于ubuntu。不同的是，yum管理的是软件包，helm管理的是配置好的k8s资源包。这种配置好的k8s资源包，按照chart的包格式进行包装。以下是wordpress的chart包结构：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wordpress/</span><br><span class="line">  Chart.yaml          <span class="comment"># A YAML file containing information about the chart</span></span><br><span class="line">  LICENSE             <span class="comment"># OPTIONAL: A plain text file containing the license for the chart</span></span><br><span class="line">  README.md           <span class="comment"># OPTIONAL: A human-readable README file</span></span><br><span class="line">  requirements.yaml   <span class="comment"># OPTIONAL: A YAML file listing dependencies for the chart</span></span><br><span class="line">  values.yaml         <span class="comment"># The default configuration values for this chart</span></span><br><span class="line">  charts/             <span class="comment"># A directory containing any charts upon which this chart depends.</span></span><br><span class="line">  templates/          <span class="comment"># A directory of templates that, when combined with values,</span></span><br><span class="line">                      <span class="comment"># will generate valid Kubernetes manifest files.</span></span><br><span class="line">  templates/NOTES.txt <span class="comment"># OPTIONAL: A plain text file containing short usage notes</span></span><br></pre></td></tr></table></figure><p>Helm2包括两个组件：客户端（Helm Client）和服务端（Tiller）。Helm发送指令给Tiller(gRPC协议)，Tiller主要用于管理各种应用发布的版本，并且与k8s进行交互。<br>不过，在 Helm3 中 Tiller 被移除掉了，Helm直接与k8s进行交互，版本相关的数据存储在k8s中。</p><p>更多内容，参考<a href="https://github.com/helm/helm" target="_blank" rel="noopener">helm/helm</a>、<a href="https://mp.weixin.qq.com/s/uWdPB4LvmMmvUX2ioKwbww?spm=a2c6h.12873639.0.0.67905225zuo8Vs" target="_blank" rel="noopener">Helm 从入门到实践 | 从 0 开始制作一个 Helm Charts</a>、<a href="https://whmzsu.github.io/helm-doc-zh-cn/chart/charts-zh_cn.html" target="_blank" rel="noopener">Helm用户与开发者指南</a>。</p><a id="more"></a><h1 id="体验Helm"><a href="#体验Helm" class="headerlink" title="体验Helm"></a>体验Helm</h1><p>越来越喜欢用<a href="https://www.katacoda.com/" target="_blank" rel="noopener">katacoda</a>来学习新技能，Helm也可以在上面通过实践学习。</p><ul><li><a href="https://www.katacoda.com/javajon/courses/kubernetes-pipelines/helm" target="_blank" rel="noopener">Helm Package Manager - BY JAVAJON</a></li><li><a href="https://www.katacoda.com/courses/kubernetes/helm-package-manager" target="_blank" rel="noopener">Helm Package Manager - BY KATACODA</a></li></ul><h1 id="安装Helm"><a href="#安装Helm" class="headerlink" title="安装Helm"></a>安装Helm</h1><p>参考 <a href="https://helm.sh/docs/intro/install/" target="_blank" rel="noopener">Installing Helm</a>，安装helm。</p><h2 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>helm</span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>1、查找需要的<a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener">release版本</a></p><p>2、下载并安装</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">wget</span> https://<span class="meta">get</span>.helm.sh/helm-<span class="built_in">v3</span>.<span class="number">2</span>.<span class="number">4</span>-linux-amd64.tar.gz</span><br><span class="line"><span class="symbol">tar</span> -xzvf helm-<span class="built_in">v2</span>.<span class="number">16</span>.<span class="number">9</span>-linux-amd64.tar.gz</span><br><span class="line"><span class="symbol">mv</span> linux-amd64/helm /usr/local/<span class="keyword">bin/helm</span></span><br><span class="line"><span class="keyword">helm </span>version</span><br></pre></td></tr></table></figure><h1 id="使用Helm"><a href="#使用Helm" class="headerlink" title="使用Helm"></a>使用Helm</h1><p>使用条件：安装配置k8s集群；配置kubectl，可以访问k8s；安装helm。</p><p>查看帮助：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">helm</span> <span class="string">-h</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">get -h</span></span><br></pre></td></tr></table></figure><p>1、初始化Chart仓库</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># helm repo <span class="built_in">add</span> stable http<span class="variable">s:</span>//kubernetes-charts.storage.googleapis.<span class="keyword">com</span>/</span><br><span class="line"># helm repo <span class="built_in">remove</span> stable</span><br><span class="line">helm repo <span class="built_in">add</span> stable http<span class="variable">s:</span>//kubernetes.oss-<span class="keyword">cn</span>-hangzhou.aliyuncs.<span class="keyword">com</span>/charts</span><br><span class="line">helm repo <span class="keyword">list</span></span><br></pre></td></tr></table></figure><p>2、查看可以安装的charts<br><code>helm search repo stable</code></p><p>3、在k8s集群安装mysql</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm repo <span class="keyword">update</span></span><br><span class="line">helm <span class="keyword">show</span> chart <span class="keyword">stable</span>/mysql</span><br><span class="line">helm <span class="keyword">show</span> <span class="keyword">all</span> <span class="keyword">stable</span>/mysql</span><br><span class="line">helm install <span class="keyword">stable</span>/mysql <span class="comment">--generate-name</span></span><br></pre></td></tr></table></figure><p>4、卸载mysql</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">helm</span> <span class="string">ls</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">uninstall smiling-penguin</span></span><br><span class="line"><span class="attr">helm</span> <span class="string">status smiling-penguin</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Helm简介&quot;&gt;&lt;a href=&quot;#Helm简介&quot; class=&quot;headerlink&quot; title=&quot;Helm简介&quot;&gt;&lt;/a&gt;Helm简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://helm.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm&lt;/a&gt; is the best way to find, share, and use software built for Kubernetes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;helm是k8s的包管理工具，就像yum之于centos，apt之于ubuntu。不同的是，yum管理的是软件包，helm管理的是配置好的k8s资源包。这种配置好的k8s资源包，按照chart的包格式进行包装。以下是wordpress的chart包结构：&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wordpress/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Chart.yaml          &lt;span class=&quot;comment&quot;&gt;# A YAML file containing information about the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LICENSE             &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A plain text file containing the license for the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  README.md           &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A human-readable README file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  requirements.yaml   &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A YAML file listing dependencies for the chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  values.yaml         &lt;span class=&quot;comment&quot;&gt;# The default configuration values for this chart&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  charts/             &lt;span class=&quot;comment&quot;&gt;# A directory containing any charts upon which this chart depends.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  templates/          &lt;span class=&quot;comment&quot;&gt;# A directory of templates that, when combined with values,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;comment&quot;&gt;# will generate valid Kubernetes manifest files.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  templates/NOTES.txt &lt;span class=&quot;comment&quot;&gt;# OPTIONAL: A plain text file containing short usage notes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Helm2包括两个组件：客户端（Helm Client）和服务端（Tiller）。Helm发送指令给Tiller(gRPC协议)，Tiller主要用于管理各种应用发布的版本，并且与k8s进行交互。&lt;br&gt;不过，在 Helm3 中 Tiller 被移除掉了，Helm直接与k8s进行交互，版本相关的数据存储在k8s中。&lt;/p&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://github.com/helm/helm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;helm/helm&lt;/a&gt;、&lt;a href=&quot;https://mp.weixin.qq.com/s/uWdPB4LvmMmvUX2ioKwbww?spm=a2c6h.12873639.0.0.67905225zuo8Vs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm 从入门到实践 | 从 0 开始制作一个 Helm Charts&lt;/a&gt;、&lt;a href=&quot;https://whmzsu.github.io/helm-doc-zh-cn/chart/charts-zh_cn.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Helm用户与开发者指南&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="helm" scheme="https://www.voidking.com/tags/helm/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus Operator + Blackbox exporter</title>
    <link href="https://www.voidking.com/dev-prometheus-operator-blackbox-exporter/"/>
    <id>https://www.voidking.com/dev-prometheus-operator-blackbox-exporter/</id>
    <published>2020-06-29T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.voidking.com/dev-k8s-operator/">《Kubernetes Operator》</a>一文中学习了Operator的基础，<a href="https://www.voidking.com/dev-prometheus-blackbox-exporter">《Prometheus Blackbox exporter》</a>一文中学习了blackbox exporter的安装配置。</p><p>而Prometheus Operator，顾名思义，是负责K8S中自动化管理Prometheus的Custom Controller。更多内容，参考<a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="noopener">coreos/prometheus-operator</a></p><p>本文中，我们研究的问题是：怎样利用Prometheus Operator，在Kubernetes集群中安装部署Prometheus，并且添加Blackbox exporter组件？</p><a id="more"></a><h1 id="安装Prom-Operator"><a href="#安装Prom-Operator" class="headerlink" title="安装Prom Operator"></a>安装Prom Operator</h1><p>参考<a href="https://www.qikqiak.com/post/first-use-prometheus-operator/" target="_blank" rel="noopener">Prometheus Operator 初体验</a>和<a href="https://github.com/coreos/kube-prometheus" target="_blank" rel="noopener">coreos/kube-prometheus</a>，安装Prometheus Operator。</p><p>1、kubelet配置添加参数<br><code>vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code><br>添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--authentication-token-webhook</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">--authorization-mode</span>=Webhook</span><br></pre></td></tr></table></figure><p>2、获取源码，并切换版本（与k8s版本的对应关系可以在github仓库找到）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coreos/kube-prometheus.git</span><br><span class="line">cd kube-prometheus</span><br><span class="line">kubectl version</span><br><span class="line">git branch -a</span><br><span class="line">git checkout origin/release-0.4</span><br></pre></td></tr></table></figure><p>3、安装Prom Operator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Create the namespace and CRDs, and <span class="keyword">then</span> <span class="built_in">wait</span> <span class="keyword">for</span> them to be availble before creating the remaining resources</span></span><br><span class="line">kubectl create -f manifests/setup</span><br><span class="line">until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo ""; done</span><br><span class="line">kubectl create -f manifests/</span><br></pre></td></tr></table></figure><p>4、查看安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get crd | grep coreos</span><br><span class="line">kubectl get pod -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br></pre></td></tr></table></figure><p>以上，Prometheus Operator安装完成，Prometheus也安装完成。</p><p>PS：卸载Prom Operator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete --ignore-not-found=true -f manifests/ -f manifests/setup</span><br></pre></td></tr></table></figure><h1 id="安装Blackbox-exporter"><a href="#安装Blackbox-exporter" class="headerlink" title="安装Blackbox exporter"></a>安装Blackbox exporter</h1><p>1、创建yaml文件 blackbox-exporter.yaml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">data:</span></span><br><span class="line">  config.yml: |</span><br><span class="line"><span class="symbol">    modules:</span></span><br><span class="line"><span class="symbol">      http_2xx:</span></span><br><span class="line"><span class="symbol">        prober:</span> http</span><br><span class="line"><span class="symbol">        http:</span></span><br><span class="line"><span class="symbol">          method:</span> GET</span><br><span class="line"><span class="symbol">          preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">      http_post_2xx:</span></span><br><span class="line"><span class="symbol">        prober:</span> http</span><br><span class="line"><span class="symbol">        http:</span></span><br><span class="line"><span class="symbol">          method:</span> POST</span><br><span class="line"><span class="symbol">          preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">      tcp:</span></span><br><span class="line"><span class="symbol">        prober:</span> tcp</span><br><span class="line"><span class="symbol">      ping:</span></span><br><span class="line"><span class="symbol">        prober:</span> icmp</span><br><span class="line"><span class="symbol">        timeout:</span> <span class="number">3</span>s</span><br><span class="line"><span class="symbol">        icmp:</span></span><br><span class="line"><span class="symbol">          preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">      dns_k8s:</span></span><br><span class="line"><span class="symbol">        prober:</span> dns</span><br><span class="line"><span class="symbol">        timeout:</span> <span class="number">5</span>s</span><br><span class="line"><span class="symbol">        dns:</span></span><br><span class="line"><span class="symbol">          transport_protocol:</span> <span class="string">"tcp"</span></span><br><span class="line"><span class="symbol">          preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">          query_name:</span> <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line"><span class="symbol">          query_type:</span> <span class="string">"A"</span></span><br><span class="line"><span class="symbol">kind:</span> ConfigMap</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  namespace:</span> monitoring</span><br><span class="line">---</span><br><span class="line"><span class="symbol">apiVersion:</span> apps/v1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  creationTimestamp:</span> null</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">    cluster:</span> ali-huabei2-dev</span><br><span class="line"><span class="symbol">  name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  namespace:</span> monitoring</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    matchLabels:</span></span><br><span class="line"><span class="symbol">      name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  strategy:</span> &#123;&#125;</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line"><span class="symbol">      creationTimestamp:</span> null</span><br><span class="line"><span class="symbol">      labels:</span></span><br><span class="line"><span class="symbol">        name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">        cluster:</span> ali-huabei2-dev</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">      - image: prom/blackbox-exporter:v0<span class="number">.16</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">        name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">        ports:</span></span><br><span class="line">        - containerPort: <span class="number">9115</span></span><br><span class="line"><span class="symbol">        volumeMounts:</span></span><br><span class="line">        - name: config</span><br><span class="line"><span class="symbol">          mountPath:</span> <span class="meta-keyword">/etc/</span>blackbox_exporter</span><br><span class="line"><span class="symbol">        args:</span></span><br><span class="line">        - --config.file=<span class="meta-keyword">/etc/</span>blackbox_exporter/config.yml</span><br><span class="line">        - --log.level=info</span><br><span class="line"><span class="symbol">      volumes:</span></span><br><span class="line">      - name: config</span><br><span class="line"><span class="symbol">        configMap:</span></span><br><span class="line"><span class="symbol">          name:</span> blackbox-exporter</span><br><span class="line">---</span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Service</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line">  <span class="meta">#annotations:</span></span><br><span class="line">  <span class="meta">#  service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet</span></span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">    cluster:</span> ali-huabei2-dev</span><br><span class="line"><span class="symbol">  name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  namespace:</span> monitoring</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line">  <span class="meta">#externalTrafficPolicy: Local</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    name:</span> blackbox-exporter</span><br><span class="line"><span class="symbol">  ports:</span></span><br><span class="line">  - name: http-metrics</span><br><span class="line"><span class="symbol">    port:</span> <span class="number">9115</span></span><br><span class="line"><span class="symbol">    targetPort:</span> <span class="number">9115</span></span><br><span class="line"><span class="symbol">  type:</span> LoadBalancer</span><br></pre></td></tr></table></figure><p>2、应用yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f blackbox-exporter.yaml</span><br><span class="line">kubectl get svc -n monitoring</span><br><span class="line">kubectl get deploy -n monitoring</span><br></pre></td></tr></table></figure><h1 id="配置使用Blackbox-exporter（错误方法）"><a href="#配置使用Blackbox-exporter（错误方法）" class="headerlink" title="配置使用Blackbox exporter（错误方法）"></a>配置使用Blackbox exporter（错误方法）</h1><p>在Prometheus中配置使用Blackbox exporter是很简单的，scrape_configs里配置相应字段即可。但是，k8s中的Prometheus配置，会有一些不同。</p><p>1、获取prometheus.yml配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secrets -n monitoring prometheus-k8s -oyaml | grep prometheus.yaml.gz | awk '&#123;print $2&#125;' | base64 --decode | gzip -d &gt; prometheus.yml</span><br></pre></td></tr></table></figure><p>2、查看prometheus.yml配置，下面截取一段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">prometheus:</span> <span class="string">monitoring/k8s</span></span><br><span class="line">    <span class="attr">prometheus_replica:</span> <span class="string">$(POD_NAME)</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/etc/prometheus/rules/prometheus-k8s-rulefiles-0/*.yaml</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">monitoring/node-exporter/0</span></span><br><span class="line">  <span class="attr">honor_labels:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">namespaces:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">tls_config:</span></span><br><span class="line">    <span class="attr">insecure_skip_verify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_k8s_app</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">node-exporter</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_port_name</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">https</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_address_target_kind</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_address_target_name</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">Node;(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">node</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_address_target_kind</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_endpoint_address_target_name</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">;</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">Pod;(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">pod</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_namespace</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">namespace</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">service</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_pod_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">pod</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">job</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_k8s_app</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">job</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">endpoint</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">https</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_pod_node_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_cluster</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">cluster</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br></pre></td></tr></table></figure><p>其中，job_name配置target名称，kubernetes_sd_configs配置k8s的服务发现，relabel_configs配置标签最终的显示。source_labels是样本的原标签，target_label是显示的标签；regex使用正则匹配value，replacement代表最终显示的value。<code>$1</code>代表regex正则匹配到的第一个字符串。</p><p>3、添加blackbox exporter的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">monitoring/blackbox-exporter/0</span></span><br><span class="line">  <span class="attr">honor_labels:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">namespaces:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">tls_config:</span></span><br><span class="line">    <span class="attr">insecure_skip_verify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">    <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_name</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_name</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">job</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_labels:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_cluster</span></span><br><span class="line">    <span class="attr">target_label:</span> <span class="string">cluster</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">    <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">replace</span></span><br></pre></td></tr></table></figure><p>4、应用新的配置</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 1. compress prometheus.yaml</span></span><br><span class="line">cat prometheus.yaml | gzip -f | base64 | tr -d <span class="string">"\n"</span></span><br><span class="line"><span class="meta"># 2. copy string</span></span><br><span class="line"><span class="meta"># 3. edit secret</span></span><br><span class="line">kubectl edit secrets -n monitoring prometheus-k8s</span><br><span class="line"><span class="meta"># 4. replace prometheus.yaml.gz</span></span><br><span class="line"><span class="meta"># 5. get the latest config</span></span><br><span class="line">kubectl <span class="keyword">get</span> secrets -n monitoring prometheus-k8s -oyaml | grep prometheus.yaml.gz | awk <span class="string">'&#123;print $2&#125;'</span> | base64 --decode | gzip -d | grep blackbox</span><br></pre></td></tr></table></figure><p>然而，配置中并没有blackbox，配置没有发生改变！证明了prometheus的配置是自动生成的，手动修改无效。</p><h1 id="配置使用Blackbox-exporter（正确方法）"><a href="#配置使用Blackbox-exporter（正确方法）" class="headerlink" title="配置使用Blackbox exporter（正确方法）"></a>配置使用Blackbox exporter（正确方法）</h1><p>Prometheus Operator中配置Target，是利用ServiceMonitor进行动态发现的方式。</p><p>1、创建servicemonitor的yaml文件，blackbox-exporter-sm.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">p</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">namespaceSelector:</span></span><br><span class="line">    <span class="attr">matchNames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">interval:</span> <span class="string">15s</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">http-metrics</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/probe</span></span><br><span class="line">    <span class="attr">relabelings:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_cluster</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">cluster</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__param_module</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">module</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">target</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">module:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http_2xx</span></span><br><span class="line">      <span class="attr">target:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://prometheus.io</span>    <span class="comment"># Target to probe with http.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https://prometheus.io</span>   <span class="comment"># Target to probe with https.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://example.com:8080</span> <span class="comment"># Target to probe with http on port 8080.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">interval:</span> <span class="string">15s</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">http-metrics</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/probe</span></span><br><span class="line">    <span class="attr">relabelings:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__meta_kubernetes_service_label_cluster</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">cluster</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__param_module</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">module</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">sourceLabels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="attr">targetLabel:</span> <span class="string">target</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">module:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dns_k8s</span></span><br><span class="line">      <span class="attr">target:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">172.31</span><span class="number">.16</span><span class="number">.10</span> <span class="comment"># dns ip address</span></span><br></pre></td></tr></table></figure><p>2、应用到k8s集群<br><code>kubectl apply -f blackbox-exporter-sm.yaml</code></p><p>3、等待一分钟后，进行验证<br>访问prometheus的graph页面，可以查看blackbox-exporter指标。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;job=~<span class="string">"blackbox-exporter"</span>,__name__!~<span class="string">"^go.*"</span>&#125;</span><br></pre></td></tr></table></figure><p>查看结果表明，params的配置中，http_2xx 探测只有第一个target生效了，另外两个target根本没有探测记录。本实验证明了，target里只能填写一个域名，多了无效。<br>要想配置多个站点的探测，最简单的办法就是配置多个endpoint。至于N个站点配置M种探测方式，如果你知道怎么配置，欢迎留言告知，感谢~</p><h1 id="配置告警"><a href="#配置告警" class="headerlink" title="配置告警"></a>配置告警</h1><p><a href="https://www.voidking.com/dev-docker-prometheus/">《使用Docker安装配置Prometheus》</a>一文中，我们知道配置告警需要在prometheus配置文件中指定alertmanager实例和报警的rules文件。<br>而通过operator部署的prometheus，怎样配置告警呢？这里需要定义PrometheusRule资源，并且具备标签 prometheus=k8s 和 role=alert-rules。<br>这里以配置dns服务告警为例，dns服务出问题，不能正常解析 kubernetes.default.svc.cluster.local 。</p><p>1、查看alertmanager配置</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secrets -n monitoring alertmanager-main -oyaml | <span class="type">grep</span> <span class="string">"alertmanager.yaml"</span> | <span class="type">awk</span> '&#123;print $<span class="number">2</span>&#125;' | <span class="type">base64</span> -d</span><br></pre></td></tr></table></figure><p>2、创建prometheus-rule-dns.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PrometheusRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">prometheus:</span> <span class="string">k8s</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">alert-rules</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dns-alert-rules</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DNS</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">DNSServerError</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">summary:</span> <span class="literal">No</span> <span class="string">summary</span></span><br><span class="line">        <span class="attr">description:</span> <span class="literal">No</span> <span class="string">description</span></span><br><span class="line">        <span class="attr">webhookToken:</span> <span class="string">xxxxxxxxx</span></span><br><span class="line">      <span class="attr">expr:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">probe_success&#123;module="dns_k8s"&#125;</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">        <span class="attr">alertTag:</span> <span class="string">k8s</span></span><br></pre></td></tr></table></figure><p>3、应用rule<br><code>kubectl apply -f prometheus-rule-dns.yaml</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.voidking.com/dev-k8s-operator/&quot;&gt;《Kubernetes Operator》&lt;/a&gt;一文中学习了Operator的基础，&lt;a href=&quot;https://www.voidking.com/dev-prometheus-blackbox-exporter&quot;&gt;《Prometheus Blackbox exporter》&lt;/a&gt;一文中学习了blackbox exporter的安装配置。&lt;/p&gt;
&lt;p&gt;而Prometheus Operator，顾名思义，是负责K8S中自动化管理Prometheus的Custom Controller。更多内容，参考&lt;a href=&quot;https://github.com/coreos/prometheus-operator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;coreos/prometheus-operator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文中，我们研究的问题是：怎样利用Prometheus Operator，在Kubernetes集群中安装部署Prometheus，并且添加Blackbox exporter组件？&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus Blackbox exporter</title>
    <link href="https://www.voidking.com/dev-prometheus-blackbox-exporter/"/>
    <id>https://www.voidking.com/dev-prometheus-blackbox-exporter/</id>
    <published>2020-06-28T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="白盒监控和黑盒监控"><a href="#白盒监控和黑盒监控" class="headerlink" title="白盒监控和黑盒监控"></a>白盒监控和黑盒监控</h1><p>我们监控主机的资源用量、容器的运行状态、数据库中间件的运行数据。这些都是支持业务和服务的基础设施，通过白盒能够了解其内部的实际运行状态，通过对监控指标的观察能够预判可能出现的问题，从而对潜在的不确定因素进行优化。而从完整的监控逻辑的角度，除了大量的应用白盒监控以外，还应该添加适当的黑盒监控。黑盒监控即以用户的身份测试服务的外部可见性，常见的黑盒监控包括HTTP探针、TCP探针等用于检测站点或者服务的可访问性，以及访问效率等。</p><p>黑盒监控相较于白盒监控最大的不同在于黑盒监控是以故障为导向当故障发生时，黑盒监控能快速发现故障，而白盒监控则侧重于主动发现或者预测潜在的问题。一个完善的监控目标是要能够从白盒的角度发现潜在问题，能够在黑盒的角度快速发现已经发生的问题。</p><p>Prometheus Blackbox exporter允许通过HTTP，HTTPS，DNS，TCP和ICMP对端点进行黑盒探测。</p><p>更多内容，参考<a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/exporter/commonly-eporter-usage/install_blackbox_exporter" target="_blank" rel="noopener">网络探测：Blackbox Exporter</a> 和 <a href="https://github.com/prometheus/blackbox_exporter" target="_blank" rel="noopener">prometheus/blackbox_exporter</a>。</p><p>本文中，我们会安装blackbox exporter，并且使用http探针对一些接口进行探活。</p><a id="more"></a><h1 id="安装使用blackbox-exporter"><a href="#安装使用blackbox-exporter" class="headerlink" title="安装使用blackbox exporter"></a>安装使用blackbox exporter</h1><p>blackbox exporter的常规安装使用方法有三种：直接使用二进制文件、使用docker image、编译安装。<br>这里我们选择使用docker image的方式来进行安装，默认已经安装了docker。</p><p>1、创建配置文件blackbox.yml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">modules:</span></span><br><span class="line"><span class="symbol">  http_2xx:</span></span><br><span class="line"><span class="symbol">    prober:</span> http</span><br><span class="line"><span class="symbol">    http:</span></span><br><span class="line"><span class="symbol">      method:</span> GET</span><br><span class="line"><span class="symbol">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">  http_post_2xx:</span></span><br><span class="line"><span class="symbol">    prober:</span> http</span><br><span class="line"><span class="symbol">    http:</span></span><br><span class="line"><span class="symbol">      method:</span> POST</span><br><span class="line"><span class="symbol">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">  tcp:</span></span><br><span class="line"><span class="symbol">    prober:</span> tcp</span><br><span class="line"><span class="symbol">  ping:</span></span><br><span class="line"><span class="symbol">    prober:</span> icmp</span><br><span class="line"><span class="symbol">    timeout:</span> <span class="number">3</span>s</span><br><span class="line"><span class="symbol">    icmp:</span></span><br><span class="line"><span class="symbol">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br><span class="line"><span class="symbol">  dns_baidu:</span></span><br><span class="line"><span class="symbol">    prober:</span> dns</span><br><span class="line"><span class="symbol">    timeout:</span> <span class="number">5</span>s</span><br><span class="line"><span class="symbol">    dns:</span></span><br><span class="line"><span class="symbol">      query_name:</span> <span class="string">"baidu.com"</span></span><br><span class="line"><span class="symbol">      query_type:</span> <span class="string">"A"</span></span><br><span class="line"><span class="symbol">      preferred_ip_protocol:</span> <span class="string">"ip4"</span></span><br></pre></td></tr></table></figure><p>探测时默认使用ipv6，探测不支持ipv6的站点都会显示失败，因此在配置时改成了ipv4，更多内容参考<a href="https://prometheus.io/docs/guides/multi-target-exporter/" target="_blank" rel="noopener">UNDERSTANDING AND USING THE MULTI-TARGET EXPORTER PATTERN</a>。</p><p>2、启动blackbox exporter</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name blackbox-exporter -d \</span><br><span class="line">-p 9115:9115  \</span><br><span class="line">-v `pwd`:<span class="built_in">/config </span>\</span><br><span class="line">prom/blackbox-exporter:v0.16.0 --config.<span class="attribute">file</span>=/config/blackbox.yml</span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=http_2xx&amp;target=baidu.com"</span><br><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=http_post_2xx&amp;target=baidu.com"</span><br><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=tcp&amp;target=baidu.com:<span class="number">80</span>"</span><br><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=ping&amp;target=baidu.com"</span><br><span class="line">curl "http://<span class="number">127.0.0.1</span>:<span class="number">9115</span>/probe?module=dns_baidu&amp;target=<span class="number">180.76.76.76</span>"</span><br></pre></td></tr></table></figure><p>从返回的样本中，可以获取站点的DNS解析耗时、站点响应时间、HTTP响应状态码等等和站点访问质量相关的监控指标，从而帮助管理员主动的发现故障和问题。</p><h1 id="与prometheus集成"><a href="#与prometheus集成" class="headerlink" title="与prometheus集成"></a>与prometheus集成</h1><p>紧接着<a href="https://www.voidking.com/dev-docker-prometheus/">《使用Docker安装配置Prometheus》</a>，当前prometheus.yml配置内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment">#默认采集监控数据时间间隔</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">monitor:</span> <span class="string">'my-monitor'</span></span><br><span class="line"><span class="attr">scrape_configs:</span>  <span class="comment">#监控对象设置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span> <span class="comment">#任务名称</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span> <span class="comment">#每隔5s获取一次监控数据</span></span><br><span class="line">    <span class="attr">static_configs:</span> <span class="comment">#监控对象地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['127.0.0.1:9090']</span>  <span class="comment"># 将自己加入到监控对象中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9100']</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">'client-node-exporter'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9091']</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">'pushgateway'</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/etc/prometheus/rules.yml</span>   <span class="comment">#告警规则文件路径</span></span><br><span class="line"><span class="attr">alerting:</span>   <span class="comment">#告警管理器设置</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.56.102:9093']</span> <span class="comment">#告警信息会发送给alertmanager进一步处理</span></span><br></pre></td></tr></table></figure><h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>修改prometheus.yml，添加blackbox exporter相关字段。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">baidu_http2xx_probe</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">module:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http_2xx</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">baidu.com</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/probe</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9115</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus_http2xx_probe</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">module:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http_2xx</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">prometheus.io</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/probe</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9115</span></span><br></pre></td></tr></table></figure><p>这里分别配置了名为baidu_http2x_probe和prometheus_http2xx_probe的采集任务，并且通过params指定使用的探针（module）以及探测目标（target）。</p><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><p>以上配置会有一个问题，假如我们有N个目标站点且都需要M种探测方式，那么Prometheus中将包含N * M 个采集任务，从配置管理的角度来说显然是不可接受的。这里我们利用Prometheus的Relabeling方式对这些配置进行简化，配置方式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scrape_configs</span>:  #监控对象设置</span><br><span class="line">  - <span class="attribute">job_name</span>: prometheus #任务名称</span><br><span class="line">    <span class="attribute">scrape_interval</span>: <span class="number">5s</span> #每隔<span class="number">5s</span>获取一次监控数据</span><br><span class="line">    <span class="attribute">static_configs</span>: #监控对象地址</span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'127.0.0.1:9090'</span>]  # 将自己加入到监控对象中</span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'192.168.56.102:9100'</span>]</span><br><span class="line">        <span class="attribute">labels</span>:</span><br><span class="line">          <span class="attribute">group</span>: <span class="string">'client-node-exporter'</span></span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'192.168.56.102:9091'</span>]</span><br><span class="line">        <span class="attribute">labels</span>:</span><br><span class="line">          <span class="attribute">group</span>: <span class="string">'pushgateway'</span></span><br><span class="line">      - <span class="attribute">targets</span>: [<span class="string">'192.168.56.102:9115'</span>]</span><br><span class="line">  - <span class="attribute">job_name</span>: <span class="string">'blackbox'</span></span><br><span class="line">    <span class="attribute">metrics_path</span>: /probe</span><br><span class="line">    <span class="attribute">params</span>:</span><br><span class="line">      <span class="attribute">module</span>: [http_2xx]</span><br><span class="line">    <span class="attribute">static_configs</span>:</span><br><span class="line">      - <span class="attribute">targets</span>:</span><br><span class="line">        - <span class="attribute">http</span>:<span class="comment">//prometheus.io    # Target to probe with http.</span></span><br><span class="line">        - <span class="attribute">https</span>:<span class="comment">//prometheus.io   # Target to probe with https.</span></span><br><span class="line">        - <span class="attribute">http</span>:<span class="comment">//example.com:8080 # Target to probe with http on port 8080.</span></span><br><span class="line">    <span class="attribute">relabel_configs</span>:</span><br><span class="line">      - <span class="attribute">source_labels</span>: [__address__]</span><br><span class="line">        <span class="attribute">target_label</span>: __param_target</span><br><span class="line">      - <span class="attribute">source_labels</span>: [__param_target]</span><br><span class="line">        <span class="attribute">target_label</span>: instance</span><br><span class="line">      - <span class="attribute">target_label</span>: __address__</span><br><span class="line">        <span class="attribute">replacement</span>: <span class="number">192.168</span>.<span class="number">56.102</span>:<span class="number">9115</span> # The blackbox exporter's real <span class="attribute">hostname</span>:port.</span><br></pre></td></tr></table></figure><p>这里针对每一个探针服务（如http_2xx）定义一个采集任务，并且直接将任务的采集目标定义为我们需要探测的站点。在采集样本数据之前通过relabel_configs对采集任务进行动态设置。</p><p>上面的配置，实际上相当于：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">curl</span> <span class="string">"http://192.168.56.102:9115/probe?module=http_2xx&amp;target=http://prometheus.io"</span></span><br><span class="line">curl <span class="string">"http://192.168.56.102:9115/probe?module=http_2xx&amp;target=https://prometheus.io"</span></span><br><span class="line">curl <span class="string">"http://192.168.56.102:9115/probe?module=http_2xx&amp;target=http://example.com:8080"</span></span><br></pre></td></tr></table></figure><p>这个配置实际上是很奇怪的，因为第一个job中 static_configs.targets 代表的是用来exporter对外暴露的接口，第二个job中 static_configs.targets 却代表blackbox要探测的站点。而且第二个job的 relabel_configs.replacement 居然用来指定blackbox的url，我也是服气了，说好的用来替换标签值的呢？</p><p>重启prometheus，然后进行验证：<br>（1）访问<a href="http://192.168.56.102:9115/" target="_blank" rel="noopener">blackbox-exporter页面</a>，可以看到探测记录的日志。<br>（2）访问<a href="http://192.168.56.102:9090/targets" target="_blank" rel="noopener">prometheus的target页面</a>，即可看到blackbox-exporter。<br>（3）访问<a href="http://192.168.56.102:9090/graph" target="_blank" rel="noopener">prometheus的graph页面</a>，可以查看blackbox-exporter指标。<br> <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;job=~<span class="string">"blackbox"</span>,__name__!~<span class="string">"^go.*"</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;白盒监控和黑盒监控&quot;&gt;&lt;a href=&quot;#白盒监控和黑盒监控&quot; class=&quot;headerlink&quot; title=&quot;白盒监控和黑盒监控&quot;&gt;&lt;/a&gt;白盒监控和黑盒监控&lt;/h1&gt;&lt;p&gt;我们监控主机的资源用量、容器的运行状态、数据库中间件的运行数据。这些都是支持业务和服务的基础设施，通过白盒能够了解其内部的实际运行状态，通过对监控指标的观察能够预判可能出现的问题，从而对潜在的不确定因素进行优化。而从完整的监控逻辑的角度，除了大量的应用白盒监控以外，还应该添加适当的黑盒监控。黑盒监控即以用户的身份测试服务的外部可见性，常见的黑盒监控包括HTTP探针、TCP探针等用于检测站点或者服务的可访问性，以及访问效率等。&lt;/p&gt;
&lt;p&gt;黑盒监控相较于白盒监控最大的不同在于黑盒监控是以故障为导向当故障发生时，黑盒监控能快速发现故障，而白盒监控则侧重于主动发现或者预测潜在的问题。一个完善的监控目标是要能够从白盒的角度发现潜在问题，能够在黑盒的角度快速发现已经发生的问题。&lt;/p&gt;
&lt;p&gt;Prometheus Blackbox exporter允许通过HTTP，HTTPS，DNS，TCP和ICMP对端点进行黑盒探测。&lt;/p&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/exporter/commonly-eporter-usage/install_blackbox_exporter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网络探测：Blackbox Exporter&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/prometheus/blackbox_exporter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;prometheus/blackbox_exporter&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文中，我们会安装blackbox exporter，并且使用http探针对一些接口进行探活。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Operator</title>
    <link href="https://www.voidking.com/dev-k8s-operator/"/>
    <id>https://www.voidking.com/dev-k8s-operator/</id>
    <published>2020-06-27T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-Operator是啥？"><a href="#Kubernetes-Operator是啥？" class="headerlink" title="Kubernetes Operator是啥？"></a>Kubernetes Operator是啥？</h1><blockquote><p><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener">Operators</a> are software extensions to Kubernetes that make use of <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/" target="_blank" rel="noopener">custom resources</a> to manage applications and their components. Operators follow Kubernetes principles, notably the <a href="https://kubernetes.io/docs/concepts/#kubernetes-control-plane" target="_blank" rel="noopener">control loop</a>.</p></blockquote><p>Operator 是 Kubernetes 的扩展软件，通过自定义资源，管理应用及其组件。 Operator 遵循 Kubernetes 的理念，特别是在控制回路方面。</p><p>Kubernetes自定义资源包括Custom resources 和 Custom controllers。</p><p>Operator 模式旨在捕获（正在管理一个或一组服务的）运维人员的关键目标。负责特定应用和service的运维人员，在系统应该如何运行、如何部署以及出现问题时如何处理等方面有深入的了解。<br>在 Kubernetes 上运行工作负载的人们都喜欢通过自动化来处理重复的任务。Operator 模式会封装我们编写的（Kubernetes 本身提供功能以外的）任务自动化代码。</p><p>Operator可以自动化的事情包括：</p><ul><li>按需部署应用</li><li>获取/还原应用状态的备份</li><li>处理应用代码的升级以及相关改动。例如，数据库 schema 或额外的配置设置</li><li>发布一个 service，要求不支持 Kubernetes API 的应用也能发现它</li><li>模拟整个或部分集群中的故障以测试其稳定性</li><li>在没有内部成员选举程序的情况下，为分布式应用选择首领角色</li></ul><p>简单来说，Kubernetes实际是期望状态管理器，如果Kubernetes本身提供的功能无法达到期望状态，特别是对于有状态应用，那么就需要手动处理，而Operator可以使这种处理自动化。</p><p>更多内容，参考<a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener">Operator 模式</a>。</p><p>本文中，将会学习编写一个Operator，并应用到k8s集群。</p><a id="more"></a><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>Operator的yaml文件和go文件，可以纯手写，没毛病。但是使用工具能够提高我们的编写效率。编写Operator的工具有：</p><ul><li><a href="https://kudo.dev/" target="_blank" rel="noopener">KUDO</a>，Kubernetes 通用声明式 Operator)</li><li><a href="https://book.kubebuilder.io/" target="_blank" rel="noopener">kubebuilder</a></li><li><a href="https://metacontroller.app/" target="_blank" rel="noopener">Metacontroller</a>，可与 Webhook 结合使用，以实现自己的功能。</li><li><a href="https://github.com/operator-framework/getting-started" target="_blank" rel="noopener">Operator Framework</a></li></ul><p>查找和分享Operator：<a href="https://operatorhub.io/" target="_blank" rel="noopener">OperatorHub</a></p><h1 id="Operator-Framework"><a href="#Operator-Framework" class="headerlink" title="Operator Framework"></a>Operator Framework</h1><p><a href="https://coreos.com/blog/introducing-operator-framework" target="_blank" rel="noopener">Operator Framework</a>是一个开源工具包，用来管理被称为operators的k8s应用程序，高效、自动化、可扩展。它的两个核心部分是Operator SDK 和 Operator Lifecycle Manager 。</p><p>Operator SDK：允许开发人员根据专业知识来构建Operator，而无需了解Kubernetes API的复杂性。<br>Operator Lifecycle Manager：帮助用户安装、更新和总体管理跨集群运行的所有Operators（及其相关服务）的生命周期。</p><p>在开发机上安装Operator SDK，在集群中安装Operator Operator Lifecycle Manager。</p><p>对于这两个组件，可以在katacoda上试玩，熟悉它们的安装和使用，<a href="https://www.katacoda.com/openshift/courses/operatorframework/" target="_blank" rel="noopener">Building Operators on OpenShift</a>。</p><h1 id="第一个Operator"><a href="#第一个Operator" class="headerlink" title="第一个Operator"></a>第一个Operator</h1><p>参考<a href="https://www.qikqiak.com/post/k8s-operator-101/" target="_blank" rel="noopener">Kubernetes Operator 快速入门教程</a>，使用Operator Framework开发一个Operator应用，代码仓库<a href="https://github.com/cnych/opdemo" target="_blank" rel="noopener">cnych/opdemo</a>。</p><h1 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h1><p><a href="https://coreos.com/blog/introducing-operators.html" target="_blank" rel="noopener">Introducing Operators: Putting Operational Knowledge into Software</a><br><a href="https://cloud.google.com/blog/products/containers-kubernetes/best-practices-for-building-kubernetes-operators-and-stateful-apps" target="_blank" rel="noopener">Best practices for building Kubernetes Operators and stateful apps</a><br><a href="http://dockone.io/article/8769" target="_blank" rel="noopener">揭秘Kubernetes Operator（一）</a><br><a href="https://bestsamina.github.io/posts/2019-02-04-first-operator-sdk-helm/" target="_blank" rel="noopener">第一次玩 operator-sdk 就上手</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kubernetes-Operator是啥？&quot;&gt;&lt;a href=&quot;#Kubernetes-Operator是啥？&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes Operator是啥？&quot;&gt;&lt;/a&gt;Kubernetes Operator是啥？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Operators&lt;/a&gt; are software extensions to Kubernetes that make use of &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;custom resources&lt;/a&gt; to manage applications and their components. Operators follow Kubernetes principles, notably the &lt;a href=&quot;https://kubernetes.io/docs/concepts/#kubernetes-control-plane&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;control loop&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Operator 是 Kubernetes 的扩展软件，通过自定义资源，管理应用及其组件。 Operator 遵循 Kubernetes 的理念，特别是在控制回路方面。&lt;/p&gt;
&lt;p&gt;Kubernetes自定义资源包括Custom resources 和 Custom controllers。&lt;/p&gt;
&lt;p&gt;Operator 模式旨在捕获（正在管理一个或一组服务的）运维人员的关键目标。负责特定应用和service的运维人员，在系统应该如何运行、如何部署以及出现问题时如何处理等方面有深入的了解。&lt;br&gt;在 Kubernetes 上运行工作负载的人们都喜欢通过自动化来处理重复的任务。Operator 模式会封装我们编写的（Kubernetes 本身提供功能以外的）任务自动化代码。&lt;/p&gt;
&lt;p&gt;Operator可以自动化的事情包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按需部署应用&lt;/li&gt;
&lt;li&gt;获取/还原应用状态的备份&lt;/li&gt;
&lt;li&gt;处理应用代码的升级以及相关改动。例如，数据库 schema 或额外的配置设置&lt;/li&gt;
&lt;li&gt;发布一个 service，要求不支持 Kubernetes API 的应用也能发现它&lt;/li&gt;
&lt;li&gt;模拟整个或部分集群中的故障以测试其稳定性&lt;/li&gt;
&lt;li&gt;在没有内部成员选举程序的情况下，为分布式应用选择首领角色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说，Kubernetes实际是期望状态管理器，如果Kubernetes本身提供的功能无法达到期望状态，特别是对于有状态应用，那么就需要手动处理，而Operator可以使这种处理自动化。&lt;/p&gt;
&lt;p&gt;更多内容，参考&lt;a href=&quot;https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Operator 模式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文中，将会学习编写一个Operator，并应用到k8s集群。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="源码" scheme="https://www.voidking.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="golang" scheme="https://www.voidking.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>kube-controller-manager指标收集</title>
    <link href="https://www.voidking.com/dev-kube-controller-manager-metrics/"/>
    <id>https://www.voidking.com/dev-kube-controller-manager-metrics/</id>
    <published>2020-06-22T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家都知道需要监控k8s指标，但是具体需要监控k8s的哪些组件的哪些指标？<br>本文，就来学习梳理kube-controller-mananger组件的监控指标。</p><a id="more"></a><h1 id="有哪些指标？"><a href="#有哪些指标？" class="headerlink" title="有哪些指标？"></a>有哪些指标？</h1><p>要收集指标，首先要知道有哪些指标可以收集。<br>方法一：使用curl命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">k</span> <span class="built_in">get</span> pods -n kube-<span class="built_in">system</span> -<span class="keyword">o</span> wide | <span class="keyword">grep</span> kube-controller-manager</span><br><span class="line"><span class="keyword">k</span> <span class="built_in">get</span> svc -n kube-<span class="built_in">system</span> -<span class="keyword">o</span> wide | <span class="keyword">grep</span> kube-controller-manager</span><br><span class="line"></span><br><span class="line">ssh <span class="symbol">&lt;clusterhost&gt;</span></span><br><span class="line">curl localhos<span class="variable">t:</span><span class="symbol">&lt;nodeport&gt;</span>/metrics</span><br></pre></td></tr></table></figure><p>方法二：在prometheus使用promql</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count(&#123;job=<span class="string">"kube-controller-manager"</span>&#125;) by (<span class="name">__name__</span>)</span><br><span class="line">count(&#123;job=<span class="string">"kube-controller-manager"</span>,__name__!~<span class="string">"^go_.*"</span>&#125;) by (<span class="name">__name__</span>)</span><br></pre></td></tr></table></figure><h1 id="指标含义？"><a href="#指标含义？" class="headerlink" title="指标含义？"></a>指标含义？</h1><p>找到了指标，接下来需要知道指标的含义。<br>访问 <a href="https://docs.signalfx.com/en/latest/integrations/agent/monitors/kube-controller-manager.html" target="_blank" rel="noopener">Splunk doc - kube-controller-manager</a>，使用指标名称搜索即可。</p><p>比如搜索：<br>rest_client_request_duration_seconds_bucket<br>得到结果：<br>rest_client_request_duration_seconds_bucket (cumulative)<br>Request latency in seconds. Broken down by verb and URL. (bucket)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家都知道需要监控k8s指标，但是具体需要监控k8s的哪些组件的哪些指标？&lt;br&gt;本文，就来学习梳理kube-controller-mananger组件的监控指标。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="k8s" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/k8s/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="k8s" scheme="https://www.voidking.com/tags/k8s/"/>
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus查询语言：PromQL</title>
    <link href="https://www.voidking.com/dev-prometheus-query-language-promql/"/>
    <id>https://www.voidking.com/dev-prometheus-query-language-promql/</id>
    <published>2020-06-21T12:00:00.000Z</published>
    <updated>2021-04-17T13:21:53.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PromQL简介"><a href="#PromQL简介" class="headerlink" title="PromQL简介"></a>PromQL简介</h1><blockquote><p>Prometheus提供了一种称为PromQL（Prometheus查询语言）的功能查询语言，使用户可以实时选择和汇总时间序列数据。表达式的结果既可以显示为图形，也可以在Prometheus的表达式浏览器中显示为表格数据，也可以由外部系统通过HTTP API使用。</p></blockquote><p>更多内容参考<a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank" rel="noopener">QUERYING PROMETHEUS</a> 和 <a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql" target="_blank" rel="noopener">探索PromQL</a>。</p><a id="more"></a><h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># HELP node_cpu Seconds the cpus spent in each mode.</span></span><br><span class="line"><span class="meta"># TYPE node_cpu counter</span></span><br><span class="line">node_cpu&#123;cpu=<span class="string">"cpu0"</span>,mode=<span class="string">"idle"</span>&#125; <span class="number">362812.7890625</span></span><br><span class="line"><span class="meta"># HELP node_load1 1m load average.</span></span><br><span class="line"><span class="meta"># TYPE node_load1 gauge</span></span><br><span class="line">node_load1 <span class="number">3.0703125</span></span><br></pre></td></tr></table></figure><p>其中非#开头的每一行表示当前Node Exporter采集到的一个监控指标（监控样本）：node_cpu和node_load1表明了当前指标的名称（大括号中的标签则反映了该指标的一些特征和维度），浮点数是该指标的具体值。指标格式为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">metric_name</span> <span class="selector-attr">[ &#123;label_name=<span class="string">"label_value"</span>&#125; ]</span> <span class="selector-tag">value</span> <span class="selector-attr">[ timestamp ]</span></span><br></pre></td></tr></table></figure><p>其中metric_name和label_name必须遵循PromQL的格式规范要求。value是一个float格式的数据，timestamp的类型为int64（从1970-01-01 00:00:00以来的毫秒数），timestamp为可选默认为当前时间。具有相同metric_name的样本必须按照一个组的形式排列，并且每一行必须是唯一的指标名称和标签键值对组合。</p><p>Prometheus会将所有采集到的指标数据以时间序列（time-series）的方式保存在内存数据库中，并且定时保存到硬盘上。时间序列是按照时间戳和指标的序列顺序存放的，我们称之为向量(vector)。</p><p>可以将time-series理解为一个数字矩阵，X轴是时间戳，Y轴是指标。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>在Prometheus的表达语言中，一个表达式或子表达式可以分以下四种类型之一：</p><ul><li>瞬时向量：一组时间序列，这组时间序列具有相同的时间戳</li><li>范围向量：一段时间范围的时间序列</li><li>标量：一个简单的数字浮点值</li><li>String：一个简单的字符串值；目前未使用</li></ul><p>根据用例（例如在绘制图形或显示表达式的输出时），由于用户指定的表达式的结果，其中只有某些类型是合法的。例如，返回瞬时向量的表达式是唯一可以直接绘制图形的类型。</p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>字符串可以用单引号，双引号或反引号指定为常量。<br>PromQL遵循与Go相同的转义规则。在单引号或双引号中，反斜杠开始一个转义序列。可以使用八进制或十六进制提供特定字符。<br>反引号内不会处理任何转义。与Go不同，Prometheus不会在反引号内丢弃换行符。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"this is a string"</span><br><span class="line">'these are unescaped: <span class="symbol">\n</span> <span class="symbol">\\</span> <span class="symbol">\t</span>'</span><br><span class="line">`these are not unescaped: <span class="symbol">\n</span> ' " <span class="symbol">\t</span>`</span><br></pre></td></tr></table></figure><h2 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h2><p>浮点常量可以写做数字形式：<code>[-](digits)[.(digits)]</code> ，例如 -2.43</p><h1 id="时间序列选择器"><a href="#时间序列选择器" class="headerlink" title="时间序列选择器"></a>时间序列选择器</h1><h2 id="瞬时向量选择器"><a href="#瞬时向量选择器" class="headerlink" title="瞬时向量选择器"></a>瞬时向量选择器</h2><p>瞬时向量选择器允许在给定的时间戳（瞬时）下选择一组时间序列和每个样本的单个样本值：以最简单的形式，仅指定度量名称。这将导致一个瞬时向量，其中包含具有该度量名称的所有时间序列的元素。<br>通过在花括号 <code>{}</code> 中附加逗号分隔的标签匹配器列表，可以进一步过滤这些时间序列。<br>也可以否定标签值，或将标签值与正则表达式匹配。存在以下标签匹配运算符：</p><ul><li>=：选择与字符串完全相等的标签。</li><li>!=：选择不等于字符串的标签。</li><li>=〜：选择与字符串进行正则表达式匹配的标签。</li><li>!〜：选择与字符串正则表达式不匹配的标签。</li></ul><p>匹配空标签值的标签匹配器还会选择所有根本没有设置特定标签的时间序列。正则表达式匹配完全锚定。同一标签名称可能有多个匹配器。<br>向量选择器必须指定一个名称或至少一个与空字符串不匹配的标签匹配器。<br>通过与内部 <code>__name__</code> 标签进行匹配，标签匹配器也可以应用于度量标准名称。Prometheus中的所有正则表达式都使用<a href="https://github.com/google/re2/wiki/Syntax" target="_blank" rel="noopener">RE2语法</a>。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;job=~<span class="string">".*"</span>&#125; <span class="comment"># Bad!</span></span><br><span class="line">&#123;job=~<span class="string">".+"</span>&#125;              <span class="comment"># Good!</span></span><br><span class="line">&#123;job=~<span class="string">".*"</span>,method=<span class="string">"get"</span>&#125; <span class="comment"># Good!</span></span><br><span class="line">&#123;__name__=~<span class="string">"job:.*"</span>&#125; <span class="comment"># selects all metrics that have a name starting with job:</span></span><br><span class="line"><span class="keyword">on</span>&#123;&#125; <span class="comment"># Bad!</span></span><br><span class="line">&#123;__name__=<span class="string">"on"</span>&#125; <span class="comment"># Good!</span></span><br></pre></td></tr></table></figure><h2 id="范围向量选择器"><a href="#范围向量选择器" class="headerlink" title="范围向量选择器"></a>范围向量选择器</h2><p>范围向量的工作方式与瞬时向量相同，不同的是范围向量从瞬时向量中选择了一定范围的样本。语法上，将范围持续时间附加在向量选择器末尾的方括号 <code>[]</code> 中，以指定提取时间值的范围。<br>持续时间以数字指定，后面紧跟以下单位之一：s - seconds，m - minutes，h - hours，d - days，w - weeks，y - years</p><h2 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h2><p>偏移量允许更改查询中各个瞬时向量和范围向量的时间偏移。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http_requests_total offset <span class="number">5</span>m</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(http_requests_total&#123;method=<span class="string">"GET"</span>&#125; offset <span class="number">5</span>m)</span></span> <span class="comment">// GOOD.</span></span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(http_requests_total&#123;method=<span class="string">"GET"</span>&#125;)</span></span> offset <span class="number">5</span>m <span class="comment">// INVALID.</span></span><br><span class="line"><span class="function"><span class="title">rate</span><span class="params">(http_requests_total[<span class="number">5</span>m] offset <span class="number">1</span>w)</span></span></span><br></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询对给定的范围进行即时查询。子查询的结果是范围向量。<br>语法：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;instant_query&gt; '[' &lt;range&gt; ':' <span class="meta">[&lt;resolution&gt;]</span> ']' [ offset &lt;duration&gt; ]</span><br></pre></td></tr></table></figure><p>resolution是可选的。默认值为全局评估间隔。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Prometheus支持许多二进制和聚合运算符，更多内容参考<a href="https://prometheus.io/docs/prometheus/latest/querying/operators/" target="_blank" rel="noopener">表达式语言运算符</a>。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Prometheus支持多种对数据进行操作的函数，更多内容参考<a href="https://prometheus.io/docs/prometheus/latest/querying/functions/" target="_blank" rel="noopener">表达式语言函数</a>。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>PromQL支持以＃开头的行注释。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>详细内容参见<a href="https://prometheus.io/docs/prometheus/latest/querying/examples/" target="_blank" rel="noopener">QUERY EXAMPLE</a></p><h2 id="简单时间序列查询"><a href="#简单时间序列查询" class="headerlink" title="简单时间序列查询"></a>简单时间序列查询</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http_requests_total</span><br><span class="line">&#123;<span class="attribute">__name__</span>=<span class="string">"http_requests_total"</span>&#125;</span><br><span class="line">http_requests_total&#123;<span class="attribute">job</span>=<span class="string">"apiserver"</span>, <span class="attribute">handler</span>=<span class="string">"/api/comments"</span>&#125;</span><br><span class="line">http_requests_total&#123;<span class="attribute">job</span>=<span class="string">"apiserver"</span>, <span class="attribute">handler</span>=<span class="string">"/api/comments"</span>&#125;[5m]</span><br><span class="line">http_requests_total&#123;<span class="attribute">job</span>=~".*server"&#125;</span><br><span class="line">http_requests_total&#123;status!~<span class="string">"4.."</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rate(http_requests_total[<span class="number">5</span>m])[<span class="number">30</span>m:<span class="number">1</span>m]</span><br><span class="line">max_over_time(deriv(rate(distance_covered_total[<span class="number">5</span>s])[<span class="number">30</span>s:<span class="number">5</span>s])[<span class="number">10</span>m:])</span><br></pre></td></tr></table></figure><h2 id="函数运算等"><a href="#函数运算等" class="headerlink" title="函数运算等"></a>函数运算等</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rate(<span class="name">http_requests_total</span>[<span class="number">5</span>m])</span><br><span class="line"></span><br><span class="line">sum by (<span class="name">job</span>) (</span><br><span class="line">  rate(<span class="name">http_requests_total</span>[<span class="number">5</span>m])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name">instance_memory_limit_bytes</span> - instance_memory_usage_bytes) / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">sum by (<span class="name">app</span>, proc) (</span><br><span class="line">  instance_memory_limit_bytes - instance_memory_usage_bytes</span><br><span class="line">) / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">topk(<span class="number">3</span>, sum by (<span class="name">app</span>, proc) (<span class="name">rate</span>(<span class="name">instance_cpu_time_ns</span>[<span class="number">5</span>m])))</span><br><span class="line"></span><br><span class="line">count by (<span class="name">app</span>) (<span class="name">instance_cpu_time_ns</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PromQL简介&quot;&gt;&lt;a href=&quot;#PromQL简介&quot; class=&quot;headerlink&quot; title=&quot;PromQL简介&quot;&gt;&lt;/a&gt;PromQL简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Prometheus提供了一种称为PromQL（Prometheus查询语言）的功能查询语言，使用户可以实时选择和汇总时间序列数据。表达式的结果既可以显示为图形，也可以在Prometheus的表达式浏览器中显示为表格数据，也可以由外部系统通过HTTP API使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多内容参考&lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QUERYING PROMETHEUS&lt;/a&gt; 和 &lt;a href=&quot;https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;探索PromQL&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="专业" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/"/>
    
      <category term="运维" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="监控" scheme="https://www.voidking.com/categories/%E4%B8%93%E4%B8%9A/%E8%BF%90%E7%BB%B4/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="监控" scheme="https://www.voidking.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="prometheus" scheme="https://www.voidking.com/tags/prometheus/"/>
    
  </entry>
  
</feed>
